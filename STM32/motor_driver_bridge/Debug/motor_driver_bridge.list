
motor_driver_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08009480  08009480  0000a480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009868  08009868  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009868  08009868  0000a868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009870  08009870  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009870  08009870  0000a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009874  08009874  0000a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009878  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000450  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000624  20000624  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012957  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025c4  00000000  00000000  0001db5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00020120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d12  00000000  00000000  000211d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d20e  00000000  00000000  00021eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001421c  00000000  00000000  0003f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abea4  00000000  00000000  00053314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff1b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005890  00000000  00000000  000ff1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00104a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009468 	.word	0x08009468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009468 	.word	0x08009468

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
Command g_command;
Result g_result;
bool g_main_loop_flag;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a09      	ldr	r2, [pc, #36]	@ (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d10a      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if(g_main_loop_flag){
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>
			printf("Control cycle is slow\r\n");
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bc2:	f006 fbd1 	bl	8007368 <puts>
		}
		else{
			g_main_loop_flag = true;
		}
	}
}
 8000bc6:	e002      	b.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x26>
			g_main_loop_flag = true;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200003e8 	.word	0x200003e8
 8000bdc:	200004cc 	.word	0x200004cc
 8000be0:	08009480 	.word	0x08009480

08000be4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(hspi, &g_result, sizeof(g_result));
 8000bec:	2208      	movs	r2, #8
 8000bee:	4904      	ldr	r1, [pc, #16]	@ (8000c00 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f003 faab 	bl	800414c <HAL_SPI_Transmit_DMA>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200004c4 	.word	0x200004c4

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c08:	b09e      	sub	sp, #120	@ 0x78
 8000c0a:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000c0c:	4bba      	ldr	r3, [pc, #744]	@ (8000ef8 <main+0x2f4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f006 fbaf 	bl	8007378 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1a:	f001 f8b7 	bl	8001d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1e:	f000 fa41 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c22:	f000 fcd1 	bl	80015c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c26:	f000 fca9 	bl	800157c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c2a:	f000 fc77 	bl	800151c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000c2e:	f000 fa8d 	bl	800114c <MX_CAN_Init>
  MX_SPI1_Init();
 8000c32:	f000 fabf 	bl	80011b4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c36:	f000 faf5 	bl	8001224 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c3a:	f000 fb8f 	bl	800135c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c3e:	f000 fbe1 	bl	8001404 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000c42:	f000 fc35 	bl	80014b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //初期設?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
  bool control = true;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  PIController pid;
  pid.kp = 5.0f;
 8000c4c:	4bab      	ldr	r3, [pc, #684]	@ (8000efc <main+0x2f8>)
 8000c4e:	613b      	str	r3, [r7, #16]
  pid.ki = 5.0f;
 8000c50:	4baa      	ldr	r3, [pc, #680]	@ (8000efc <main+0x2f8>)
 8000c52:	617b      	str	r3, [r7, #20]
  pid.integral_l = 0.0f;
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  pid.integral_r = 0.0f;
 8000c5a:	f04f 0300 	mov.w	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]

  HAL_SPI_TransmitReceive_DMA(&hspi1, &g_command, &g_result, sizeof(g_command));
 8000c60:	2308      	movs	r3, #8
 8000c62:	4aa7      	ldr	r2, [pc, #668]	@ (8000f00 <main+0x2fc>)
 8000c64:	49a7      	ldr	r1, [pc, #668]	@ (8000f04 <main+0x300>)
 8000c66:	48a8      	ldr	r0, [pc, #672]	@ (8000f08 <main+0x304>)
 8000c68:	f003 fb60 	bl	800432c <HAL_SPI_TransmitReceive_DMA>
  HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 8000c6c:	213c      	movs	r1, #60	@ 0x3c
 8000c6e:	48a7      	ldr	r0, [pc, #668]	@ (8000f0c <main+0x308>)
 8000c70:	f004 fab0 	bl	80051d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 8000c74:	213c      	movs	r1, #60	@ 0x3c
 8000c76:	48a6      	ldr	r0, [pc, #664]	@ (8000f10 <main+0x30c>)
 8000c78:	f004 faac 	bl	80051d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	48a5      	ldr	r0, [pc, #660]	@ (8000f14 <main+0x310>)
 8000c80:	f004 f916 	bl	8004eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c84:	2108      	movs	r1, #8
 8000c86:	48a3      	ldr	r0, [pc, #652]	@ (8000f14 <main+0x310>)
 8000c88:	f004 f912 	bl	8004eb0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000c8c:	48a2      	ldr	r0, [pc, #648]	@ (8000f18 <main+0x314>)
 8000c8e:	f004 f85b 	bl	8004d48 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000c92:	2064      	movs	r0, #100	@ 0x64
 8000c94:	f001 f8e0 	bl	8001e58 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//wait main_loop_flag
		while(g_main_loop_flag == false){}
 8000c98:	bf00      	nop
 8000c9a:	4ba0      	ldr	r3, [pc, #640]	@ (8000f1c <main+0x318>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f8      	bne.n	8000c9a <main+0x96>
		//SPI
		float cmd_vel_l = -0.7f;//g_command.vel_l;
 8000ca8:	4b9d      	ldr	r3, [pc, #628]	@ (8000f20 <main+0x31c>)
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
		float cmd_vel_r = -0.7f;//g_command.vel_r;
 8000cac:	4b9c      	ldr	r3, [pc, #624]	@ (8000f20 <main+0x31c>)
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

		//encoder
		int16_t cnt_l = TIM2->CNT;
 8000cb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb6:	857b      	strh	r3, [r7, #42]	@ 0x2a
		int16_t cnt_r = TIM3->CNT;
 8000cb8:	4b9a      	ldr	r3, [pc, #616]	@ (8000f24 <main+0x320>)
 8000cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cbc:	853b      	strh	r3, [r7, #40]	@ 0x28
		TIM2->CNT = 0;
 8000cbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM3->CNT = 0;
 8000cc6:	4b97      	ldr	r3, [pc, #604]	@ (8000f24 <main+0x320>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
	  HAL_TIM_Encoder_Start( &htim2, TIM_CHANNEL_ALL );
 8000ccc:	213c      	movs	r1, #60	@ 0x3c
 8000cce:	488f      	ldr	r0, [pc, #572]	@ (8000f0c <main+0x308>)
 8000cd0:	f004 fa80 	bl	80051d4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start( &htim3, TIM_CHANNEL_ALL );
 8000cd4:	213c      	movs	r1, #60	@ 0x3c
 8000cd6:	488e      	ldr	r0, [pc, #568]	@ (8000f10 <main+0x30c>)
 8000cd8:	f004 fa7c 	bl	80051d4 <HAL_TIM_Encoder_Start>
		float vel_l = ((float)((int)cnt_l) * ENC_TO_TIRE * RATE)/RESOLUTION;
 8000cdc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000ce0:	ee07 3a90 	vmov	s15, r3
 8000ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce8:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8000f28 <main+0x324>
 8000cec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cf0:	eddf 7a8e 	vldr	s15, [pc, #568]	@ 8000f2c <main+0x328>
 8000cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000cfc:	eddf 7a8c 	vldr	s15, [pc, #560]	@ 8000f30 <main+0x32c>
 8000d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float vel_r = ((float)((int)cnt_r) * ENC_TO_TIRE * RATE)/RESOLUTION;
 8000d0c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d18:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8000f28 <main+0x324>
 8000d1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d20:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8000f2c <main+0x328>
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d2c:	eddf 7a80 	vldr	s15, [pc, #512]	@ 8000f30 <main+0x32c>
 8000d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d38:	edc7 7a08 	vstr	s15, [r7, #32]

		//PI control
		float volt_l;
		float volt_r;
		if (control) {
 8000d3c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80fd 	beq.w	8000f40 <main+0x33c>
			float e_l = cmd_vel_l - vel_l;
 8000d46:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d52:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			float e_r = cmd_vel_r - vel_r;
 8000d56:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000d5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			if(fabsf(e_l)>10.0f) e_l = 0;
 8000d66:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000d6a:	eef0 7ae7 	vabs.f32	s15, s15
 8000d6e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7a:	dd02      	ble.n	8000d82 <main+0x17e>
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	647b      	str	r3, [r7, #68]	@ 0x44
			if(fabsf(e_r)>10.0f) e_r = 0;
 8000d82:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000d86:	eef0 7ae7 	vabs.f32	s15, s15
 8000d8a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d96:	dd02      	ble.n	8000d9e <main+0x19a>
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	643b      	str	r3, [r7, #64]	@ 0x40
			pid.integral_l += e_l * DT;
 8000d9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000da2:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8000f34 <main+0x330>
 8000da6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db2:	edc7 7a06 	vstr	s15, [r7, #24]
			pid.integral_r += e_r * DT;
 8000db6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dba:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000f34 <main+0x330>
 8000dbe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dca:	edc7 7a07 	vstr	s15, [r7, #28]
			pid.integral_l = fmaxf(fminf(pid.integral_l,2.5f),-2.5f);
 8000dce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dd2:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8000dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dda:	f008 fb0c 	bl	80093f6 <fminf>
 8000dde:	eef0 7a40 	vmov.f32	s15, s0
 8000de2:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 8000de6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dea:	f008 fae7 	bl	80093bc <fmaxf>
 8000dee:	eef0 7a40 	vmov.f32	s15, s0
 8000df2:	edc7 7a06 	vstr	s15, [r7, #24]
			pid.integral_r = fmaxf(fminf(pid.integral_r,2.5f),-2.5f);
 8000df6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dfa:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8000dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000e02:	f008 faf8 	bl	80093f6 <fminf>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	eef8 0a04 	vmov.f32	s1, #132	@ 0xc0200000 -2.5
 8000e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e12:	f008 fad3 	bl	80093bc <fmaxf>
 8000e16:	eef0 7a40 	vmov.f32	s15, s0
 8000e1a:	edc7 7a07 	vstr	s15, [r7, #28]
			volt_l = pid.kp * e_l + pid.ki * pid.integral_l;
 8000e1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2a:	edd7 6a05 	vldr	s13, [r7, #20]
 8000e2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
			volt_r = pid.kp * e_r + pid.ki * pid.integral_r;
 8000e3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e42:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e4a:	edd7 6a05 	vldr	s13, [r7, #20]
 8000e4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e5a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
			//特性を無??��?��???��?��?り線形??��?��?
			volt_l = (volt_l > 0.0f) ? volt_l + 0.9f : volt_l - 0.9f;
 8000e5e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6a:	dd06      	ble.n	8000e7a <main+0x276>
 8000e6c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e70:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000f38 <main+0x334>
 8000e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e78:	e005      	b.n	8000e86 <main+0x282>
 8000e7a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e7e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000f38 <main+0x334>
 8000e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e86:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
			volt_r = (volt_r > 0.0f) ? volt_r + 0.9f : volt_r - 0.9f;
 8000e8a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	dd06      	ble.n	8000ea6 <main+0x2a2>
 8000e98:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000e9c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000f38 <main+0x334>
 8000ea0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ea4:	e005      	b.n	8000eb2 <main+0x2ae>
 8000ea6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000eaa:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000f38 <main+0x334>
 8000eae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eb2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
//			volt_l = fmaxf(fminf(volt_l,12.0f),-12.0f);
//			volt_r = fmaxf(fminf(volt_r,12.0f),-12.0f);
			volt_l = fmaxf(fminf(volt_l,6.0f),-6.0f);
 8000eb6:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8000eba:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8000ebe:	f008 fa9a 	bl	80093f6 <fminf>
 8000ec2:	eef0 7a40 	vmov.f32	s15, s0
 8000ec6:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8000eca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ece:	f008 fa75 	bl	80093bc <fmaxf>
 8000ed2:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
			volt_r = fmaxf(fminf(volt_r,6.0f),-6.0f);
 8000ed6:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8000eda:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8000ede:	f008 fa8a 	bl	80093f6 <fminf>
 8000ee2:	eef0 7a40 	vmov.f32	s15, s0
 8000ee6:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8000eea:	eeb0 0a67 	vmov.f32	s0, s15
 8000eee:	f008 fa65 	bl	80093bc <fmaxf>
 8000ef2:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
 8000ef6:	e02f      	b.n	8000f58 <main+0x354>
 8000ef8:	20000018 	.word	0x20000018
 8000efc:	40a00000 	.word	0x40a00000
 8000f00:	200004c4 	.word	0x200004c4
 8000f04:	200004bc 	.word	0x200004bc
 8000f08:	20000218 	.word	0x20000218
 8000f0c:	20000350 	.word	0x20000350
 8000f10:	2000039c 	.word	0x2000039c
 8000f14:	20000304 	.word	0x20000304
 8000f18:	200003e8 	.word	0x200003e8
 8000f1c:	200004cc 	.word	0x200004cc
 8000f20:	bf333333 	.word	0xbf333333
 8000f24:	40000400 	.word	0x40000400
 8000f28:	3eb6db6e 	.word	0x3eb6db6e
 8000f2c:	00000032 	.word	0x00000032
 8000f30:	00001000 	.word	0x00001000
 8000f34:	3ca3d70a 	.word	0x3ca3d70a
 8000f38:	3f666666 	.word	0x3f666666
 8000f3c:	00001f3f 	.word	0x00001f3f

		}
		else{
			pid.integral_l = 0.0f;
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
			pid.integral_r = 0.0f;
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
			volt_l = 0.0f;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
			volt_r = 0.0f;
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	64bb      	str	r3, [r7, #72]	@ 0x48
		//PWM
		uint32_t pwm_l;
		uint32_t pwm_r;
		bool dir_l;
		bool dir_r;
		if (control){
 8000f58:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d03c      	beq.n	8000fda <main+0x3d6>
			pwm_l = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_l)/12.0f));
 8000f60:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8000f3c <main+0x338>
 8000f64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f68:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000f6c:	eef0 6ae7 	vabs.f32	s13, s15
 8000f70:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 8000f74:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f80:	ee17 3a90 	vmov	r3, s15
 8000f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pwm_r = (uint32_t)(MAX_DUTY_CNT * (fabsf(volt_r)/12.0f));
 8000f86:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8000f3c <main+0x338>
 8000f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000f92:	eef0 6ae7 	vabs.f32	s13, s15
 8000f96:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 8000f9a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa6:	ee17 3a90 	vmov	r3, s15
 8000faa:	63bb      	str	r3, [r7, #56]	@ 0x38
			dir_l = (volt_l > 0.0f) ? true : false;
 8000fac:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	bfcc      	ite	gt
 8000fba:	2301      	movgt	r3, #1
 8000fbc:	2300      	movle	r3, #0
 8000fbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			dir_r = (volt_r > 0.0f) ? true : false;
 8000fc2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	bfcc      	ite	gt
 8000fd0:	2301      	movgt	r3, #1
 8000fd2:	2300      	movle	r3, #0
 8000fd4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000fd8:	e009      	b.n	8000fee <main+0x3ea>
		}
		else{
			pwm_l = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
			pwm_r = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
			dir_l = false;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			dir_r = false;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_l);
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <main+0x48c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ff4:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_r);
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <main+0x48c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ffc:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, dir_l);
 8000ffe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001002:	461a      	mov	r2, r3
 8001004:	2102      	movs	r1, #2
 8001006:	4823      	ldr	r0, [pc, #140]	@ (8001094 <main+0x490>)
 8001008:	f001 fc60 	bl	80028cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, dir_r);
 800100c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001010:	461a      	mov	r2, r3
 8001012:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101a:	f001 fc57 	bl	80028cc <HAL_GPIO_WritePin>

		//SPI
		g_result.vel_l = vel_l;
 800101e:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <main+0x494>)
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	6013      	str	r3, [r2, #0]
		g_result.vel_r = vel_r;
 8001024:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <main+0x494>)
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	6053      	str	r3, [r2, #4]
		printf("cmd:(%f,%f) volt:(%f,%f) vel:(%f,%f)\r\n",cmd_vel_l,cmd_vel_r,volt_l,volt_r,vel_l,vel_r);
 800102a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800102c:	f7ff fa8c 	bl	8000548 <__aeabi_f2d>
 8001030:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001034:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001036:	f7ff fa87 	bl	8000548 <__aeabi_f2d>
 800103a:	4604      	mov	r4, r0
 800103c:	460d      	mov	r5, r1
 800103e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001040:	f7ff fa82 	bl	8000548 <__aeabi_f2d>
 8001044:	4680      	mov	r8, r0
 8001046:	4689      	mov	r9, r1
 8001048:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800104a:	f7ff fa7d 	bl	8000548 <__aeabi_f2d>
 800104e:	4682      	mov	sl, r0
 8001050:	468b      	mov	fp, r1
 8001052:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001054:	f7ff fa78 	bl	8000548 <__aeabi_f2d>
 8001058:	e9c7 0100 	strd	r0, r1, [r7]
 800105c:	6a38      	ldr	r0, [r7, #32]
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800106a:	ed97 7b00 	vldr	d7, [r7]
 800106e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001072:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001076:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800107a:	e9cd 4500 	strd	r4, r5, [sp]
 800107e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <main+0x498>)
 8001084:	f006 f908 	bl	8007298 <iprintf>
		g_main_loop_flag = false;
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <main+0x49c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
	while (1) {
 800108e:	e603      	b.n	8000c98 <main+0x94>
 8001090:	20000304 	.word	0x20000304
 8001094:	48001400 	.word	0x48001400
 8001098:	200004c4 	.word	0x200004c4
 800109c:	08009498 	.word	0x08009498
 80010a0:	200004cc 	.word	0x200004cc

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b096      	sub	sp, #88	@ 0x58
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010ae:	2228      	movs	r2, #40	@ 0x28
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 faf4 	bl	80076a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fc05 	bl	80028fc <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010f8:	f000 fadc 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fc2e 	bl	8003978 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001122:	f000 fac7 	bl	80016b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fe40 	bl	8003db8 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800113e:	f000 fab9 	bl	80016b4 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3758      	adds	r7, #88	@ 0x58
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_CAN_Init+0x60>)
 8001152:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <MX_CAN_Init+0x64>)
 8001154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_CAN_Init+0x60>)
 8001158:	2210      	movs	r2, #16
 800115a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_CAN_Init+0x60>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_CAN_Init+0x60>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <MX_CAN_Init+0x60>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_CAN_Init+0x60>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <MX_CAN_Init+0x60>)
 8001176:	2200      	movs	r2, #0
 8001178:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_CAN_Init+0x60>)
 800117c:	2200      	movs	r2, #0
 800117e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_CAN_Init+0x60>)
 8001182:	2200      	movs	r2, #0
 8001184:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_CAN_Init+0x60>)
 8001188:	2200      	movs	r2, #0
 800118a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_CAN_Init+0x60>)
 800118e:	2200      	movs	r2, #0
 8001190:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_CAN_Init+0x60>)
 8001194:	2200      	movs	r2, #0
 8001196:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_CAN_Init+0x60>)
 800119a:	f000 fe81 	bl	8001ea0 <HAL_CAN_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80011a4:	f000 fa86 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001f0 	.word	0x200001f0
 80011b0:	40006400 	.word	0x40006400

080011b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_SPI1_Init+0x68>)
 80011ba:	4a19      	ldr	r2, [pc, #100]	@ (8001220 <MX_SPI1_Init+0x6c>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_SPI1_Init+0x68>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_SPI1_Init+0x68>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_SPI1_Init+0x68>)
 80011cc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_SPI1_Init+0x68>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_SPI1_Init+0x68>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_SPI1_Init+0x68>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_SPI1_Init+0x68>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_SPI1_Init+0x68>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_SPI1_Init+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_SPI1_Init+0x68>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_SPI1_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_SPI1_Init+0x68>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_SPI1_Init+0x68>)
 800120a:	f002 fefb 	bl	8004004 <HAL_SPI_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001214:	f000 fa4e 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000218 	.word	0x20000218
 8001220:	40013000 	.word	0x40013000

08001224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b096      	sub	sp, #88	@ 0x58
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001236:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	615a      	str	r2, [r3, #20]
 8001248:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	222c      	movs	r2, #44	@ 0x2c
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f006 fa25 	bl	80076a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001256:	4b3f      	ldr	r3, [pc, #252]	@ (8001354 <MX_TIM1_Init+0x130>)
 8001258:	4a3f      	ldr	r2, [pc, #252]	@ (8001358 <MX_TIM1_Init+0x134>)
 800125a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800125c:	4b3d      	ldr	r3, [pc, #244]	@ (8001354 <MX_TIM1_Init+0x130>)
 800125e:	2200      	movs	r2, #0
 8001260:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b3c      	ldr	r3, [pc, #240]	@ (8001354 <MX_TIM1_Init+0x130>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8001268:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <MX_TIM1_Init+0x130>)
 800126a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800126e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <MX_TIM1_Init+0x130>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001276:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <MX_TIM1_Init+0x130>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <MX_TIM1_Init+0x130>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001282:	4834      	ldr	r0, [pc, #208]	@ (8001354 <MX_TIM1_Init+0x130>)
 8001284:	f003 fdbc 	bl	8004e00 <HAL_TIM_PWM_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 fa11 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012a2:	4619      	mov	r1, r3
 80012a4:	482b      	ldr	r0, [pc, #172]	@ (8001354 <MX_TIM1_Init+0x130>)
 80012a6:	f004 fdb1 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012b0:	f000 fa00 	bl	80016b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	@ 0x60
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d4:	2204      	movs	r2, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	481e      	ldr	r0, [pc, #120]	@ (8001354 <MX_TIM1_Init+0x130>)
 80012da:	f004 f90b 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012e4:	f000 f9e6 	bl	80016b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012ec:	2208      	movs	r2, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	4818      	ldr	r0, [pc, #96]	@ (8001354 <MX_TIM1_Init+0x130>)
 80012f2:	f004 f8ff 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80012fc:	f000 f9da 	bl	80016b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001318:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	@ (8001354 <MX_TIM1_Init+0x130>)
 8001336:	f004 fdd7 	bl	8005ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001340:	f000 f9b8 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001344:	4803      	ldr	r0, [pc, #12]	@ (8001354 <MX_TIM1_Init+0x130>)
 8001346:	f000 fb71 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3758      	adds	r7, #88	@ 0x58
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000304 	.word	0x20000304
 8001358:	40012c00 	.word	0x40012c00

0800135c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	@ 0x30
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2224      	movs	r2, #36	@ 0x24
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f006 f998 	bl	80076a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_TIM2_Init+0xa4>)
 800137c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001380:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_TIM2_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <MX_TIM2_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65525;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_TIM2_Init+0xa4>)
 8001390:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8001394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_TIM2_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <MX_TIM2_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a2:	2303      	movs	r3, #3
 80013a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ba:	2301      	movs	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <MX_TIM2_Init+0xa4>)
 80013ce:	f003 fe5b 	bl	8005088 <HAL_TIM_Encoder_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80013d8:	f000 f96c 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_TIM2_Init+0xa4>)
 80013ea:	f004 fd0f 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80013f4:	f000 f95e 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	@ 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000350 	.word	0x20000350

08001404 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f006 f944 	bl	80076a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 8001424:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <MX_TIM3_Init+0xa8>)
 8001426:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001448:	2301      	movs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 8001474:	f003 fe08 	bl	8005088 <HAL_TIM_Encoder_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800147e:	f000 f919 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 8001490:	f004 fcbc 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800149a:	f000 f90b 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	@ 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000039c 	.word	0x2000039c
 80014ac:	40000400 	.word	0x40000400

080014b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_TIM6_Init+0x64>)
 80014c2:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <MX_TIM6_Init+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <MX_TIM6_Init+0x64>)
 80014c8:	2213      	movs	r2, #19
 80014ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_TIM6_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <MX_TIM6_Init+0x64>)
 80014d4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80014d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <MX_TIM6_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014e0:	480c      	ldr	r0, [pc, #48]	@ (8001514 <MX_TIM6_Init+0x64>)
 80014e2:	f003 fbd9 	bl	8004c98 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014ec:	f000 f8e2 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <MX_TIM6_Init+0x64>)
 80014fe:	f004 fc85 	bl	8005e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001508:	f000 f8d4 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200003e8 	.word	0x200003e8
 8001518:	40001000 	.word	0x40001000

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	@ (8001578 <MX_USART2_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <MX_USART2_UART_Init+0x58>)
 8001560:	f004 fd58 	bl	8006014 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 f8a3 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000434 	.word	0x20000434
 8001578:	40004400 	.word	0x40004400

0800157c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <MX_DMA_Init+0x48>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <MX_DMA_Init+0x48>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <MX_DMA_Init+0x48>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	200c      	movs	r0, #12
 80015a0:	f000 fe55 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015a4:	200c      	movs	r0, #12
 80015a6:	f000 fe6e 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	200d      	movs	r0, #13
 80015b0:	f000 fe4d 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015b4:	200d      	movs	r0, #13
 80015b6:	f000 fe66 	bl	8002286 <HAL_NVIC_EnableIRQ>

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015de:	4b29      	ldr	r3, [pc, #164]	@ (8001684 <MX_GPIO_Init+0xbc>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a28      	ldr	r2, [pc, #160]	@ (8001684 <MX_GPIO_Init+0xbc>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <MX_GPIO_Init+0xbc>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <MX_GPIO_Init+0xbc>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a22      	ldr	r2, [pc, #136]	@ (8001684 <MX_GPIO_Init+0xbc>)
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <MX_GPIO_Init+0xbc>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <MX_GPIO_Init+0xbc>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <MX_GPIO_Init+0xbc>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001618:	6153      	str	r3, [r2, #20]
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_GPIO_Init+0xbc>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_L_GPIO_Port, DIR_L_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2102      	movs	r1, #2
 800162a:	4817      	ldr	r0, [pc, #92]	@ (8001688 <MX_GPIO_Init+0xc0>)
 800162c:	f001 f94e 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_R_GPIO_Port, DIR_R_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163a:	f001 f947 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_L_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin;
 800163e:	2302      	movs	r3, #2
 8001640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_L_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <MX_GPIO_Init+0xc0>)
 8001656:	f000 ffc7 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_R_Pin */
  GPIO_InitStruct.Pin = DIR_R_Pin;
 800165a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800165e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_R_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f000 ffb7 	bl	80025e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	48001400 	.word	0x48001400

0800168c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b29a      	uxth	r2, r3
 800169c:	230a      	movs	r3, #10
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <_write+0x24>)
 80016a2:	f004 fd05 	bl	80060b0 <HAL_UART_Transmit>
  return len;
 80016a6:	687b      	ldr	r3, [r7, #4]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000434 	.word	0x20000434

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <Error_Handler+0x8>

080016c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x44>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_MspInit+0x44>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_MspInit+0x44>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_MspInit+0x44>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x44>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x44>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_CAN_MspInit+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d129      	bne.n	800177e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_CAN_MspInit+0x84>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_CAN_MspInit+0x84>)
 8001730:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_CAN_MspInit+0x84>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_CAN_MspInit+0x84>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_CAN_MspInit+0x84>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	6153      	str	r3, [r2, #20]
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_CAN_MspInit+0x84>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800175a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800176c:	2309      	movs	r3, #9
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177a:	f000 ff35 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40006400 	.word	0x40006400
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3d      	ldr	r2, [pc, #244]	@ (80018a4 <HAL_SPI_MspInit+0x114>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d174      	bne.n	800189c <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b2:	4b3d      	ldr	r3, [pc, #244]	@ (80018a8 <HAL_SPI_MspInit+0x118>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4a3c      	ldr	r2, [pc, #240]	@ (80018a8 <HAL_SPI_MspInit+0x118>)
 80017b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017bc:	6193      	str	r3, [r2, #24]
 80017be:	4b3a      	ldr	r3, [pc, #232]	@ (80018a8 <HAL_SPI_MspInit+0x118>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <HAL_SPI_MspInit+0x118>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a36      	ldr	r2, [pc, #216]	@ (80018a8 <HAL_SPI_MspInit+0x118>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <HAL_SPI_MspInit+0x118>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017e2:	23f0      	movs	r3, #240	@ 0xf0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f2:	2305      	movs	r3, #5
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001800:	f000 fef2 	bl	80025e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001804:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 8001806:	4a2a      	ldr	r2, [pc, #168]	@ (80018b0 <HAL_SPI_MspInit+0x120>)
 8001808:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 8001818:	2280      	movs	r2, #128	@ 0x80
 800181a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181c:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001828:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800182e:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001834:	481d      	ldr	r0, [pc, #116]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 8001836:	f000 fd40 	bl	80022ba <HAL_DMA_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8001840:	f7ff ff38 	bl	80016b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 8001848:	659a      	str	r2, [r3, #88]	@ 0x58
 800184a:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_SPI_MspInit+0x11c>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001852:	4a19      	ldr	r2, [pc, #100]	@ (80018b8 <HAL_SPI_MspInit+0x128>)
 8001854:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001858:	2210      	movs	r2, #16
 800185a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001882:	f000 fd1a 	bl	80022ba <HAL_DMA_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 800188c:	f7ff ff12 	bl	80016b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001894:	655a      	str	r2, [r3, #84]	@ 0x54
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_SPI_MspInit+0x124>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	@ 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013000 	.word	0x40013000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	2000027c 	.word	0x2000027c
 80018b0:	4002001c 	.word	0x4002001c
 80018b4:	200002c0 	.word	0x200002c0
 80018b8:	40020030 	.word	0x40020030

080018bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_TIM_PWM_MspInit+0x38>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10b      	bne.n	80018e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	@ 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191c:	d129      	bne.n	8001972 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4a2c      	ldr	r2, [pc, #176]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	61d3      	str	r3, [r2, #28]
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4a26      	ldr	r2, [pc, #152]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	6153      	str	r3, [r2, #20]
 8001942:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800194e:	2303      	movs	r3, #3
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195e:	2301      	movs	r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196c:	f000 fe3c 	bl	80025e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001970:	e02c      	b.n	80019cc <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM3)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a18      	ldr	r2, [pc, #96]	@ (80019d8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d127      	bne.n	80019cc <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800197c:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	61d3      	str	r3, [r2, #28]
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	4a0e      	ldr	r2, [pc, #56]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800199a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800199e:	6153      	str	r3, [r2, #20]
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0xd8>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019ac:	2330      	movs	r3, #48	@ 0x30
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019bc:	2302      	movs	r3, #2
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	@ (80019dc <HAL_TIM_Encoder_MspInit+0xe0>)
 80019c8:	f000 fe0e 	bl	80025e8 <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3730      	adds	r7, #48	@ 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40000400 	.word	0x40000400
 80019dc:	48000400 	.word	0x48000400

080019e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <HAL_TIM_Base_MspInit+0x44>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d113      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_TIM_Base_MspInit+0x48>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a28 <HAL_TIM_Base_MspInit+0x48>)
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_TIM_Base_MspInit+0x48>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2036      	movs	r0, #54	@ 0x36
 8001a10:	f000 fc1d 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001a14:	2036      	movs	r0, #54	@ 0x36
 8001a16:	f000 fc36 	bl	8002286 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40001000 	.word	0x40001000
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <HAL_TIM_MspPostInit+0x68>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d11d      	bne.n	8001a8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_TIM_MspPostInit+0x6c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a11      	ldr	r2, [pc, #68]	@ (8001a98 <HAL_TIM_MspPostInit+0x6c>)
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <HAL_TIM_MspPostInit+0x6c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a78:	2306      	movs	r3, #6
 8001a7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a86:	f000 fdaf 	bl	80025e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <HAL_UART_MspInit+0x80>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d129      	bne.n	8001b12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_UART_MspInit+0x84>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <HAL_UART_MspInit+0x84>)
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_UART_MspInit+0x84>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_UART_MspInit+0x84>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	4a11      	ldr	r2, [pc, #68]	@ (8001b20 <HAL_UART_MspInit+0x84>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae0:	6153      	str	r3, [r2, #20]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <HAL_UART_MspInit+0x84>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001aee:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b00:	2307      	movs	r3, #7
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0e:	f000 fd6b 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40021000 	.word	0x40021000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <NMI_Handler+0x4>

08001b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 f94d 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA1_Channel2_IRQHandler+0x10>)
 8001b8a:	f000 fc3c 	bl	8002406 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000027c 	.word	0x2000027c

08001b98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <DMA1_Channel3_IRQHandler+0x10>)
 8001b9e:	f000 fc32 	bl	8002406 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002c0 	.word	0x200002c0

08001bac <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <TIM6_DAC1_IRQHandler+0x10>)
 8001bb2:	f003 fb9d 	bl	80052f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003e8 	.word	0x200003e8

08001bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_kill>:

int _kill(int pid, int sig)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bda:	f005 fdb3 	bl	8007744 <__errno>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2216      	movs	r2, #22
 8001be2:	601a      	str	r2, [r3, #0]
  return -1;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_exit>:

void _exit (int status)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffe7 	bl	8001bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <_exit+0x12>

08001c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e00a      	b.n	8001c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c18:	f3af 8000 	nop.w
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	60ba      	str	r2, [r7, #8]
 8001c24:	b2ca      	uxtb	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf0      	blt.n	8001c18 <_read+0x12>
  }

  return len;
 8001c36:	687b      	ldr	r3, [r7, #4]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c68:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_isatty>:

int _isatty(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	@ (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f005 fd34 	bl	8007744 <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20003000 	.word	0x20003000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	200004d0 	.word	0x200004d0
 8001d10:	20000628 	.word	0x20000628

08001d14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d70 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d3c:	f7ff ffea 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	@ (8001d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <LoopForever+0xe>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	@ (8001d84 <LoopForever+0x16>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f005 fcf3 	bl	8007750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6a:	f7fe ff4b 	bl	8000c04 <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d70:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d7c:	08009878 	.word	0x08009878
  ldr r2, =_sbss
 8001d80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d84:	20000624 	.word	0x20000624

08001d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_2_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_Init+0x28>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_Init+0x28>)
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 fa4b 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fc8a 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fa63 	bl	80022a2 <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 fa2b 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000008 	.word	0x20000008
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	200004d4 	.word	0x200004d4

08001e40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200004d4 	.word	0x200004d4

08001e58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0ed      	b.n	800208e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fc22 	bl	8001708 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff ffb4 	bl	8001e40 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eda:	e012      	b.n	8001f02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001edc:	f7ff ffb0 	bl	8001e40 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b0a      	cmp	r3, #10
 8001ee8:	d90b      	bls.n	8001f02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0c5      	b.n	800208e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0e5      	beq.n	8001edc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0202 	bic.w	r2, r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f20:	f7ff ff8e 	bl	8001e40 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f26:	e012      	b.n	8001f4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f28:	f7ff ff8a 	bl	8001e40 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d90b      	bls.n	8001f4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2205      	movs	r2, #5
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e09f      	b.n	800208e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e5      	bne.n	8001f28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7e5b      	ldrb	r3, [r3, #25]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7e9b      	ldrb	r3, [r3, #26]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0220 	bic.w	r2, r2, #32
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7edb      	ldrb	r3, [r3, #27]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0210 	orr.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f1b      	ldrb	r3, [r3, #28]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0208 	orr.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0208 	bic.w	r2, r2, #8
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7f5b      	ldrb	r3, [r3, #29]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0204 	orr.w	r2, r2, #4
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0204 	bic.w	r2, r2, #4
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	ea42 0103 	orr.w	r1, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	@ (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	@ (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e037      	b.n	8002340 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80022ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f940 	bl	80025a8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Start_IT+0x20>
 8002364:	2302      	movs	r3, #2
 8002366:	e04a      	b.n	80023fe <HAL_DMA_Start_IT+0xb6>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002376:	2b01      	cmp	r3, #1
 8002378:	d13a      	bne.n	80023f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f8d4 	bl	800254c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 020e 	orr.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e00f      	b.n	80023de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 020a 	orr.w	r2, r2, #10
 80023cc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0204 	bic.w	r2, r2, #4
 80023dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e005      	b.n	80023fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
 80023fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	2204      	movs	r2, #4
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d024      	beq.n	8002478 <HAL_DMA_IRQHandler+0x72>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01f      	beq.n	8002478 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0204 	bic.w	r2, r2, #4
 8002454:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245e:	2104      	movs	r1, #4
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06a      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002476:	e065      	b.n	8002544 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	2202      	movs	r2, #2
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02c      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xdc>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d027      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 020a 	bic.w	r2, r2, #10
 80024ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c0:	2102      	movs	r1, #2
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d035      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024e0:	e030      	b.n	8002544 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	2208      	movs	r2, #8
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d028      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d023      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 020e 	bic.w	r2, r2, #14
 800250a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
    }
  }
}
 8002542:	e7ff      	b.n	8002544 <HAL_DMA_IRQHandler+0x13e>
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d108      	bne.n	800258c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800258a:	e007      	b.n	800259c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <DMA_CalcBaseAndBitshift+0x34>)
 80025b8:	4413      	add	r3, r2
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <DMA_CalcBaseAndBitshift+0x38>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	009a      	lsls	r2, r3, #2
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a06      	ldr	r2, [pc, #24]	@ (80025e4 <DMA_CalcBaseAndBitshift+0x3c>)
 80025cc:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	bffdfff8 	.word	0xbffdfff8
 80025e0:	cccccccd 	.word	0xcccccccd
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	e14e      	b.n	8002896 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8140 	beq.w	8002890 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d005      	beq.n	8002628 <HAL_GPIO_Init+0x40>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d130      	bne.n	800268a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265e:	2201      	movs	r2, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 0201 	and.w	r2, r3, #1
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b03      	cmp	r3, #3
 8002694:	d017      	beq.n	80026c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d123      	bne.n	800271a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	6939      	ldr	r1, [r7, #16]
 8002716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 809a 	beq.w	8002890 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275c:	4b55      	ldr	r3, [pc, #340]	@ (80028b4 <HAL_GPIO_Init+0x2cc>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a54      	ldr	r2, [pc, #336]	@ (80028b4 <HAL_GPIO_Init+0x2cc>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b52      	ldr	r3, [pc, #328]	@ (80028b4 <HAL_GPIO_Init+0x2cc>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002774:	4a50      	ldr	r2, [pc, #320]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800279e:	d013      	beq.n	80027c8 <HAL_GPIO_Init+0x1e0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a46      	ldr	r2, [pc, #280]	@ (80028bc <HAL_GPIO_Init+0x2d4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00d      	beq.n	80027c4 <HAL_GPIO_Init+0x1dc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a45      	ldr	r2, [pc, #276]	@ (80028c0 <HAL_GPIO_Init+0x2d8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_Init+0x1d8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a44      	ldr	r2, [pc, #272]	@ (80028c4 <HAL_GPIO_Init+0x2dc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_GPIO_Init+0x1d4>
 80027b8:	2303      	movs	r3, #3
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027bc:	2305      	movs	r3, #5
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x1e2>
 80027c8:	2300      	movs	r3, #0
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027da:	4937      	ldr	r1, [pc, #220]	@ (80028b8 <HAL_GPIO_Init+0x2d0>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e8:	4b37      	ldr	r3, [pc, #220]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800280c:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002812:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002836:	4a24      	ldr	r2, [pc, #144]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283c:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002860:	4a19      	ldr	r2, [pc, #100]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800288a:	4a0f      	ldr	r2, [pc, #60]	@ (80028c8 <HAL_GPIO_Init+0x2e0>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f aea9 	bne.w	80025f8 <HAL_GPIO_Init+0x10>
  }
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010000 	.word	0x40010000
 80028bc:	48000400 	.word	0x48000400
 80028c0:	48000800 	.word	0x48000800
 80028c4:	48000c00 	.word	0x48000c00
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002902:	af00      	add	r7, sp, #0
 8002904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002908:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800290c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	f001 b823 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 817d 	beq.w	8002c32 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002938:	4bbc      	ldr	r3, [pc, #752]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b04      	cmp	r3, #4
 8002942:	d00c      	beq.n	800295e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002944:	4bb9      	ldr	r3, [pc, #740]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d15c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x10e>
 8002950:	4bb6      	ldr	r3, [pc, #728]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295c:	d155      	bne.n	8002a0a <HAL_RCC_OscConfig+0x10e>
 800295e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002962:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002972:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_RCC_OscConfig+0x94>
 800298a:	4ba8      	ldr	r3, [pc, #672]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e015      	b.n	80029bc <HAL_RCC_OscConfig+0xc0>
 8002990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002994:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80029a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80029ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80029b8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80029c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80029d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 811f 	beq.w	8002c30 <HAL_RCC_OscConfig+0x334>
 80029f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 8116 	bne.w	8002c30 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f000 bfaf 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x12e>
 8002a1c:	4b83      	ldr	r3, [pc, #524]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a82      	ldr	r2, [pc, #520]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e036      	b.n	8002a98 <HAL_RCC_OscConfig+0x19c>
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x158>
 8002a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b79      	ldr	r3, [pc, #484]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a78      	ldr	r2, [pc, #480]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e021      	b.n	8002a98 <HAL_RCC_OscConfig+0x19c>
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x184>
 8002a66:	4b71      	ldr	r3, [pc, #452]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a70      	ldr	r2, [pc, #448]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b6e      	ldr	r3, [pc, #440]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6d      	ldr	r2, [pc, #436]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0x19c>
 8002a80:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a69      	ldr	r2, [pc, #420]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a66      	ldr	r2, [pc, #408]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a98:	4b64      	ldr	r3, [pc, #400]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f023 020f 	bic.w	r2, r3, #15
 8002aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	495f      	ldr	r1, [pc, #380]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d059      	beq.n	8002b76 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7ff f9bd 	bl	8001e40 <HAL_GetTick>
 8002ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002acc:	f7ff f9b8 	bl	8001e40 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	@ 0x64
 8002ada:	d902      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	f000 bf43 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
 8002ae2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002af6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_RCC_OscConfig+0x218>
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	e015      	b.n	8002b40 <HAL_RCC_OscConfig+0x244>
 8002b14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b18:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b2c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b44:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002b48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b4c:	fa92 f2a2 	rbit	r2, r2
 8002b50:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002b54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b58:	fab2 f282 	clz	r2, r2
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f042 0220 	orr.w	r2, r2, #32
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f002 021f 	and.w	r2, r2, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ab      	beq.n	8002acc <HAL_RCC_OscConfig+0x1d0>
 8002b74:	e05d      	b.n	8002c32 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7ff f963 	bl	8001e40 <HAL_GetTick>
 8002b7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7ff f95e 	bl	8001e40 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	@ 0x64
 8002b8e:	d902      	bls.n	8002b96 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	f000 bee9 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
 8002b96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b9a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002baa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d102      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2cc>
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	e015      	b.n	8002bf4 <HAL_RCC_OscConfig+0x2f8>
 8002bc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bcc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002bdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002be4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c2c <HAL_RCC_OscConfig+0x330>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bf8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002bfc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c00:	fa92 f2a2 	rbit	r2, r2
 8002c04:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002c08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002c0c:	fab2 f282 	clz	r2, r2
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f042 0220 	orr.w	r2, r2, #32
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f002 021f 	and.w	r2, r2, #31
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ab      	bne.n	8002b80 <HAL_RCC_OscConfig+0x284>
 8002c28:	e003      	b.n	8002c32 <HAL_RCC_OscConfig+0x336>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 817d 	beq.w	8002f42 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c48:	4ba6      	ldr	r3, [pc, #664]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c54:	4ba3      	ldr	r3, [pc, #652]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d172      	bne.n	8002d46 <HAL_RCC_OscConfig+0x44a>
 8002c60:	4ba0      	ldr	r3, [pc, #640]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d16c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x44a>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002c7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d102      	bne.n	8002c9c <HAL_RCC_OscConfig+0x3a0>
 8002c96:	4b93      	ldr	r3, [pc, #588]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	e013      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3c8>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cb4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002cc0:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002cca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002cce:	fa92 f2a2 	rbit	r2, r2
 8002cd2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002cd6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f042 0220 	orr.w	r2, r2, #32
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f002 021f 	and.w	r2, r2, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCC_OscConfig+0x410>
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f000 be2e 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0c:	4b75      	ldr	r3, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	21f8      	movs	r1, #248	@ 0xf8
 8002d22:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d2a:	fa91 f1a1 	rbit	r1, r1
 8002d2e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002d32:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002d36:	fab1 f181 	clz	r1, r1
 8002d3a:	b2c9      	uxtb	r1, r1
 8002d3c:	408b      	lsls	r3, r1
 8002d3e:	4969      	ldr	r1, [pc, #420]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d44:	e0fd      	b.n	8002f42 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8088 	beq.w	8002e68 <HAL_RCC_OscConfig+0x56c>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2301      	movs	r3, #1
 8002d82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff f85c 	bl	8001e40 <HAL_GetTick>
 8002d88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7ff f857 	bl	8001e40 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	f000 bde2 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
 8002da4:	2302      	movs	r3, #2
 8002da6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002db6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4d8>
 8002dce:	4b45      	ldr	r3, [pc, #276]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e013      	b.n	8002dfc <HAL_RCC_OscConfig+0x500>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002de6:	2302      	movs	r3, #2
 8002de8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002dec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002df8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002e02:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e06:	fa92 f2a2 	rbit	r2, r2
 8002e0a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002e0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0af      	beq.n	8002d8e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	21f8      	movs	r1, #248	@ 0xf8
 8002e44:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e4c:	fa91 f1a1 	rbit	r1, r1
 8002e50:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002e54:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e58:	fab1 f181 	clz	r1, r1
 8002e5c:	b2c9      	uxtb	r1, r1
 8002e5e:	408b      	lsls	r3, r1
 8002e60:	4920      	ldr	r1, [pc, #128]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
 8002e66:	e06c      	b.n	8002f42 <HAL_RCC_OscConfig+0x646>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe ffd4 	bl	8001e40 <HAL_GetTick>
 8002e98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7fe ffcf 	bl	8001e40 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	f000 bd5a 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d104      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5ec>
 8002ede:	4b01      	ldr	r3, [pc, #4]	@ (8002ee4 <HAL_RCC_OscConfig+0x5e8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e015      	b.n	8002f10 <HAL_RCC_OscConfig+0x614>
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002efa:	2302      	movs	r3, #2
 8002efc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002f0c:	4bc8      	ldr	r3, [pc, #800]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	2202      	movs	r2, #2
 8002f12:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002f16:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f1a:	fa92 f2a2 	rbit	r2, r2
 8002f1e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002f22:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002f26:	fab2 f282 	clz	r2, r2
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	f042 0220 	orr.w	r2, r2, #32
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f002 021f 	and.w	r2, r2, #31
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ad      	bne.n	8002e9e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8110 	beq.w	8003178 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d079      	beq.n	800305c <HAL_RCC_OscConfig+0x760>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	4bab      	ldr	r3, [pc, #684]	@ (8003234 <HAL_RCC_OscConfig+0x938>)
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2301      	movs	r3, #1
 8002f90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe ff55 	bl	8001e40 <HAL_GetTick>
 8002f96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe ff50 	bl	8001e40 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d902      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	f000 bcdb 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fcc:	2202      	movs	r2, #2
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800300a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300c:	4b88      	ldr	r3, [pc, #544]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 800300e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003018:	2102      	movs	r1, #2
 800301a:	6019      	str	r1, [r3, #0]
 800301c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003020:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f1a3 	rbit	r1, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003032:	6019      	str	r1, [r3, #0]
  return result;
 8003034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003038:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0a0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x6a0>
 800305a:	e08d      	b.n	8003178 <HAL_RCC_OscConfig+0x87c>
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800307e:	601a      	str	r2, [r3, #0]
  return result;
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003088:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	4b68      	ldr	r3, [pc, #416]	@ (8003234 <HAL_RCC_OscConfig+0x938>)
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	461a      	mov	r2, r3
 800309a:	2300      	movs	r3, #0
 800309c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7fe fecf 	bl	8001e40 <HAL_GetTick>
 80030a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a6:	e00a      	b.n	80030be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fe feca 	bl	8001e40 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d902      	bls.n	80030be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	f000 bc55 	b.w	8003968 <HAL_RCC_OscConfig+0x106c>
 80030be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030c6:	2202      	movs	r2, #2
 80030c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030ea:	2202      	movs	r2, #2
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800310e:	2202      	movs	r2, #2
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003128:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 800312c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800312e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003132:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003136:	2102      	movs	r1, #2
 8003138:	6019      	str	r1, [r3, #0]
 800313a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f1a3 	rbit	r1, r3
 8003148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003150:	6019      	str	r1, [r3, #0]
  return result;
 8003152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003156:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d197      	bne.n	80030a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 81a1 	beq.w	80034d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003194:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a0:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	4a22      	ldr	r2, [pc, #136]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 80031a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	61d3      	str	r3, [r2, #28]
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003238 <HAL_RCC_OscConfig+0x93c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11a      	bne.n	8003210 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <HAL_RCC_OscConfig+0x93c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <HAL_RCC_OscConfig+0x93c>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fe fe2b 	bl	8001e40 <HAL_GetTick>
 80031ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	e009      	b.n	8003204 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f0:	f7fe fe26 	bl	8001e40 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	@ 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e3b1      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <HAL_RCC_OscConfig+0x93c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10d      	bne.n	800323c <HAL_RCC_OscConfig+0x940>
 8003220:	4b03      	ldr	r3, [pc, #12]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a02      	ldr	r2, [pc, #8]	@ (8003230 <HAL_RCC_OscConfig+0x934>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	e03c      	b.n	80032a8 <HAL_RCC_OscConfig+0x9ac>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	10908120 	.word	0x10908120
 8003238:	40007000 	.word	0x40007000
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x96a>
 800324c:	4bc1      	ldr	r3, [pc, #772]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4ac0      	ldr	r2, [pc, #768]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	4bbe      	ldr	r3, [pc, #760]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4abd      	ldr	r2, [pc, #756]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e020      	b.n	80032a8 <HAL_RCC_OscConfig+0x9ac>
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x994>
 8003276:	4bb7      	ldr	r3, [pc, #732]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4ab6      	ldr	r2, [pc, #728]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	4bb4      	ldr	r3, [pc, #720]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4ab3      	ldr	r2, [pc, #716]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0x9ac>
 8003290:	4bb0      	ldr	r3, [pc, #704]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4aaf      	ldr	r2, [pc, #700]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6213      	str	r3, [r2, #32]
 800329c:	4bad      	ldr	r3, [pc, #692]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	4aac      	ldr	r2, [pc, #688]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 80032a2:	f023 0304 	bic.w	r3, r3, #4
 80032a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8081 	beq.w	80033bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ba:	f7fe fdc1 	bl	8001e40 <HAL_GetTick>
 80032be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe fdbc 	bl	8001e40 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e345      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	fa93 f2a3 	rbit	r2, r3
 80032f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003304:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003310:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003322:	601a      	str	r2, [r3, #0]
  return result;
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800332c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d102      	bne.n	8003348 <HAL_RCC_OscConfig+0xa4c>
 8003342:	4b84      	ldr	r3, [pc, #528]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	e013      	b.n	8003370 <HAL_RCC_OscConfig+0xa74>
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003350:	2202      	movs	r2, #2
 8003352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	fa93 f2a3 	rbit	r2, r3
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	4b79      	ldr	r3, [pc, #484]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003374:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003378:	2102      	movs	r1, #2
 800337a:	6011      	str	r1, [r2, #0]
 800337c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003380:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	fa92 f1a2 	rbit	r1, r2
 800338a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800338e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003392:	6011      	str	r1, [r2, #0]
  return result;
 8003394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003398:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	fab2 f282 	clz	r2, r2
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f002 021f 	and.w	r2, r2, #31
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d084      	beq.n	80032c4 <HAL_RCC_OscConfig+0x9c8>
 80033ba:	e07f      	b.n	80034bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe fd40 	bl	8001e40 <HAL_GetTick>
 80033c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	e00b      	b.n	80033de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe fd3b 	bl	8001e40 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e2c4      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80033e6:	2202      	movs	r2, #2
 80033e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f2a3 	rbit	r2, r3
 80033f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003406:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800340a:	2202      	movs	r2, #2
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f2a3 	rbit	r2, r3
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003424:	601a      	str	r2, [r3, #0]
  return result;
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800342e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f043 0302 	orr.w	r3, r3, #2
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0xb4e>
 8003444:	4b43      	ldr	r3, [pc, #268]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	e013      	b.n	8003472 <HAL_RCC_OscConfig+0xb76>
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003452:	2202      	movs	r2, #2
 8003454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fa93 f2a3 	rbit	r2, r3
 8003464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003468:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	4b39      	ldr	r3, [pc, #228]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003476:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800347a:	2102      	movs	r1, #2
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003482:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	fa92 f1a2 	rbit	r1, r2
 800348c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003490:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003494:	6011      	str	r1, [r2, #0]
  return result;
 8003496:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800349a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	fab2 f282 	clz	r2, r2
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f002 021f 	and.w	r2, r2, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f202 	lsl.w	r2, r1, r2
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d184      	bne.n	80033c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b23      	ldr	r3, [pc, #140]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8242 	beq.w	8003966 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003554 <HAL_RCC_OscConfig+0xc58>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	f000 8213 	beq.w	8003916 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	f040 8162 	bne.w	80037c6 <HAL_RCC_OscConfig+0xeca>
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800350a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003526:	601a      	str	r2, [r3, #0]
  return result;
 8003528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003530:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800353c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	461a      	mov	r2, r3
 8003544:	2300      	movs	r3, #0
 8003546:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fc7a 	bl	8001e40 <HAL_GetTick>
 800354c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003550:	e00c      	b.n	800356c <HAL_RCC_OscConfig+0xc70>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe fc72 	bl	8001e40 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e1fd      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
 800356c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003570:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003574:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	fa93 f2a3 	rbit	r2, r3
 8003588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003590:	601a      	str	r2, [r3, #0]
  return result;
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800359a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_OscConfig+0xcba>
 80035b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003874 <HAL_RCC_OscConfig+0xf78>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	e027      	b.n	8003606 <HAL_RCC_OscConfig+0xd0a>
 80035b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f2a3 	rbit	r2, r3
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4b9c      	ldr	r3, [pc, #624]	@ (8003874 <HAL_RCC_OscConfig+0xf78>)
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800360a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800360e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003612:	6011      	str	r1, [r2, #0]
 8003614:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003618:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	fa92 f1a2 	rbit	r1, r2
 8003622:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003626:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800362a:	6011      	str	r1, [r2, #0]
  return result;
 800362c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003630:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	fab2 f282 	clz	r2, r2
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	f002 021f 	and.w	r2, r2, #31
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d182      	bne.n	8003558 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003652:	4b88      	ldr	r3, [pc, #544]	@ (8003874 <HAL_RCC_OscConfig+0xf78>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800365a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	430b      	orrs	r3, r1
 8003674:	497f      	ldr	r1, [pc, #508]	@ (8003874 <HAL_RCC_OscConfig+0xf78>)
 8003676:	4313      	orrs	r3, r2
 8003678:	604b      	str	r3, [r1, #4]
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003682:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800369e:	601a      	str	r2, [r3, #0]
  return result;
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	461a      	mov	r2, r3
 80036bc:	2301      	movs	r3, #1
 80036be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe fbbe 	bl	8001e40 <HAL_GetTick>
 80036c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c8:	e009      	b.n	80036de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ca:	f7fe fbb9 	bl	8001e40 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e144      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	fa93 f2a3 	rbit	r2, r3
 80036fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003702:	601a      	str	r2, [r3, #0]
  return result;
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800370c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d102      	bne.n	8003728 <HAL_RCC_OscConfig+0xe2c>
 8003722:	4b54      	ldr	r3, [pc, #336]	@ (8003874 <HAL_RCC_OscConfig+0xf78>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	e027      	b.n	8003778 <HAL_RCC_OscConfig+0xe7c>
 8003728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	fa93 f2a3 	rbit	r2, r3
 8003744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003748:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003756:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003760:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	4b3f      	ldr	r3, [pc, #252]	@ (8003874 <HAL_RCC_OscConfig+0xf78>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800377c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003780:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003784:	6011      	str	r1, [r2, #0]
 8003786:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800378a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	fa92 f1a2 	rbit	r1, r2
 8003794:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003798:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800379c:	6011      	str	r1, [r2, #0]
  return result;
 800379e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	fab2 f282 	clz	r2, r2
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	f042 0220 	orr.w	r2, r2, #32
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	f002 021f 	and.w	r2, r2, #31
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d082      	beq.n	80036ca <HAL_RCC_OscConfig+0xdce>
 80037c4:	e0cf      	b.n	8003966 <HAL_RCC_OscConfig+0x106a>
 80037c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f2a3 	rbit	r2, r3
 80037e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037ea:	601a      	str	r2, [r3, #0]
  return result;
 80037ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003800:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe fb18 	bl	8001e40 <HAL_GetTick>
 8003810:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003814:	e009      	b.n	800382a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe fb13 	bl	8001e40 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e09e      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
 800382a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003832:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	fa93 f2a3 	rbit	r2, r3
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800384e:	601a      	str	r2, [r3, #0]
  return result;
 8003850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003854:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003858:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d104      	bne.n	8003878 <HAL_RCC_OscConfig+0xf7c>
 800386e:	4b01      	ldr	r3, [pc, #4]	@ (8003874 <HAL_RCC_OscConfig+0xf78>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	e029      	b.n	80038c8 <HAL_RCC_OscConfig+0xfcc>
 8003874:	40021000 	.word	0x40021000
 8003878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003880:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	fa93 f2a3 	rbit	r2, r3
 8003894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003898:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003974 <HAL_RCC_OscConfig+0x1078>)
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038cc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	fa92 f1a2 	rbit	r1, r2
 80038e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038ec:	6011      	str	r1, [r2, #0]
  return result;
 80038ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	fab2 f282 	clz	r2, r2
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	f002 021f 	and.w	r2, r2, #31
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d180      	bne.n	8003816 <HAL_RCC_OscConfig+0xf1a>
 8003914:	e027      	b.n	8003966 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e01e      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800392a:	4b12      	ldr	r3, [pc, #72]	@ (8003974 <HAL_RCC_OscConfig+0x1078>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003932:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003936:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	429a      	cmp	r2, r3
 8003948:	d10b      	bne.n	8003962 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800394a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800394e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b09e      	sub	sp, #120	@ 0x78
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e162      	b.n	8003c56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b90      	ldr	r3, [pc, #576]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d910      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0207 	bic.w	r2, r3, #7
 80039a6:	498b      	ldr	r1, [pc, #556]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b89      	ldr	r3, [pc, #548]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e14a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039cc:	4b82      	ldr	r3, [pc, #520]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	497f      	ldr	r1, [pc, #508]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80dc 	beq.w	8003ba4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d13c      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xf6>
 80039f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xa6>
 8003a18:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	e00f      	b.n	8003a3e <HAL_RCC_ClockConfig+0xc6>
 8003a1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a3a:	4b67      	ldr	r3, [pc, #412]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a46:	fa92 f2a2 	rbit	r2, r2
 8003a4a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a4e:	fab2 f282 	clz	r2, r2
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	f042 0220 	orr.w	r2, r2, #32
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	f002 021f 	and.w	r2, r2, #31
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f202 	lsl.w	r2, r1, r2
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d17b      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0f3      	b.n	8003c56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d13c      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x178>
 8003a76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a7a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d102      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x128>
 8003a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e00f      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
 8003aa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003abc:	4b46      	ldr	r3, [pc, #280]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ac4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ac8:	fa92 f2a2 	rbit	r2, r2
 8003acc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ad0:	fab2 f282 	clz	r2, r2
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f042 0220 	orr.w	r2, r2, #32
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f002 021f 	and.w	r2, r2, #31
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d13a      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b2      	b.n	8003c56 <HAL_RCC_ClockConfig+0x2de>
 8003af0:	2302      	movs	r3, #2
 8003af2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d102      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x1a0>
 8003b12:	4b31      	ldr	r3, [pc, #196]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	e00d      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1bc>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b24:	2302      	movs	r3, #2
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	2202      	movs	r2, #2
 8003b36:	61ba      	str	r2, [r7, #24]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	fa92 f2a2 	rbit	r2, r2
 8003b3e:	617a      	str	r2, [r7, #20]
  return result;
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	fab2 f282 	clz	r2, r2
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	f042 0220 	orr.w	r2, r2, #32
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	f002 021f 	and.w	r2, r2, #31
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e079      	b.n	8003c56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b62:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f023 0203 	bic.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	491a      	ldr	r1, [pc, #104]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b74:	f7fe f964 	bl	8001e40 <HAL_GetTick>
 8003b78:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	f7fe f960 	bl	8001e40 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e061      	b.n	8003c56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_RCC_ClockConfig+0x260>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 020c 	and.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1eb      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d214      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4906      	ldr	r1, [pc, #24]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <HAL_RCC_ClockConfig+0x25c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e040      	b.n	8003c56 <HAL_RCC_ClockConfig+0x2de>
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c60 <HAL_RCC_ClockConfig+0x2e8>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	491a      	ldr	r1, [pc, #104]	@ (8003c60 <HAL_RCC_ClockConfig+0x2e8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c06:	4b16      	ldr	r3, [pc, #88]	@ (8003c60 <HAL_RCC_ClockConfig+0x2e8>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4912      	ldr	r1, [pc, #72]	@ (8003c60 <HAL_RCC_ClockConfig+0x2e8>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c1a:	f000 f829 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <HAL_RCC_ClockConfig+0x2e8>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c28:	22f0      	movs	r2, #240	@ 0xf0
 8003c2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	fa92 f2a2 	rbit	r2, r2
 8003c32:	60fa      	str	r2, [r7, #12]
  return result;
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	40d3      	lsrs	r3, r2
 8003c3e:	4a09      	ldr	r2, [pc, #36]	@ (8003c64 <HAL_RCC_ClockConfig+0x2ec>)
 8003c40:	5cd3      	ldrb	r3, [r2, r3]
 8003c42:	fa21 f303 	lsr.w	r3, r1, r3
 8003c46:	4a08      	ldr	r2, [pc, #32]	@ (8003c68 <HAL_RCC_ClockConfig+0x2f0>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <HAL_RCC_ClockConfig+0x2f4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe f8b2 	bl	8001db8 <HAL_InitTick>
  
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3778      	adds	r7, #120	@ 0x78
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	080094c0 	.word	0x080094c0
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	20000004 	.word	0x20000004

08003c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d002      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x30>
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d003      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x36>
 8003c9e:	e026      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ca0:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ca2:	613b      	str	r3, [r7, #16]
      break;
 8003ca4:	e026      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	0c9b      	lsrs	r3, r3, #18
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	4a17      	ldr	r2, [pc, #92]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cb0:	5cd3      	ldrb	r3, [r2, r3]
 8003cb2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003cb4:	4b13      	ldr	r3, [pc, #76]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e004      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	613b      	str	r3, [r7, #16]
      break;
 8003cec:	e002      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf0:	613b      	str	r3, [r7, #16]
      break;
 8003cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf4:	693b      	ldr	r3, [r7, #16]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	007a1200 	.word	0x007a1200
 8003d0c:	080094d8 	.word	0x080094d8
 8003d10:	080094e8 	.word	0x080094e8
 8003d14:	003d0900 	.word	0x003d0900

08003d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	@ (8003d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000000 	.word	0x20000000

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d36:	f7ff ffef 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d44:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	fa92 f2a2 	rbit	r2, r2
 8003d50:	603a      	str	r2, [r7, #0]
  return result;
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	fab2 f282 	clz	r2, r2
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	40d3      	lsrs	r3, r2
 8003d5c:	4a04      	ldr	r2, [pc, #16]	@ (8003d70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	080094d0 	.word	0x080094d0

08003d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d7a:	f7ff ffcd 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	@ (8003db0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003d88:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003d8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	fa92 f2a2 	rbit	r2, r2
 8003d94:	603a      	str	r2, [r7, #0]
  return result;
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	fab2 f282 	clz	r2, r2
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	40d3      	lsrs	r3, r2
 8003da0:	4a04      	ldr	r2, [pc, #16]	@ (8003db4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	080094d0 	.word	0x080094d0

08003db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b092      	sub	sp, #72	@ 0x48
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80cd 	beq.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ddc:	4b86      	ldr	r3, [pc, #536]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10e      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de8:	4b83      	ldr	r3, [pc, #524]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4a82      	ldr	r2, [pc, #520]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	61d3      	str	r3, [r2, #28]
 8003df4:	4b80      	ldr	r3, [pc, #512]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	4b7d      	ldr	r3, [pc, #500]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d118      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e12:	4b7a      	ldr	r3, [pc, #488]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a79      	ldr	r2, [pc, #484]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1e:	f7fe f80f 	bl	8001e40 <HAL_GetTick>
 8003e22:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	e008      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fe f80b 	bl	8001e40 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b64      	cmp	r3, #100	@ 0x64
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0db      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	4b70      	ldr	r3, [pc, #448]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e44:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d07d      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d076      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e62:	4b65      	ldr	r3, [pc, #404]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e70:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b5e      	ldr	r3, [pc, #376]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b55      	ldr	r3, [pc, #340]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eb4:	4a50      	ldr	r2, [pc, #320]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d045      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd ffbc 	bl	8001e40 <HAL_GetTick>
 8003ec8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fd ffb8 	bl	8001e40 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e086      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eee:	2302      	movs	r3, #2
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	61fb      	str	r3, [r7, #28]
  return result;
 8003efa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f043 0302 	orr.w	r3, r3, #2
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d102      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f10:	4b39      	ldr	r3, [pc, #228]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	e007      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	4b35      	ldr	r3, [pc, #212]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	2202      	movs	r2, #2
 8003f28:	613a      	str	r2, [r7, #16]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	fa92 f2a2 	rbit	r2, r2
 8003f30:	60fa      	str	r2, [r7, #12]
  return result;
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	fab2 f282 	clz	r2, r2
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	f002 021f 	and.w	r2, r2, #31
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0bd      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f50:	4b29      	ldr	r3, [pc, #164]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4926      	ldr	r1, [pc, #152]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6a:	4b23      	ldr	r3, [pc, #140]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4a22      	ldr	r2, [pc, #136]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	491a      	ldr	r1, [pc, #104]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fa0:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	f023 0210 	bic.w	r2, r3, #16
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4912      	ldr	r1, [pc, #72]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	490b      	ldr	r1, [pc, #44]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	4903      	ldr	r1, [pc, #12]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3748      	adds	r7, #72	@ 0x48
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	10908100 	.word	0x10908100

08004004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e095      	b.n	8004142 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004026:	d009      	beq.n	800403c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
 800402e:	e005      	b.n	800403c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd fb9a 	bl	8001790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800407c:	d902      	bls.n	8004084 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e002      	b.n	800408a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004092:	d007      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e6:	ea42 0103 	orr.w	r1, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	f003 0204 	and.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004120:	ea42 0103 	orr.w	r1, r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_SPI_Transmit_DMA+0x20>
 8004168:	2302      	movs	r3, #2
 800416a:	e0d4      	b.n	8004316 <HAL_SPI_Transmit_DMA+0x1ca>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004184:	e0c2      	b.n	800430c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_SPI_Transmit_DMA+0x46>
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004196:	e0b9      	b.n	800430c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2203      	movs	r2, #3
 800419c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041e2:	d10f      	bne.n	8004204 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004202:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004208:	4a45      	ldr	r2, [pc, #276]	@ (8004320 <HAL_SPI_Transmit_DMA+0x1d4>)
 800420a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	4a44      	ldr	r2, [pc, #272]	@ (8004324 <HAL_SPI_Transmit_DMA+0x1d8>)
 8004212:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004218:	4a43      	ldr	r2, [pc, #268]	@ (8004328 <HAL_SPI_Transmit_DMA+0x1dc>)
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004220:	2200      	movs	r2, #0
 8004222:	635a      	str	r2, [r3, #52]	@ 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004232:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800423c:	d82d      	bhi.n	800429a <HAL_SPI_Transmit_DMA+0x14e>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004248:	d127      	bne.n	800429a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10f      	bne.n	8004278 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004266:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004276:	e010      	b.n	800429a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004286:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	b29b      	uxth	r3, r3
 8004292:	3301      	adds	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a2:	4619      	mov	r1, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042b2:	f7fe f849 	bl	8002348 <HAL_DMA_Start_IT>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c0:	f043 0210 	orr.w	r2, r3, #16
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]

    goto error;
 80042cc:	e01e      	b.n	800430c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d007      	beq.n	80042ec <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ea:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0220 	orr.w	r2, r2, #32
 80042fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0202 	orr.w	r2, r2, #2
 800430a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	0800488b 	.word	0x0800488b
 8004324:	080046ad 	.word	0x080046ad
 8004328:	080048df 	.word	0x080048df

0800432c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_SPI_TransmitReceive_DMA+0x20>
 8004348:	2302      	movs	r3, #2
 800434a:	e164      	b.n	8004616 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800435a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004362:	7dbb      	ldrb	r3, [r7, #22]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d00d      	beq.n	8004384 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436e:	d106      	bne.n	800437e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004378:	7dbb      	ldrb	r3, [r7, #22]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d002      	beq.n	8004384 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800437e:	2302      	movs	r3, #2
 8004380:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004382:	e143      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	75fb      	strb	r3, [r7, #23]
    goto error;
 800439a:	e137      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d003      	beq.n	80043b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2205      	movs	r2, #5
 80043ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	887a      	ldrh	r2, [r7, #2]
 80043c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	887a      	ldrh	r2, [r7, #2]
 80043d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	887a      	ldrh	r2, [r7, #2]
 80043da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	651a      	str	r2, [r3, #80]	@ 0x50
    goto error;
  }
#endif /* STM32F302xC || STM32F303xC || STM32F373xC || STM32F358xx || STM32F378xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80043f8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004402:	d908      	bls.n	8004416 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	e06f      	b.n	80044f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004424:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d126      	bne.n	8004480 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10f      	bne.n	800445e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800444c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004452:	b29b      	uxth	r3, r3
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800445c:	e010      	b.n	8004480 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800446c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004472:	b29b      	uxth	r3, r3
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	3301      	adds	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d134      	bne.n	80044f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800449a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d111      	bne.n	80044d0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80044ce:	e012      	b.n	80044f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3301      	adds	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d108      	bne.n	8004514 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	4a46      	ldr	r2, [pc, #280]	@ (8004620 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	4a45      	ldr	r2, [pc, #276]	@ (8004624 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28
 8004512:	e007      	b.n	8004524 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004518:	4a43      	ldr	r2, [pc, #268]	@ (8004628 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800451a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	4a42      	ldr	r2, [pc, #264]	@ (800462c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8004522:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	4a41      	ldr	r2, [pc, #260]	@ (8004630 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	4619      	mov	r1, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800454c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800454e:	f7fd fefb 	bl	8002348 <HAL_DMA_Start_IT>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	f043 0210 	orr.w	r2, r3, #16
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004568:	e050      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	2200      	movs	r2, #0
 8004580:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	2200      	movs	r2, #0
 8004588:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	2200      	movs	r2, #0
 8004598:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	4619      	mov	r1, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80045b2:	f7fd fec9 	bl	8002348 <HAL_DMA_Start_IT>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c0:	f043 0210 	orr.w	r2, r3, #16
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]

    goto error;
 80045cc:	e01e      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d8:	2b40      	cmp	r3, #64	@ 0x40
 80045da:	d007      	beq.n	80045ec <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045ea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0220 	orr.w	r2, r2, #32
 80045fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0202 	orr.w	r2, r2, #2
 800460a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	080048a7 	.word	0x080048a7
 8004624:	08004753 	.word	0x08004753
 8004628:	080048c3 	.word	0x080048c3
 800462c:	080047fb 	.word	0x080047fb
 8004630:	080048df 	.word	0x080048df

08004634 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ba:	f7fd fbc1 	bl	8001e40 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d03b      	beq.n	8004746 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0220 	bic.w	r2, r2, #32
 80046dc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0202 	bic.w	r2, r2, #2
 80046ec:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	2164      	movs	r1, #100	@ 0x64
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f000 fa8a 	bl	8004c0c <SPI_EndRxTxTransaction>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2200      	movs	r2, #0
 800472c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f7ff ffaa 	bl	8004698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004744:	e002      	b.n	800474c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004746:	6978      	ldr	r0, [r7, #20]
 8004748:	f7ff ff74 	bl	8004634 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004760:	f7fd fb6e 	bl	8001e40 <HAL_GetTick>
 8004764:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b20      	cmp	r3, #32
 8004772:	d03c      	beq.n	80047ee <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0220 	bic.w	r2, r2, #32
 8004782:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <SPI_DMAReceiveCplt+0x56>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004794:	d108      	bne.n	80047a8 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0203 	bic.w	r2, r2, #3
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	e007      	b.n	80047b8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	2164      	movs	r1, #100	@ 0x64
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f9cd 	bl	8004b5c <SPI_EndRxTransaction>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff ff56 	bl	8004698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80047ec:	e002      	b.n	80047f4 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff ff2a 	bl	8004648 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004808:	f7fd fb1a 	bl	8001e40 <HAL_GetTick>
 800480c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b20      	cmp	r3, #32
 800481a:	d030      	beq.n	800487e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0220 	bic.w	r2, r2, #32
 800482a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	2164      	movs	r1, #100	@ 0x64
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f9eb 	bl	8004c0c <SPI_EndRxTxTransaction>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0203 	bic.w	r2, r2, #3
 8004856:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ff0e 	bl	8004698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800487c:	e002      	b.n	8004884 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7fc f9b0 	bl	8000be4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff fedf 	bl	800465c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7ff fedb 	bl	8004670 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fed7 	bl	8004684 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0203 	bic.w	r2, r2, #3
 80048fa:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004900:	f043 0210 	orr.w	r2, r3, #16
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff fec1 	bl	8004698 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004930:	f7fd fa86 	bl	8001e40 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	4413      	add	r3, r2
 800493e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004940:	f7fd fa7e 	bl	8001e40 <HAL_GetTick>
 8004944:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004946:	4b39      	ldr	r3, [pc, #228]	@ (8004a2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	015b      	lsls	r3, r3, #5
 800494c:	0d1b      	lsrs	r3, r3, #20
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004956:	e054      	b.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d050      	beq.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004960:	f7fd fa6e 	bl	8001e40 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	429a      	cmp	r2, r3
 800496e:	d902      	bls.n	8004976 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d13d      	bne.n	80049f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498e:	d111      	bne.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004998:	d004      	beq.n	80049a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a2:	d107      	bne.n	80049b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049bc:	d10f      	bne.n	80049de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e017      	b.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d19b      	bne.n	8004958 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000000 	.word	0x20000000

08004a30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	@ 0x28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a42:	f7fd f9fd 	bl	8001e40 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	4413      	add	r3, r2
 8004a50:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004a52:	f7fd f9f5 	bl	8001e40 <HAL_GetTick>
 8004a56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a60:	4b3d      	ldr	r3, [pc, #244]	@ (8004b58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	00da      	lsls	r2, r3, #3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	0d1b      	lsrs	r3, r3, #20
 8004a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a78:	e060      	b.n	8004b3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a80:	d107      	bne.n	8004a92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d050      	beq.n	8004b3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a9a:	f7fd f9d1 	bl	8001e40 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d902      	bls.n	8004ab0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d13d      	bne.n	8004b2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004abe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ac8:	d111      	bne.n	8004aee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad2:	d004      	beq.n	8004ade <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004adc:	d107      	bne.n	8004aee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004af6:	d10f      	bne.n	8004b18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e010      	b.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d196      	bne.n	8004a7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3728      	adds	r7, #40	@ 0x28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000000 	.word	0x20000000

08004b5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b70:	d111      	bne.n	8004b96 <SPI_EndRxTransaction+0x3a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b7a:	d004      	beq.n	8004b86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b84:	d107      	bne.n	8004b96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2180      	movs	r1, #128	@ 0x80
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff febd 	bl	8004920 <SPI_WaitFlagStateUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb0:	f043 0220 	orr.w	r2, r3, #32
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e023      	b.n	8004c04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc4:	d11d      	bne.n	8004c02 <SPI_EndRxTransaction+0xa6>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bce:	d004      	beq.n	8004bda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd8:	d113      	bne.n	8004c02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff ff22 	bl	8004a30 <SPI_WaitFifoStateUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e000      	b.n	8004c04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff ff03 	bl	8004a30 <SPI_WaitFifoStateUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d007      	beq.n	8004c40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e027      	b.n	8004c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	2180      	movs	r1, #128	@ 0x80
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fe68 	bl	8004920 <SPI_WaitFlagStateUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e014      	b.n	8004c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fedc 	bl	8004a30 <SPI_WaitFifoStateUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e000      	b.n	8004c90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e049      	b.n	8004d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fc fe8e 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f000 fd48 	bl	800576c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d001      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e040      	b.n	8004de2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004df0 <HAL_TIM_Base_Start_IT+0xa8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x58>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8a:	d009      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x58>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a18      	ldr	r2, [pc, #96]	@ (8004df4 <HAL_TIM_Base_Start_IT+0xac>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x58>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	@ (8004df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d115      	bne.n	8004dcc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d015      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x96>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db8:	d011      	beq.n	8004dde <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	e008      	b.n	8004dde <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e000      	b.n	8004de0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	00010007 	.word	0x00010007

08004e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e049      	b.n	8004ea6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc fd48 	bl	80018bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f000 fc94 	bl	800576c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <HAL_TIM_PWM_Start+0x24>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	e03c      	b.n	8004f4e <HAL_TIM_PWM_Start+0x9e>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d109      	bne.n	8004eee <HAL_TIM_PWM_Start+0x3e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	bf14      	ite	ne
 8004ee6:	2301      	movne	r3, #1
 8004ee8:	2300      	moveq	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	e02f      	b.n	8004f4e <HAL_TIM_PWM_Start+0x9e>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d109      	bne.n	8004f08 <HAL_TIM_PWM_Start+0x58>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e022      	b.n	8004f4e <HAL_TIM_PWM_Start+0x9e>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b0c      	cmp	r3, #12
 8004f0c:	d109      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x72>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e015      	b.n	8004f4e <HAL_TIM_PWM_Start+0x9e>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d109      	bne.n	8004f3c <HAL_TIM_PWM_Start+0x8c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e008      	b.n	8004f4e <HAL_TIM_PWM_Start+0x9e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e088      	b.n	8005068 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIM_PWM_Start+0xb6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f64:	e023      	b.n	8004fae <HAL_TIM_PWM_Start+0xfe>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_PWM_Start+0xc6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f74:	e01b      	b.n	8004fae <HAL_TIM_PWM_Start+0xfe>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Start+0xd6>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f84:	e013      	b.n	8004fae <HAL_TIM_PWM_Start+0xfe>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Start+0xe6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f94:	e00b      	b.n	8004fae <HAL_TIM_PWM_Start+0xfe>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0xf6>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fa4:	e003      	b.n	8004fae <HAL_TIM_PWM_Start+0xfe>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 ff02 	bl	8005dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <HAL_TIM_PWM_Start+0x1c0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_TIM_PWM_Start+0x134>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2a      	ldr	r2, [pc, #168]	@ (8005074 <HAL_TIM_PWM_Start+0x1c4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_TIM_PWM_Start+0x134>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a28      	ldr	r2, [pc, #160]	@ (8005078 <HAL_TIM_PWM_Start+0x1c8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_TIM_PWM_Start+0x134>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a27      	ldr	r2, [pc, #156]	@ (800507c <HAL_TIM_PWM_Start+0x1cc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIM_PWM_Start+0x138>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_TIM_PWM_Start+0x13a>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1b      	ldr	r2, [pc, #108]	@ (8005070 <HAL_TIM_PWM_Start+0x1c0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <HAL_TIM_PWM_Start+0x176>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005010:	d009      	beq.n	8005026 <HAL_TIM_PWM_Start+0x176>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <HAL_TIM_PWM_Start+0x1d0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_TIM_PWM_Start+0x176>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a14      	ldr	r2, [pc, #80]	@ (8005074 <HAL_TIM_PWM_Start+0x1c4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d115      	bne.n	8005052 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <HAL_TIM_PWM_Start+0x1d4>)
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b06      	cmp	r3, #6
 8005036:	d015      	beq.n	8005064 <HAL_TIM_PWM_Start+0x1b4>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503e:	d011      	beq.n	8005064 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005050:	e008      	b.n	8005064 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e000      	b.n	8005066 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800
 8005080:	40000400 	.word	0x40000400
 8005084:	00010007 	.word	0x00010007

08005088 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e097      	b.n	80051cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fc fc23 	bl	80018fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80050cc:	f023 0307 	bic.w	r3, r3, #7
 80050d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 fb45 	bl	800576c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	4313      	orrs	r3, r2
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005128:	f023 030c 	bic.w	r3, r3, #12
 800512c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005134:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	4313      	orrs	r3, r2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	011a      	lsls	r2, r3, #4
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	031b      	lsls	r3, r3, #12
 8005158:	4313      	orrs	r3, r2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	4313      	orrs	r3, r2
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d110      	bne.n	8005226 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d102      	bne.n	8005210 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800520a:	7b7b      	ldrb	r3, [r7, #13]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e069      	b.n	80052e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005224:	e031      	b.n	800528a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d110      	bne.n	800524e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d102      	bne.n	8005238 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005232:	7b3b      	ldrb	r3, [r7, #12]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e055      	b.n	80052e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800524c:	e01d      	b.n	800528a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d108      	bne.n	8005266 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005254:	7bbb      	ldrb	r3, [r7, #14]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800525a:	7b7b      	ldrb	r3, [r7, #13]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d102      	bne.n	8005266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005260:	7b3b      	ldrb	r3, [r7, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d001      	beq.n	800526a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e03e      	b.n	80052e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_TIM_Encoder_Start+0xc4>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b04      	cmp	r3, #4
 8005294:	d008      	beq.n	80052a8 <HAL_TIM_Encoder_Start+0xd4>
 8005296:	e00f      	b.n	80052b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fd8d 	bl	8005dc0 <TIM_CCxChannelCmd>
      break;
 80052a6:	e016      	b.n	80052d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2201      	movs	r2, #1
 80052ae:	2104      	movs	r1, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fd85 	bl	8005dc0 <TIM_CCxChannelCmd>
      break;
 80052b6:	e00e      	b.n	80052d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2201      	movs	r2, #1
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fd7d 	bl	8005dc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	2104      	movs	r1, #4
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fd76 	bl	8005dc0 <TIM_CCxChannelCmd>
      break;
 80052d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d020      	beq.n	8005354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01b      	beq.n	8005354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0202 	mvn.w	r2, #2
 8005324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9f8 	bl	8005730 <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f9ea 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f9fb 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d020      	beq.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0204 	mvn.w	r2, #4
 8005370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f9d2 	bl	8005730 <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f9c4 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f9d5 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d020      	beq.n	80053ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01b      	beq.n	80053ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9ac 	bl	8005730 <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f99e 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9af 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d020      	beq.n	8005438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0210 	mvn.w	r2, #16
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2208      	movs	r2, #8
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f986 	bl	8005730 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f978 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f989 	bl	8005744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00c      	beq.n	800545c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0201 	mvn.w	r2, #1
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fb fba6 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fdb6 	bl	8005fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00c      	beq.n	80054a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fdae 	bl	8006000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f948 	bl	8005758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00c      	beq.n	80054ec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0220 	mvn.w	r2, #32
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fd76 	bl	8005fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ec:	bf00      	nop
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550e:	2302      	movs	r3, #2
 8005510:	e0ff      	b.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b14      	cmp	r3, #20
 800551e:	f200 80f0 	bhi.w	8005702 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005522:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800557d 	.word	0x0800557d
 800552c:	08005703 	.word	0x08005703
 8005530:	08005703 	.word	0x08005703
 8005534:	08005703 	.word	0x08005703
 8005538:	080055bd 	.word	0x080055bd
 800553c:	08005703 	.word	0x08005703
 8005540:	08005703 	.word	0x08005703
 8005544:	08005703 	.word	0x08005703
 8005548:	080055ff 	.word	0x080055ff
 800554c:	08005703 	.word	0x08005703
 8005550:	08005703 	.word	0x08005703
 8005554:	08005703 	.word	0x08005703
 8005558:	0800563f 	.word	0x0800563f
 800555c:	08005703 	.word	0x08005703
 8005560:	08005703 	.word	0x08005703
 8005564:	08005703 	.word	0x08005703
 8005568:	08005681 	.word	0x08005681
 800556c:	08005703 	.word	0x08005703
 8005570:	08005703 	.word	0x08005703
 8005574:	08005703 	.word	0x08005703
 8005578:	080056c1 	.word	0x080056c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f976 	bl	8005874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0208 	orr.w	r2, r2, #8
 8005596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0204 	bic.w	r2, r2, #4
 80055a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6999      	ldr	r1, [r3, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	619a      	str	r2, [r3, #24]
      break;
 80055ba:	e0a5      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f9dc 	bl	8005980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	619a      	str	r2, [r3, #24]
      break;
 80055fc:	e084      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fa3b 	bl	8005a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0208 	orr.w	r2, r2, #8
 8005618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0204 	bic.w	r2, r2, #4
 8005628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	61da      	str	r2, [r3, #28]
      break;
 800563c:	e064      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fa99 	bl	8005b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	021a      	lsls	r2, r3, #8
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	61da      	str	r2, [r3, #28]
      break;
 800567e:	e043      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fadc 	bl	8005c44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0204 	bic.w	r2, r2, #4
 80056aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056be:	e023      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fb1a 	bl	8005d00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005700:	e002      	b.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
      break;
 8005706:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop

0800571c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a38      	ldr	r2, [pc, #224]	@ (8005860 <TIM_Base_SetConfig+0xf4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <TIM_Base_SetConfig+0x28>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578a:	d003      	beq.n	8005794 <TIM_Base_SetConfig+0x28>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <TIM_Base_SetConfig+0xf8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005860 <TIM_Base_SetConfig+0xf4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <TIM_Base_SetConfig+0x6a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b4:	d00f      	beq.n	80057d6 <TIM_Base_SetConfig+0x6a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005864 <TIM_Base_SetConfig+0xf8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <TIM_Base_SetConfig+0x6a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a29      	ldr	r2, [pc, #164]	@ (8005868 <TIM_Base_SetConfig+0xfc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <TIM_Base_SetConfig+0x6a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a28      	ldr	r2, [pc, #160]	@ (800586c <TIM_Base_SetConfig+0x100>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_Base_SetConfig+0x6a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a27      	ldr	r2, [pc, #156]	@ (8005870 <TIM_Base_SetConfig+0x104>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d108      	bne.n	80057e8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a14      	ldr	r2, [pc, #80]	@ (8005860 <TIM_Base_SetConfig+0xf4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00b      	beq.n	800582c <TIM_Base_SetConfig+0xc0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <TIM_Base_SetConfig+0xfc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_Base_SetConfig+0xc0>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a13      	ldr	r2, [pc, #76]	@ (800586c <TIM_Base_SetConfig+0x100>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0xc0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a12      	ldr	r2, [pc, #72]	@ (8005870 <TIM_Base_SetConfig+0x104>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d105      	bne.n	8005852 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f023 0201 	bic.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]
  }
}
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40000400 	.word	0x40000400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800

08005874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 0201 	bic.w	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0303 	bic.w	r3, r3, #3
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 0302 	bic.w	r3, r3, #2
 80058c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a28      	ldr	r2, [pc, #160]	@ (8005970 <TIM_OC1_SetConfig+0xfc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_OC1_SetConfig+0x78>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a27      	ldr	r2, [pc, #156]	@ (8005974 <TIM_OC1_SetConfig+0x100>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_OC1_SetConfig+0x78>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a26      	ldr	r2, [pc, #152]	@ (8005978 <TIM_OC1_SetConfig+0x104>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC1_SetConfig+0x78>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a25      	ldr	r2, [pc, #148]	@ (800597c <TIM_OC1_SetConfig+0x108>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d10c      	bne.n	8005906 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0308 	bic.w	r3, r3, #8
 80058f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a19      	ldr	r2, [pc, #100]	@ (8005970 <TIM_OC1_SetConfig+0xfc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_OC1_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a18      	ldr	r2, [pc, #96]	@ (8005974 <TIM_OC1_SetConfig+0x100>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_OC1_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a17      	ldr	r2, [pc, #92]	@ (8005978 <TIM_OC1_SetConfig+0x104>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC1_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a16      	ldr	r2, [pc, #88]	@ (800597c <TIM_OC1_SetConfig+0x108>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d111      	bne.n	800594a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800592c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	621a      	str	r2, [r3, #32]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800

08005980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0210 	bic.w	r2, r3, #16
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a24      	ldr	r2, [pc, #144]	@ (8005a70 <TIM_OC2_SetConfig+0xf0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10d      	bne.n	8005a00 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <TIM_OC2_SetConfig+0xf0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00b      	beq.n	8005a20 <TIM_OC2_SetConfig+0xa0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <TIM_OC2_SetConfig+0xf4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <TIM_OC2_SetConfig+0xa0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <TIM_OC2_SetConfig+0xf8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_OC2_SetConfig+0xa0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <TIM_OC2_SetConfig+0xfc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d113      	bne.n	8005a48 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a26:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a2e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	621a      	str	r2, [r3, #32]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40012c00 	.word	0x40012c00
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40014400 	.word	0x40014400
 8005a7c:	40014800 	.word	0x40014800

08005a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a23      	ldr	r2, [pc, #140]	@ (8005b6c <TIM_OC3_SetConfig+0xec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d10d      	bne.n	8005afe <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005afc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <TIM_OC3_SetConfig+0xec>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <TIM_OC3_SetConfig+0x9e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a19      	ldr	r2, [pc, #100]	@ (8005b70 <TIM_OC3_SetConfig+0xf0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d007      	beq.n	8005b1e <TIM_OC3_SetConfig+0x9e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <TIM_OC3_SetConfig+0xf4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_OC3_SetConfig+0x9e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a17      	ldr	r2, [pc, #92]	@ (8005b78 <TIM_OC3_SetConfig+0xf8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d113      	bne.n	8005b46 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	@ (8005c34 <TIM_OC4_SetConfig+0xb8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <TIM_OC4_SetConfig+0x7c>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <TIM_OC4_SetConfig+0xbc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <TIM_OC4_SetConfig+0x7c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a14      	ldr	r2, [pc, #80]	@ (8005c3c <TIM_OC4_SetConfig+0xc0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC4_SetConfig+0x7c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	@ (8005c40 <TIM_OC4_SetConfig+0xc4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d109      	bne.n	8005c0c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	019b      	lsls	r3, r3, #6
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800

08005c44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a15      	ldr	r2, [pc, #84]	@ (8005cf0 <TIM_OC5_SetConfig+0xac>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x72>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a14      	ldr	r2, [pc, #80]	@ (8005cf4 <TIM_OC5_SetConfig+0xb0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x72>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a13      	ldr	r2, [pc, #76]	@ (8005cf8 <TIM_OC5_SetConfig+0xb4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x72>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a12      	ldr	r2, [pc, #72]	@ (8005cfc <TIM_OC5_SetConfig+0xb8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d109      	bne.n	8005cca <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	621a      	str	r2, [r3, #32]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40014400 	.word	0x40014400
 8005cfc:	40014800 	.word	0x40014800

08005d00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	051b      	lsls	r3, r3, #20
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a16      	ldr	r2, [pc, #88]	@ (8005db0 <TIM_OC6_SetConfig+0xb0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_OC6_SetConfig+0x74>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a15      	ldr	r2, [pc, #84]	@ (8005db4 <TIM_OC6_SetConfig+0xb4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_OC6_SetConfig+0x74>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a14      	ldr	r2, [pc, #80]	@ (8005db8 <TIM_OC6_SetConfig+0xb8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC6_SetConfig+0x74>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	@ (8005dbc <TIM_OC6_SetConfig+0xbc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d109      	bne.n	8005d88 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800

08005dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1a      	ldr	r2, [r3, #32]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	401a      	ands	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e054      	b.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a24      	ldr	r2, [pc, #144]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d108      	bne.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a17      	ldr	r2, [pc, #92]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a13      	ldr	r2, [pc, #76]	@ (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10c      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40014000 	.word	0x40014000

08005ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e060      	b.n	8005fc6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a14      	ldr	r2, [pc, #80]	@ (8005fd4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d115      	bne.n	8005fb4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	051b      	lsls	r3, r3, #20
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40012c00 	.word	0x40012c00

08005fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e040      	b.n	80060a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fb fd30 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2224      	movs	r2, #36	@ 0x24
 8006040:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f9e8 	bl	8006430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f8af 	bl	80061c4 <UART_SetConfig>
 8006066:	4603      	mov	r3, r0
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e01b      	b.n	80060a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800607e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800608e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fa67 	bl	8006574 <UART_CheckIdleState>
 80060a6:	4603      	mov	r3, r0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	@ 0x28
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d177      	bne.n	80061b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_UART_Transmit+0x24>
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e070      	b.n	80061ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2221      	movs	r2, #33	@ 0x21
 80060e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060e6:	f7fb feab 	bl	8001e40 <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006104:	d108      	bne.n	8006118 <HAL_UART_Transmit+0x68>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	e003      	b.n	8006120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006120:	e02f      	b.n	8006182 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	2180      	movs	r1, #128	@ 0x80
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fac9 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e03b      	b.n	80061ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	881a      	ldrh	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006154:	b292      	uxth	r2, r2
 8006156:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	3302      	adds	r3, #2
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e007      	b.n	8006170 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	781a      	ldrb	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1c9      	bne.n	8006122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	2140      	movs	r1, #64	@ 0x40
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 fa93 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e005      	b.n	80061ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e000      	b.n	80061ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
  }
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b8a      	ldr	r3, [pc, #552]	@ (8006418 <UART_SetConfig+0x254>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	430b      	orrs	r3, r1
 80061fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	430a      	orrs	r2, r1
 8006234:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a78      	ldr	r2, [pc, #480]	@ (800641c <UART_SetConfig+0x258>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d120      	bne.n	8006282 <UART_SetConfig+0xbe>
 8006240:	4b77      	ldr	r3, [pc, #476]	@ (8006420 <UART_SetConfig+0x25c>)
 8006242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	2b03      	cmp	r3, #3
 800624a:	d817      	bhi.n	800627c <UART_SetConfig+0xb8>
 800624c:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <UART_SetConfig+0x90>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006265 	.word	0x08006265
 8006258:	08006271 	.word	0x08006271
 800625c:	08006277 	.word	0x08006277
 8006260:	0800626b 	.word	0x0800626b
 8006264:	2300      	movs	r3, #0
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e01d      	b.n	80062a6 <UART_SetConfig+0xe2>
 800626a:	2302      	movs	r3, #2
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e01a      	b.n	80062a6 <UART_SetConfig+0xe2>
 8006270:	2304      	movs	r3, #4
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e017      	b.n	80062a6 <UART_SetConfig+0xe2>
 8006276:	2308      	movs	r3, #8
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e014      	b.n	80062a6 <UART_SetConfig+0xe2>
 800627c:	2310      	movs	r3, #16
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e011      	b.n	80062a6 <UART_SetConfig+0xe2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a67      	ldr	r2, [pc, #412]	@ (8006424 <UART_SetConfig+0x260>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d102      	bne.n	8006292 <UART_SetConfig+0xce>
 800628c:	2300      	movs	r3, #0
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e009      	b.n	80062a6 <UART_SetConfig+0xe2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a64      	ldr	r2, [pc, #400]	@ (8006428 <UART_SetConfig+0x264>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d102      	bne.n	80062a2 <UART_SetConfig+0xde>
 800629c:	2300      	movs	r3, #0
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e001      	b.n	80062a6 <UART_SetConfig+0xe2>
 80062a2:	2310      	movs	r3, #16
 80062a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ae:	d15a      	bne.n	8006366 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80062b0:	7ffb      	ldrb	r3, [r7, #31]
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d827      	bhi.n	8006306 <UART_SetConfig+0x142>
 80062b6:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <UART_SetConfig+0xf8>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	08006307 	.word	0x08006307
 80062cc:	080062f7 	.word	0x080062f7
 80062d0:	08006307 	.word	0x08006307
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006307 	.word	0x08006307
 80062dc:	080062ff 	.word	0x080062ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062e0:	f7fd fd26 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 80062e4:	61b8      	str	r0, [r7, #24]
        break;
 80062e6:	e013      	b.n	8006310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062e8:	f7fd fd44 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 80062ec:	61b8      	str	r0, [r7, #24]
        break;
 80062ee:	e00f      	b.n	8006310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062f0:	4b4e      	ldr	r3, [pc, #312]	@ (800642c <UART_SetConfig+0x268>)
 80062f2:	61bb      	str	r3, [r7, #24]
        break;
 80062f4:	e00c      	b.n	8006310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f6:	f7fd fcbb 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 80062fa:	61b8      	str	r0, [r7, #24]
        break;
 80062fc:	e008      	b.n	8006310 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006302:	61bb      	str	r3, [r7, #24]
        break;
 8006304:	e004      	b.n	8006310 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	77bb      	strb	r3, [r7, #30]
        break;
 800630e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d074      	beq.n	8006400 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	005a      	lsls	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	441a      	add	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d916      	bls.n	8006360 <UART_SetConfig+0x19c>
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006338:	d212      	bcs.n	8006360 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f023 030f 	bic.w	r3, r3, #15
 8006342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	b29a      	uxth	r2, r3
 8006350:	89fb      	ldrh	r3, [r7, #14]
 8006352:	4313      	orrs	r3, r2
 8006354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	89fa      	ldrh	r2, [r7, #14]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	e04f      	b.n	8006400 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	77bb      	strb	r3, [r7, #30]
 8006364:	e04c      	b.n	8006400 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006366:	7ffb      	ldrb	r3, [r7, #31]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d828      	bhi.n	80063be <UART_SetConfig+0x1fa>
 800636c:	a201      	add	r2, pc, #4	@ (adr r2, 8006374 <UART_SetConfig+0x1b0>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006399 	.word	0x08006399
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a9 	.word	0x080063a9
 8006380:	080063bf 	.word	0x080063bf
 8006384:	080063af 	.word	0x080063af
 8006388:	080063bf 	.word	0x080063bf
 800638c:	080063bf 	.word	0x080063bf
 8006390:	080063bf 	.word	0x080063bf
 8006394:	080063b7 	.word	0x080063b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006398:	f7fd fcca 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 800639c:	61b8      	str	r0, [r7, #24]
        break;
 800639e:	e013      	b.n	80063c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a0:	f7fd fce8 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 80063a4:	61b8      	str	r0, [r7, #24]
        break;
 80063a6:	e00f      	b.n	80063c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a8:	4b20      	ldr	r3, [pc, #128]	@ (800642c <UART_SetConfig+0x268>)
 80063aa:	61bb      	str	r3, [r7, #24]
        break;
 80063ac:	e00c      	b.n	80063c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ae:	f7fd fc5f 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 80063b2:	61b8      	str	r0, [r7, #24]
        break;
 80063b4:	e008      	b.n	80063c8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ba:	61bb      	str	r3, [r7, #24]
        break;
 80063bc:	e004      	b.n	80063c8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	77bb      	strb	r3, [r7, #30]
        break;
 80063c6:	bf00      	nop
    }

    if (pclk != 0U)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d018      	beq.n	8006400 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	085a      	lsrs	r2, r3, #1
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b0f      	cmp	r3, #15
 80063e6:	d909      	bls.n	80063fc <UART_SetConfig+0x238>
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ee:	d205      	bcs.n	80063fc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e001      	b.n	8006400 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800640c:	7fbb      	ldrb	r3, [r7, #30]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	efff69f3 	.word	0xefff69f3
 800641c:	40013800 	.word	0x40013800
 8006420:	40021000 	.word	0x40021000
 8006424:	40004400 	.word	0x40004400
 8006428:	40004800 	.word	0x40004800
 800642c:	007a1200 	.word	0x007a1200

08006430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01a      	beq.n	8006546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800652e:	d10a      	bne.n	8006546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b098      	sub	sp, #96	@ 0x60
 8006578:	af02      	add	r7, sp, #8
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006584:	f7fb fc5c 	bl	8001e40 <HAL_GetTick>
 8006588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d12e      	bne.n	80065f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f88c 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d021      	beq.n	80065f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e062      	b.n	80066bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b04      	cmp	r3, #4
 8006602:	d149      	bne.n	8006698 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660c:	2200      	movs	r2, #0
 800660e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f856 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d03c      	beq.n	8006698 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	623b      	str	r3, [r7, #32]
   return(result);
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663c:	633b      	str	r3, [r7, #48]	@ 0x30
 800663e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006670:	61fa      	str	r2, [r7, #28]
 8006672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	69b9      	ldr	r1, [r7, #24]
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	617b      	str	r3, [r7, #20]
   return(result);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e5      	bne.n	8006650 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e011      	b.n	80066bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3758      	adds	r7, #88	@ 0x58
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	e04f      	b.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d04b      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fb fbaf 	bl	8001e40 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e04e      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d037      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b80      	cmp	r3, #128	@ 0x80
 800670a:	d034      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b40      	cmp	r3, #64	@ 0x40
 8006710:	d031      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b08      	cmp	r3, #8
 800671e:	d110      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2208      	movs	r2, #8
 8006726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f838 	bl	800679e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2208      	movs	r2, #8
 8006732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e029      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800674c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006750:	d111      	bne.n	8006776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800675a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f81e 	bl	800679e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e00f      	b.n	8006796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	bf0c      	ite	eq
 8006786:	2301      	moveq	r3, #1
 8006788:	2300      	movne	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	429a      	cmp	r2, r3
 8006792:	d0a0      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800679e:	b480      	push	{r7}
 80067a0:	b095      	sub	sp, #84	@ 0x54
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80067c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e6      	bne.n	80067a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006810:	2b01      	cmp	r3, #1
 8006812:	d118      	bne.n	8006846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	60bb      	str	r3, [r7, #8]
   return(result);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f023 0310 	bic.w	r3, r3, #16
 8006828:	647b      	str	r3, [r7, #68]	@ 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6979      	ldr	r1, [r7, #20]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	613b      	str	r3, [r7, #16]
   return(result);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e6      	bne.n	8006814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800685a:	bf00      	nop
 800685c:	3754      	adds	r7, #84	@ 0x54
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <__cvt>:
 8006866:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800686a:	ec57 6b10 	vmov	r6, r7, d0
 800686e:	2f00      	cmp	r7, #0
 8006870:	460c      	mov	r4, r1
 8006872:	4619      	mov	r1, r3
 8006874:	463b      	mov	r3, r7
 8006876:	bfbb      	ittet	lt
 8006878:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800687c:	461f      	movlt	r7, r3
 800687e:	2300      	movge	r3, #0
 8006880:	232d      	movlt	r3, #45	@ 0x2d
 8006882:	700b      	strb	r3, [r1, #0]
 8006884:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006886:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800688a:	4691      	mov	r9, r2
 800688c:	f023 0820 	bic.w	r8, r3, #32
 8006890:	bfbc      	itt	lt
 8006892:	4632      	movlt	r2, r6
 8006894:	4616      	movlt	r6, r2
 8006896:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800689a:	d005      	beq.n	80068a8 <__cvt+0x42>
 800689c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068a0:	d100      	bne.n	80068a4 <__cvt+0x3e>
 80068a2:	3401      	adds	r4, #1
 80068a4:	2102      	movs	r1, #2
 80068a6:	e000      	b.n	80068aa <__cvt+0x44>
 80068a8:	2103      	movs	r1, #3
 80068aa:	ab03      	add	r3, sp, #12
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	ab02      	add	r3, sp, #8
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	ec47 6b10 	vmov	d0, r6, r7
 80068b6:	4653      	mov	r3, sl
 80068b8:	4622      	mov	r2, r4
 80068ba:	f000 fff9 	bl	80078b0 <_dtoa_r>
 80068be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068c2:	4605      	mov	r5, r0
 80068c4:	d119      	bne.n	80068fa <__cvt+0x94>
 80068c6:	f019 0f01 	tst.w	r9, #1
 80068ca:	d00e      	beq.n	80068ea <__cvt+0x84>
 80068cc:	eb00 0904 	add.w	r9, r0, r4
 80068d0:	2200      	movs	r2, #0
 80068d2:	2300      	movs	r3, #0
 80068d4:	4630      	mov	r0, r6
 80068d6:	4639      	mov	r1, r7
 80068d8:	f7fa f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80068dc:	b108      	cbz	r0, 80068e2 <__cvt+0x7c>
 80068de:	f8cd 900c 	str.w	r9, [sp, #12]
 80068e2:	2230      	movs	r2, #48	@ 0x30
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	454b      	cmp	r3, r9
 80068e8:	d31e      	bcc.n	8006928 <__cvt+0xc2>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068ee:	1b5b      	subs	r3, r3, r5
 80068f0:	4628      	mov	r0, r5
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	b004      	add	sp, #16
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068fe:	eb00 0904 	add.w	r9, r0, r4
 8006902:	d1e5      	bne.n	80068d0 <__cvt+0x6a>
 8006904:	7803      	ldrb	r3, [r0, #0]
 8006906:	2b30      	cmp	r3, #48	@ 0x30
 8006908:	d10a      	bne.n	8006920 <__cvt+0xba>
 800690a:	2200      	movs	r2, #0
 800690c:	2300      	movs	r3, #0
 800690e:	4630      	mov	r0, r6
 8006910:	4639      	mov	r1, r7
 8006912:	f7fa f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006916:	b918      	cbnz	r0, 8006920 <__cvt+0xba>
 8006918:	f1c4 0401 	rsb	r4, r4, #1
 800691c:	f8ca 4000 	str.w	r4, [sl]
 8006920:	f8da 3000 	ldr.w	r3, [sl]
 8006924:	4499      	add	r9, r3
 8006926:	e7d3      	b.n	80068d0 <__cvt+0x6a>
 8006928:	1c59      	adds	r1, r3, #1
 800692a:	9103      	str	r1, [sp, #12]
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e7d9      	b.n	80068e4 <__cvt+0x7e>

08006930 <__exponent>:
 8006930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006932:	2900      	cmp	r1, #0
 8006934:	bfba      	itte	lt
 8006936:	4249      	neglt	r1, r1
 8006938:	232d      	movlt	r3, #45	@ 0x2d
 800693a:	232b      	movge	r3, #43	@ 0x2b
 800693c:	2909      	cmp	r1, #9
 800693e:	7002      	strb	r2, [r0, #0]
 8006940:	7043      	strb	r3, [r0, #1]
 8006942:	dd29      	ble.n	8006998 <__exponent+0x68>
 8006944:	f10d 0307 	add.w	r3, sp, #7
 8006948:	461d      	mov	r5, r3
 800694a:	270a      	movs	r7, #10
 800694c:	461a      	mov	r2, r3
 800694e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006952:	fb07 1416 	mls	r4, r7, r6, r1
 8006956:	3430      	adds	r4, #48	@ 0x30
 8006958:	f802 4c01 	strb.w	r4, [r2, #-1]
 800695c:	460c      	mov	r4, r1
 800695e:	2c63      	cmp	r4, #99	@ 0x63
 8006960:	f103 33ff 	add.w	r3, r3, #4294967295
 8006964:	4631      	mov	r1, r6
 8006966:	dcf1      	bgt.n	800694c <__exponent+0x1c>
 8006968:	3130      	adds	r1, #48	@ 0x30
 800696a:	1e94      	subs	r4, r2, #2
 800696c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006970:	1c41      	adds	r1, r0, #1
 8006972:	4623      	mov	r3, r4
 8006974:	42ab      	cmp	r3, r5
 8006976:	d30a      	bcc.n	800698e <__exponent+0x5e>
 8006978:	f10d 0309 	add.w	r3, sp, #9
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	42ac      	cmp	r4, r5
 8006980:	bf88      	it	hi
 8006982:	2300      	movhi	r3, #0
 8006984:	3302      	adds	r3, #2
 8006986:	4403      	add	r3, r0
 8006988:	1a18      	subs	r0, r3, r0
 800698a:	b003      	add	sp, #12
 800698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006992:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006996:	e7ed      	b.n	8006974 <__exponent+0x44>
 8006998:	2330      	movs	r3, #48	@ 0x30
 800699a:	3130      	adds	r1, #48	@ 0x30
 800699c:	7083      	strb	r3, [r0, #2]
 800699e:	70c1      	strb	r1, [r0, #3]
 80069a0:	1d03      	adds	r3, r0, #4
 80069a2:	e7f1      	b.n	8006988 <__exponent+0x58>

080069a4 <_printf_float>:
 80069a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	b08d      	sub	sp, #52	@ 0x34
 80069aa:	460c      	mov	r4, r1
 80069ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80069b0:	4616      	mov	r6, r2
 80069b2:	461f      	mov	r7, r3
 80069b4:	4605      	mov	r5, r0
 80069b6:	f000 fe7b 	bl	80076b0 <_localeconv_r>
 80069ba:	6803      	ldr	r3, [r0, #0]
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7f9 fc56 	bl	8000270 <strlen>
 80069c4:	2300      	movs	r3, #0
 80069c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c8:	f8d8 3000 	ldr.w	r3, [r8]
 80069cc:	9005      	str	r0, [sp, #20]
 80069ce:	3307      	adds	r3, #7
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	f103 0208 	add.w	r2, r3, #8
 80069d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069dc:	f8d4 b000 	ldr.w	fp, [r4]
 80069e0:	f8c8 2000 	str.w	r2, [r8]
 80069e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069ec:	9307      	str	r3, [sp, #28]
 80069ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80069f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069fa:	4b9c      	ldr	r3, [pc, #624]	@ (8006c6c <_printf_float+0x2c8>)
 80069fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006a00:	f7fa f894 	bl	8000b2c <__aeabi_dcmpun>
 8006a04:	bb70      	cbnz	r0, 8006a64 <_printf_float+0xc0>
 8006a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a0a:	4b98      	ldr	r3, [pc, #608]	@ (8006c6c <_printf_float+0x2c8>)
 8006a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a10:	f7fa f86e 	bl	8000af0 <__aeabi_dcmple>
 8006a14:	bb30      	cbnz	r0, 8006a64 <_printf_float+0xc0>
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	f7fa f85d 	bl	8000adc <__aeabi_dcmplt>
 8006a22:	b110      	cbz	r0, 8006a2a <_printf_float+0x86>
 8006a24:	232d      	movs	r3, #45	@ 0x2d
 8006a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a2a:	4a91      	ldr	r2, [pc, #580]	@ (8006c70 <_printf_float+0x2cc>)
 8006a2c:	4b91      	ldr	r3, [pc, #580]	@ (8006c74 <_printf_float+0x2d0>)
 8006a2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a32:	bf94      	ite	ls
 8006a34:	4690      	movls	r8, r2
 8006a36:	4698      	movhi	r8, r3
 8006a38:	2303      	movs	r3, #3
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	f02b 0304 	bic.w	r3, fp, #4
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	f04f 0900 	mov.w	r9, #0
 8006a46:	9700      	str	r7, [sp, #0]
 8006a48:	4633      	mov	r3, r6
 8006a4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f9d2 	bl	8006df8 <_printf_common>
 8006a54:	3001      	adds	r0, #1
 8006a56:	f040 808d 	bne.w	8006b74 <_printf_float+0x1d0>
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5e:	b00d      	add	sp, #52	@ 0x34
 8006a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	4640      	mov	r0, r8
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	f7fa f85e 	bl	8000b2c <__aeabi_dcmpun>
 8006a70:	b140      	cbz	r0, 8006a84 <_printf_float+0xe0>
 8006a72:	464b      	mov	r3, r9
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bfbc      	itt	lt
 8006a78:	232d      	movlt	r3, #45	@ 0x2d
 8006a7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c78 <_printf_float+0x2d4>)
 8006a80:	4b7e      	ldr	r3, [pc, #504]	@ (8006c7c <_printf_float+0x2d8>)
 8006a82:	e7d4      	b.n	8006a2e <_printf_float+0x8a>
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a8a:	9206      	str	r2, [sp, #24]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	d13b      	bne.n	8006b08 <_printf_float+0x164>
 8006a90:	2306      	movs	r3, #6
 8006a92:	6063      	str	r3, [r4, #4]
 8006a94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006aa0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006aa4:	ab09      	add	r3, sp, #36	@ 0x24
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	6861      	ldr	r1, [r4, #4]
 8006aaa:	ec49 8b10 	vmov	d0, r8, r9
 8006aae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f7ff fed7 	bl	8006866 <__cvt>
 8006ab8:	9b06      	ldr	r3, [sp, #24]
 8006aba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006abc:	2b47      	cmp	r3, #71	@ 0x47
 8006abe:	4680      	mov	r8, r0
 8006ac0:	d129      	bne.n	8006b16 <_printf_float+0x172>
 8006ac2:	1cc8      	adds	r0, r1, #3
 8006ac4:	db02      	blt.n	8006acc <_printf_float+0x128>
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	4299      	cmp	r1, r3
 8006aca:	dd41      	ble.n	8006b50 <_printf_float+0x1ac>
 8006acc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ad0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ad4:	3901      	subs	r1, #1
 8006ad6:	4652      	mov	r2, sl
 8006ad8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006adc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ade:	f7ff ff27 	bl	8006930 <__exponent>
 8006ae2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ae4:	1813      	adds	r3, r2, r0
 8006ae6:	2a01      	cmp	r2, #1
 8006ae8:	4681      	mov	r9, r0
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	dc02      	bgt.n	8006af4 <_printf_float+0x150>
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	07d2      	lsls	r2, r2, #31
 8006af2:	d501      	bpl.n	8006af8 <_printf_float+0x154>
 8006af4:	3301      	adds	r3, #1
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0a2      	beq.n	8006a46 <_printf_float+0xa2>
 8006b00:	232d      	movs	r3, #45	@ 0x2d
 8006b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b06:	e79e      	b.n	8006a46 <_printf_float+0xa2>
 8006b08:	9a06      	ldr	r2, [sp, #24]
 8006b0a:	2a47      	cmp	r2, #71	@ 0x47
 8006b0c:	d1c2      	bne.n	8006a94 <_printf_float+0xf0>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1c0      	bne.n	8006a94 <_printf_float+0xf0>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e7bd      	b.n	8006a92 <_printf_float+0xee>
 8006b16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b1a:	d9db      	bls.n	8006ad4 <_printf_float+0x130>
 8006b1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b20:	d118      	bne.n	8006b54 <_printf_float+0x1b0>
 8006b22:	2900      	cmp	r1, #0
 8006b24:	6863      	ldr	r3, [r4, #4]
 8006b26:	dd0b      	ble.n	8006b40 <_printf_float+0x19c>
 8006b28:	6121      	str	r1, [r4, #16]
 8006b2a:	b913      	cbnz	r3, 8006b32 <_printf_float+0x18e>
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	07d0      	lsls	r0, r2, #31
 8006b30:	d502      	bpl.n	8006b38 <_printf_float+0x194>
 8006b32:	3301      	adds	r3, #1
 8006b34:	440b      	add	r3, r1
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b3a:	f04f 0900 	mov.w	r9, #0
 8006b3e:	e7db      	b.n	8006af8 <_printf_float+0x154>
 8006b40:	b913      	cbnz	r3, 8006b48 <_printf_float+0x1a4>
 8006b42:	6822      	ldr	r2, [r4, #0]
 8006b44:	07d2      	lsls	r2, r2, #31
 8006b46:	d501      	bpl.n	8006b4c <_printf_float+0x1a8>
 8006b48:	3302      	adds	r3, #2
 8006b4a:	e7f4      	b.n	8006b36 <_printf_float+0x192>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e7f2      	b.n	8006b36 <_printf_float+0x192>
 8006b50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b56:	4299      	cmp	r1, r3
 8006b58:	db05      	blt.n	8006b66 <_printf_float+0x1c2>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	6121      	str	r1, [r4, #16]
 8006b5e:	07d8      	lsls	r0, r3, #31
 8006b60:	d5ea      	bpl.n	8006b38 <_printf_float+0x194>
 8006b62:	1c4b      	adds	r3, r1, #1
 8006b64:	e7e7      	b.n	8006b36 <_printf_float+0x192>
 8006b66:	2900      	cmp	r1, #0
 8006b68:	bfd4      	ite	le
 8006b6a:	f1c1 0202 	rsble	r2, r1, #2
 8006b6e:	2201      	movgt	r2, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	e7e0      	b.n	8006b36 <_printf_float+0x192>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	055a      	lsls	r2, r3, #21
 8006b78:	d407      	bmi.n	8006b8a <_printf_float+0x1e6>
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b8      	blx	r7
 8006b84:	3001      	adds	r0, #1
 8006b86:	d12b      	bne.n	8006be0 <_printf_float+0x23c>
 8006b88:	e767      	b.n	8006a5a <_printf_float+0xb6>
 8006b8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b8e:	f240 80dd 	bls.w	8006d4c <_printf_float+0x3a8>
 8006b92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b96:	2200      	movs	r2, #0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f7f9 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d033      	beq.n	8006c0a <_printf_float+0x266>
 8006ba2:	4a37      	ldr	r2, [pc, #220]	@ (8006c80 <_printf_float+0x2dc>)
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	f43f af54 	beq.w	8006a5a <_printf_float+0xb6>
 8006bb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006bb6:	4543      	cmp	r3, r8
 8006bb8:	db02      	blt.n	8006bc0 <_printf_float+0x21c>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	07d8      	lsls	r0, r3, #31
 8006bbe:	d50f      	bpl.n	8006be0 <_printf_float+0x23c>
 8006bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f af45 	beq.w	8006a5a <_printf_float+0xb6>
 8006bd0:	f04f 0900 	mov.w	r9, #0
 8006bd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bd8:	f104 0a1a 	add.w	sl, r4, #26
 8006bdc:	45c8      	cmp	r8, r9
 8006bde:	dc09      	bgt.n	8006bf4 <_printf_float+0x250>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	079b      	lsls	r3, r3, #30
 8006be4:	f100 8103 	bmi.w	8006dee <_printf_float+0x44a>
 8006be8:	68e0      	ldr	r0, [r4, #12]
 8006bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bec:	4298      	cmp	r0, r3
 8006bee:	bfb8      	it	lt
 8006bf0:	4618      	movlt	r0, r3
 8006bf2:	e734      	b.n	8006a5e <_printf_float+0xba>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4652      	mov	r2, sl
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	47b8      	blx	r7
 8006bfe:	3001      	adds	r0, #1
 8006c00:	f43f af2b 	beq.w	8006a5a <_printf_float+0xb6>
 8006c04:	f109 0901 	add.w	r9, r9, #1
 8006c08:	e7e8      	b.n	8006bdc <_printf_float+0x238>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dc39      	bgt.n	8006c84 <_printf_float+0x2e0>
 8006c10:	4a1b      	ldr	r2, [pc, #108]	@ (8006c80 <_printf_float+0x2dc>)
 8006c12:	2301      	movs	r3, #1
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f af1d 	beq.w	8006a5a <_printf_float+0xb6>
 8006c20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c24:	ea59 0303 	orrs.w	r3, r9, r3
 8006c28:	d102      	bne.n	8006c30 <_printf_float+0x28c>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	d5d7      	bpl.n	8006be0 <_printf_float+0x23c>
 8006c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c34:	4631      	mov	r1, r6
 8006c36:	4628      	mov	r0, r5
 8006c38:	47b8      	blx	r7
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	f43f af0d 	beq.w	8006a5a <_printf_float+0xb6>
 8006c40:	f04f 0a00 	mov.w	sl, #0
 8006c44:	f104 0b1a 	add.w	fp, r4, #26
 8006c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4a:	425b      	negs	r3, r3
 8006c4c:	4553      	cmp	r3, sl
 8006c4e:	dc01      	bgt.n	8006c54 <_printf_float+0x2b0>
 8006c50:	464b      	mov	r3, r9
 8006c52:	e793      	b.n	8006b7c <_printf_float+0x1d8>
 8006c54:	2301      	movs	r3, #1
 8006c56:	465a      	mov	r2, fp
 8006c58:	4631      	mov	r1, r6
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	47b8      	blx	r7
 8006c5e:	3001      	adds	r0, #1
 8006c60:	f43f aefb 	beq.w	8006a5a <_printf_float+0xb6>
 8006c64:	f10a 0a01 	add.w	sl, sl, #1
 8006c68:	e7ee      	b.n	8006c48 <_printf_float+0x2a4>
 8006c6a:	bf00      	nop
 8006c6c:	7fefffff 	.word	0x7fefffff
 8006c70:	080094f8 	.word	0x080094f8
 8006c74:	080094fc 	.word	0x080094fc
 8006c78:	08009500 	.word	0x08009500
 8006c7c:	08009504 	.word	0x08009504
 8006c80:	08009508 	.word	0x08009508
 8006c84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c8a:	4553      	cmp	r3, sl
 8006c8c:	bfa8      	it	ge
 8006c8e:	4653      	movge	r3, sl
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	4699      	mov	r9, r3
 8006c94:	dc36      	bgt.n	8006d04 <_printf_float+0x360>
 8006c96:	f04f 0b00 	mov.w	fp, #0
 8006c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c9e:	f104 021a 	add.w	r2, r4, #26
 8006ca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ca4:	9306      	str	r3, [sp, #24]
 8006ca6:	eba3 0309 	sub.w	r3, r3, r9
 8006caa:	455b      	cmp	r3, fp
 8006cac:	dc31      	bgt.n	8006d12 <_printf_float+0x36e>
 8006cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb0:	459a      	cmp	sl, r3
 8006cb2:	dc3a      	bgt.n	8006d2a <_printf_float+0x386>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	07da      	lsls	r2, r3, #31
 8006cb8:	d437      	bmi.n	8006d2a <_printf_float+0x386>
 8006cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cbc:	ebaa 0903 	sub.w	r9, sl, r3
 8006cc0:	9b06      	ldr	r3, [sp, #24]
 8006cc2:	ebaa 0303 	sub.w	r3, sl, r3
 8006cc6:	4599      	cmp	r9, r3
 8006cc8:	bfa8      	it	ge
 8006cca:	4699      	movge	r9, r3
 8006ccc:	f1b9 0f00 	cmp.w	r9, #0
 8006cd0:	dc33      	bgt.n	8006d3a <_printf_float+0x396>
 8006cd2:	f04f 0800 	mov.w	r8, #0
 8006cd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cda:	f104 0b1a 	add.w	fp, r4, #26
 8006cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ce4:	eba3 0309 	sub.w	r3, r3, r9
 8006ce8:	4543      	cmp	r3, r8
 8006cea:	f77f af79 	ble.w	8006be0 <_printf_float+0x23c>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	465a      	mov	r2, fp
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f aeae 	beq.w	8006a5a <_printf_float+0xb6>
 8006cfe:	f108 0801 	add.w	r8, r8, #1
 8006d02:	e7ec      	b.n	8006cde <_printf_float+0x33a>
 8006d04:	4642      	mov	r2, r8
 8006d06:	4631      	mov	r1, r6
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b8      	blx	r7
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d1c2      	bne.n	8006c96 <_printf_float+0x2f2>
 8006d10:	e6a3      	b.n	8006a5a <_printf_float+0xb6>
 8006d12:	2301      	movs	r3, #1
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	9206      	str	r2, [sp, #24]
 8006d1a:	47b8      	blx	r7
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	f43f ae9c 	beq.w	8006a5a <_printf_float+0xb6>
 8006d22:	9a06      	ldr	r2, [sp, #24]
 8006d24:	f10b 0b01 	add.w	fp, fp, #1
 8006d28:	e7bb      	b.n	8006ca2 <_printf_float+0x2fe>
 8006d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1c0      	bne.n	8006cba <_printf_float+0x316>
 8006d38:	e68f      	b.n	8006a5a <_printf_float+0xb6>
 8006d3a:	9a06      	ldr	r2, [sp, #24]
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	4442      	add	r2, r8
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	d1c3      	bne.n	8006cd2 <_printf_float+0x32e>
 8006d4a:	e686      	b.n	8006a5a <_printf_float+0xb6>
 8006d4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d50:	f1ba 0f01 	cmp.w	sl, #1
 8006d54:	dc01      	bgt.n	8006d5a <_printf_float+0x3b6>
 8006d56:	07db      	lsls	r3, r3, #31
 8006d58:	d536      	bpl.n	8006dc8 <_printf_float+0x424>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f ae78 	beq.w	8006a5a <_printf_float+0xb6>
 8006d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	f43f ae70 	beq.w	8006a5a <_printf_float+0xb6>
 8006d7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2300      	movs	r3, #0
 8006d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d86:	f7f9 fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d8a:	b9c0      	cbnz	r0, 8006dbe <_printf_float+0x41a>
 8006d8c:	4653      	mov	r3, sl
 8006d8e:	f108 0201 	add.w	r2, r8, #1
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d10c      	bne.n	8006db6 <_printf_float+0x412>
 8006d9c:	e65d      	b.n	8006a5a <_printf_float+0xb6>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	465a      	mov	r2, fp
 8006da2:	4631      	mov	r1, r6
 8006da4:	4628      	mov	r0, r5
 8006da6:	47b8      	blx	r7
 8006da8:	3001      	adds	r0, #1
 8006daa:	f43f ae56 	beq.w	8006a5a <_printf_float+0xb6>
 8006dae:	f108 0801 	add.w	r8, r8, #1
 8006db2:	45d0      	cmp	r8, sl
 8006db4:	dbf3      	blt.n	8006d9e <_printf_float+0x3fa>
 8006db6:	464b      	mov	r3, r9
 8006db8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006dbc:	e6df      	b.n	8006b7e <_printf_float+0x1da>
 8006dbe:	f04f 0800 	mov.w	r8, #0
 8006dc2:	f104 0b1a 	add.w	fp, r4, #26
 8006dc6:	e7f4      	b.n	8006db2 <_printf_float+0x40e>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4642      	mov	r2, r8
 8006dcc:	e7e1      	b.n	8006d92 <_printf_float+0x3ee>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	464a      	mov	r2, r9
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f ae3e 	beq.w	8006a5a <_printf_float+0xb6>
 8006dde:	f108 0801 	add.w	r8, r8, #1
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006de6:	1a5b      	subs	r3, r3, r1
 8006de8:	4543      	cmp	r3, r8
 8006dea:	dcf0      	bgt.n	8006dce <_printf_float+0x42a>
 8006dec:	e6fc      	b.n	8006be8 <_printf_float+0x244>
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	f104 0919 	add.w	r9, r4, #25
 8006df6:	e7f4      	b.n	8006de2 <_printf_float+0x43e>

08006df8 <_printf_common>:
 8006df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	4616      	mov	r6, r2
 8006dfe:	4698      	mov	r8, r3
 8006e00:	688a      	ldr	r2, [r1, #8]
 8006e02:	690b      	ldr	r3, [r1, #16]
 8006e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	bfb8      	it	lt
 8006e0c:	4613      	movlt	r3, r2
 8006e0e:	6033      	str	r3, [r6, #0]
 8006e10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e14:	4607      	mov	r7, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	b10a      	cbz	r2, 8006e1e <_printf_common+0x26>
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	6033      	str	r3, [r6, #0]
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	0699      	lsls	r1, r3, #26
 8006e22:	bf42      	ittt	mi
 8006e24:	6833      	ldrmi	r3, [r6, #0]
 8006e26:	3302      	addmi	r3, #2
 8006e28:	6033      	strmi	r3, [r6, #0]
 8006e2a:	6825      	ldr	r5, [r4, #0]
 8006e2c:	f015 0506 	ands.w	r5, r5, #6
 8006e30:	d106      	bne.n	8006e40 <_printf_common+0x48>
 8006e32:	f104 0a19 	add.w	sl, r4, #25
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	6832      	ldr	r2, [r6, #0]
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	42ab      	cmp	r3, r5
 8006e3e:	dc26      	bgt.n	8006e8e <_printf_common+0x96>
 8006e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e44:	6822      	ldr	r2, [r4, #0]
 8006e46:	3b00      	subs	r3, #0
 8006e48:	bf18      	it	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	0692      	lsls	r2, r2, #26
 8006e4e:	d42b      	bmi.n	8006ea8 <_printf_common+0xb0>
 8006e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e54:	4641      	mov	r1, r8
 8006e56:	4638      	mov	r0, r7
 8006e58:	47c8      	blx	r9
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	d01e      	beq.n	8006e9c <_printf_common+0xa4>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	6922      	ldr	r2, [r4, #16]
 8006e62:	f003 0306 	and.w	r3, r3, #6
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	bf02      	ittt	eq
 8006e6a:	68e5      	ldreq	r5, [r4, #12]
 8006e6c:	6833      	ldreq	r3, [r6, #0]
 8006e6e:	1aed      	subeq	r5, r5, r3
 8006e70:	68a3      	ldr	r3, [r4, #8]
 8006e72:	bf0c      	ite	eq
 8006e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e78:	2500      	movne	r5, #0
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	bfc4      	itt	gt
 8006e7e:	1a9b      	subgt	r3, r3, r2
 8006e80:	18ed      	addgt	r5, r5, r3
 8006e82:	2600      	movs	r6, #0
 8006e84:	341a      	adds	r4, #26
 8006e86:	42b5      	cmp	r5, r6
 8006e88:	d11a      	bne.n	8006ec0 <_printf_common+0xc8>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	e008      	b.n	8006ea0 <_printf_common+0xa8>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4652      	mov	r2, sl
 8006e92:	4641      	mov	r1, r8
 8006e94:	4638      	mov	r0, r7
 8006e96:	47c8      	blx	r9
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d103      	bne.n	8006ea4 <_printf_common+0xac>
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	e7c6      	b.n	8006e36 <_printf_common+0x3e>
 8006ea8:	18e1      	adds	r1, r4, r3
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	2030      	movs	r0, #48	@ 0x30
 8006eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006eb2:	4422      	add	r2, r4
 8006eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ebc:	3302      	adds	r3, #2
 8006ebe:	e7c7      	b.n	8006e50 <_printf_common+0x58>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	47c8      	blx	r9
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d0e6      	beq.n	8006e9c <_printf_common+0xa4>
 8006ece:	3601      	adds	r6, #1
 8006ed0:	e7d9      	b.n	8006e86 <_printf_common+0x8e>
	...

08006ed4 <_printf_i>:
 8006ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	7e0f      	ldrb	r7, [r1, #24]
 8006eda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006edc:	2f78      	cmp	r7, #120	@ 0x78
 8006ede:	4691      	mov	r9, r2
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	469a      	mov	sl, r3
 8006ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006eea:	d807      	bhi.n	8006efc <_printf_i+0x28>
 8006eec:	2f62      	cmp	r7, #98	@ 0x62
 8006eee:	d80a      	bhi.n	8006f06 <_printf_i+0x32>
 8006ef0:	2f00      	cmp	r7, #0
 8006ef2:	f000 80d2 	beq.w	800709a <_printf_i+0x1c6>
 8006ef6:	2f58      	cmp	r7, #88	@ 0x58
 8006ef8:	f000 80b9 	beq.w	800706e <_printf_i+0x19a>
 8006efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f04:	e03a      	b.n	8006f7c <_printf_i+0xa8>
 8006f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f0a:	2b15      	cmp	r3, #21
 8006f0c:	d8f6      	bhi.n	8006efc <_printf_i+0x28>
 8006f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f14 <_printf_i+0x40>)
 8006f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f14:	08006f6d 	.word	0x08006f6d
 8006f18:	08006f81 	.word	0x08006f81
 8006f1c:	08006efd 	.word	0x08006efd
 8006f20:	08006efd 	.word	0x08006efd
 8006f24:	08006efd 	.word	0x08006efd
 8006f28:	08006efd 	.word	0x08006efd
 8006f2c:	08006f81 	.word	0x08006f81
 8006f30:	08006efd 	.word	0x08006efd
 8006f34:	08006efd 	.word	0x08006efd
 8006f38:	08006efd 	.word	0x08006efd
 8006f3c:	08006efd 	.word	0x08006efd
 8006f40:	08007081 	.word	0x08007081
 8006f44:	08006fab 	.word	0x08006fab
 8006f48:	0800703b 	.word	0x0800703b
 8006f4c:	08006efd 	.word	0x08006efd
 8006f50:	08006efd 	.word	0x08006efd
 8006f54:	080070a3 	.word	0x080070a3
 8006f58:	08006efd 	.word	0x08006efd
 8006f5c:	08006fab 	.word	0x08006fab
 8006f60:	08006efd 	.word	0x08006efd
 8006f64:	08006efd 	.word	0x08006efd
 8006f68:	08007043 	.word	0x08007043
 8006f6c:	6833      	ldr	r3, [r6, #0]
 8006f6e:	1d1a      	adds	r2, r3, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6032      	str	r2, [r6, #0]
 8006f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e09d      	b.n	80070bc <_printf_i+0x1e8>
 8006f80:	6833      	ldr	r3, [r6, #0]
 8006f82:	6820      	ldr	r0, [r4, #0]
 8006f84:	1d19      	adds	r1, r3, #4
 8006f86:	6031      	str	r1, [r6, #0]
 8006f88:	0606      	lsls	r6, r0, #24
 8006f8a:	d501      	bpl.n	8006f90 <_printf_i+0xbc>
 8006f8c:	681d      	ldr	r5, [r3, #0]
 8006f8e:	e003      	b.n	8006f98 <_printf_i+0xc4>
 8006f90:	0645      	lsls	r5, r0, #25
 8006f92:	d5fb      	bpl.n	8006f8c <_printf_i+0xb8>
 8006f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	da03      	bge.n	8006fa4 <_printf_i+0xd0>
 8006f9c:	232d      	movs	r3, #45	@ 0x2d
 8006f9e:	426d      	negs	r5, r5
 8006fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fa4:	4859      	ldr	r0, [pc, #356]	@ (800710c <_printf_i+0x238>)
 8006fa6:	230a      	movs	r3, #10
 8006fa8:	e011      	b.n	8006fce <_printf_i+0xfa>
 8006faa:	6821      	ldr	r1, [r4, #0]
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	0608      	lsls	r0, r1, #24
 8006fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fb4:	d402      	bmi.n	8006fbc <_printf_i+0xe8>
 8006fb6:	0649      	lsls	r1, r1, #25
 8006fb8:	bf48      	it	mi
 8006fba:	b2ad      	uxthmi	r5, r5
 8006fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fbe:	4853      	ldr	r0, [pc, #332]	@ (800710c <_printf_i+0x238>)
 8006fc0:	6033      	str	r3, [r6, #0]
 8006fc2:	bf14      	ite	ne
 8006fc4:	230a      	movne	r3, #10
 8006fc6:	2308      	moveq	r3, #8
 8006fc8:	2100      	movs	r1, #0
 8006fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fce:	6866      	ldr	r6, [r4, #4]
 8006fd0:	60a6      	str	r6, [r4, #8]
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	bfa2      	ittt	ge
 8006fd6:	6821      	ldrge	r1, [r4, #0]
 8006fd8:	f021 0104 	bicge.w	r1, r1, #4
 8006fdc:	6021      	strge	r1, [r4, #0]
 8006fde:	b90d      	cbnz	r5, 8006fe4 <_printf_i+0x110>
 8006fe0:	2e00      	cmp	r6, #0
 8006fe2:	d04b      	beq.n	800707c <_printf_i+0x1a8>
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fea:	fb03 5711 	mls	r7, r3, r1, r5
 8006fee:	5dc7      	ldrb	r7, [r0, r7]
 8006ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ff4:	462f      	mov	r7, r5
 8006ff6:	42bb      	cmp	r3, r7
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	d9f4      	bls.n	8006fe6 <_printf_i+0x112>
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d10b      	bne.n	8007018 <_printf_i+0x144>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07df      	lsls	r7, r3, #31
 8007004:	d508      	bpl.n	8007018 <_printf_i+0x144>
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	6861      	ldr	r1, [r4, #4]
 800700a:	4299      	cmp	r1, r3
 800700c:	bfde      	ittt	le
 800700e:	2330      	movle	r3, #48	@ 0x30
 8007010:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007014:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007018:	1b92      	subs	r2, r2, r6
 800701a:	6122      	str	r2, [r4, #16]
 800701c:	f8cd a000 	str.w	sl, [sp]
 8007020:	464b      	mov	r3, r9
 8007022:	aa03      	add	r2, sp, #12
 8007024:	4621      	mov	r1, r4
 8007026:	4640      	mov	r0, r8
 8007028:	f7ff fee6 	bl	8006df8 <_printf_common>
 800702c:	3001      	adds	r0, #1
 800702e:	d14a      	bne.n	80070c6 <_printf_i+0x1f2>
 8007030:	f04f 30ff 	mov.w	r0, #4294967295
 8007034:	b004      	add	sp, #16
 8007036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	f043 0320 	orr.w	r3, r3, #32
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	4833      	ldr	r0, [pc, #204]	@ (8007110 <_printf_i+0x23c>)
 8007044:	2778      	movs	r7, #120	@ 0x78
 8007046:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	6831      	ldr	r1, [r6, #0]
 800704e:	061f      	lsls	r7, r3, #24
 8007050:	f851 5b04 	ldr.w	r5, [r1], #4
 8007054:	d402      	bmi.n	800705c <_printf_i+0x188>
 8007056:	065f      	lsls	r7, r3, #25
 8007058:	bf48      	it	mi
 800705a:	b2ad      	uxthmi	r5, r5
 800705c:	6031      	str	r1, [r6, #0]
 800705e:	07d9      	lsls	r1, r3, #31
 8007060:	bf44      	itt	mi
 8007062:	f043 0320 	orrmi.w	r3, r3, #32
 8007066:	6023      	strmi	r3, [r4, #0]
 8007068:	b11d      	cbz	r5, 8007072 <_printf_i+0x19e>
 800706a:	2310      	movs	r3, #16
 800706c:	e7ac      	b.n	8006fc8 <_printf_i+0xf4>
 800706e:	4827      	ldr	r0, [pc, #156]	@ (800710c <_printf_i+0x238>)
 8007070:	e7e9      	b.n	8007046 <_printf_i+0x172>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	f023 0320 	bic.w	r3, r3, #32
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	e7f6      	b.n	800706a <_printf_i+0x196>
 800707c:	4616      	mov	r6, r2
 800707e:	e7bd      	b.n	8006ffc <_printf_i+0x128>
 8007080:	6833      	ldr	r3, [r6, #0]
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	6961      	ldr	r1, [r4, #20]
 8007086:	1d18      	adds	r0, r3, #4
 8007088:	6030      	str	r0, [r6, #0]
 800708a:	062e      	lsls	r6, r5, #24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	d501      	bpl.n	8007094 <_printf_i+0x1c0>
 8007090:	6019      	str	r1, [r3, #0]
 8007092:	e002      	b.n	800709a <_printf_i+0x1c6>
 8007094:	0668      	lsls	r0, r5, #25
 8007096:	d5fb      	bpl.n	8007090 <_printf_i+0x1bc>
 8007098:	8019      	strh	r1, [r3, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	4616      	mov	r6, r2
 80070a0:	e7bc      	b.n	800701c <_printf_i+0x148>
 80070a2:	6833      	ldr	r3, [r6, #0]
 80070a4:	1d1a      	adds	r2, r3, #4
 80070a6:	6032      	str	r2, [r6, #0]
 80070a8:	681e      	ldr	r6, [r3, #0]
 80070aa:	6862      	ldr	r2, [r4, #4]
 80070ac:	2100      	movs	r1, #0
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7f9 f88e 	bl	80001d0 <memchr>
 80070b4:	b108      	cbz	r0, 80070ba <_printf_i+0x1e6>
 80070b6:	1b80      	subs	r0, r0, r6
 80070b8:	6060      	str	r0, [r4, #4]
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	2300      	movs	r3, #0
 80070c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070c4:	e7aa      	b.n	800701c <_printf_i+0x148>
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	4632      	mov	r2, r6
 80070ca:	4649      	mov	r1, r9
 80070cc:	4640      	mov	r0, r8
 80070ce:	47d0      	blx	sl
 80070d0:	3001      	adds	r0, #1
 80070d2:	d0ad      	beq.n	8007030 <_printf_i+0x15c>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	079b      	lsls	r3, r3, #30
 80070d8:	d413      	bmi.n	8007102 <_printf_i+0x22e>
 80070da:	68e0      	ldr	r0, [r4, #12]
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	4298      	cmp	r0, r3
 80070e0:	bfb8      	it	lt
 80070e2:	4618      	movlt	r0, r3
 80070e4:	e7a6      	b.n	8007034 <_printf_i+0x160>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4632      	mov	r2, r6
 80070ea:	4649      	mov	r1, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	47d0      	blx	sl
 80070f0:	3001      	adds	r0, #1
 80070f2:	d09d      	beq.n	8007030 <_printf_i+0x15c>
 80070f4:	3501      	adds	r5, #1
 80070f6:	68e3      	ldr	r3, [r4, #12]
 80070f8:	9903      	ldr	r1, [sp, #12]
 80070fa:	1a5b      	subs	r3, r3, r1
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dcf2      	bgt.n	80070e6 <_printf_i+0x212>
 8007100:	e7eb      	b.n	80070da <_printf_i+0x206>
 8007102:	2500      	movs	r5, #0
 8007104:	f104 0619 	add.w	r6, r4, #25
 8007108:	e7f5      	b.n	80070f6 <_printf_i+0x222>
 800710a:	bf00      	nop
 800710c:	0800950a 	.word	0x0800950a
 8007110:	0800951b 	.word	0x0800951b

08007114 <std>:
 8007114:	2300      	movs	r3, #0
 8007116:	b510      	push	{r4, lr}
 8007118:	4604      	mov	r4, r0
 800711a:	e9c0 3300 	strd	r3, r3, [r0]
 800711e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007122:	6083      	str	r3, [r0, #8]
 8007124:	8181      	strh	r1, [r0, #12]
 8007126:	6643      	str	r3, [r0, #100]	@ 0x64
 8007128:	81c2      	strh	r2, [r0, #14]
 800712a:	6183      	str	r3, [r0, #24]
 800712c:	4619      	mov	r1, r3
 800712e:	2208      	movs	r2, #8
 8007130:	305c      	adds	r0, #92	@ 0x5c
 8007132:	f000 fab5 	bl	80076a0 <memset>
 8007136:	4b0d      	ldr	r3, [pc, #52]	@ (800716c <std+0x58>)
 8007138:	6263      	str	r3, [r4, #36]	@ 0x24
 800713a:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <std+0x5c>)
 800713c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <std+0x60>)
 8007140:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007142:	4b0d      	ldr	r3, [pc, #52]	@ (8007178 <std+0x64>)
 8007144:	6323      	str	r3, [r4, #48]	@ 0x30
 8007146:	4b0d      	ldr	r3, [pc, #52]	@ (800717c <std+0x68>)
 8007148:	6224      	str	r4, [r4, #32]
 800714a:	429c      	cmp	r4, r3
 800714c:	d006      	beq.n	800715c <std+0x48>
 800714e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007152:	4294      	cmp	r4, r2
 8007154:	d002      	beq.n	800715c <std+0x48>
 8007156:	33d0      	adds	r3, #208	@ 0xd0
 8007158:	429c      	cmp	r4, r3
 800715a:	d105      	bne.n	8007168 <std+0x54>
 800715c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007164:	f000 bb18 	b.w	8007798 <__retarget_lock_init_recursive>
 8007168:	bd10      	pop	{r4, pc}
 800716a:	bf00      	nop
 800716c:	080074f1 	.word	0x080074f1
 8007170:	08007513 	.word	0x08007513
 8007174:	0800754b 	.word	0x0800754b
 8007178:	0800756f 	.word	0x0800756f
 800717c:	200004d8 	.word	0x200004d8

08007180 <stdio_exit_handler>:
 8007180:	4a02      	ldr	r2, [pc, #8]	@ (800718c <stdio_exit_handler+0xc>)
 8007182:	4903      	ldr	r1, [pc, #12]	@ (8007190 <stdio_exit_handler+0x10>)
 8007184:	4803      	ldr	r0, [pc, #12]	@ (8007194 <stdio_exit_handler+0x14>)
 8007186:	f000 b869 	b.w	800725c <_fwalk_sglue>
 800718a:	bf00      	nop
 800718c:	2000000c 	.word	0x2000000c
 8007190:	080090c9 	.word	0x080090c9
 8007194:	2000001c 	.word	0x2000001c

08007198 <cleanup_stdio>:
 8007198:	6841      	ldr	r1, [r0, #4]
 800719a:	4b0c      	ldr	r3, [pc, #48]	@ (80071cc <cleanup_stdio+0x34>)
 800719c:	4299      	cmp	r1, r3
 800719e:	b510      	push	{r4, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	d001      	beq.n	80071a8 <cleanup_stdio+0x10>
 80071a4:	f001 ff90 	bl	80090c8 <_fflush_r>
 80071a8:	68a1      	ldr	r1, [r4, #8]
 80071aa:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <cleanup_stdio+0x38>)
 80071ac:	4299      	cmp	r1, r3
 80071ae:	d002      	beq.n	80071b6 <cleanup_stdio+0x1e>
 80071b0:	4620      	mov	r0, r4
 80071b2:	f001 ff89 	bl	80090c8 <_fflush_r>
 80071b6:	68e1      	ldr	r1, [r4, #12]
 80071b8:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <cleanup_stdio+0x3c>)
 80071ba:	4299      	cmp	r1, r3
 80071bc:	d004      	beq.n	80071c8 <cleanup_stdio+0x30>
 80071be:	4620      	mov	r0, r4
 80071c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c4:	f001 bf80 	b.w	80090c8 <_fflush_r>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	bf00      	nop
 80071cc:	200004d8 	.word	0x200004d8
 80071d0:	20000540 	.word	0x20000540
 80071d4:	200005a8 	.word	0x200005a8

080071d8 <global_stdio_init.part.0>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <global_stdio_init.part.0+0x30>)
 80071dc:	4c0b      	ldr	r4, [pc, #44]	@ (800720c <global_stdio_init.part.0+0x34>)
 80071de:	4a0c      	ldr	r2, [pc, #48]	@ (8007210 <global_stdio_init.part.0+0x38>)
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	4620      	mov	r0, r4
 80071e4:	2200      	movs	r2, #0
 80071e6:	2104      	movs	r1, #4
 80071e8:	f7ff ff94 	bl	8007114 <std>
 80071ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071f0:	2201      	movs	r2, #1
 80071f2:	2109      	movs	r1, #9
 80071f4:	f7ff ff8e 	bl	8007114 <std>
 80071f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071fc:	2202      	movs	r2, #2
 80071fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007202:	2112      	movs	r1, #18
 8007204:	f7ff bf86 	b.w	8007114 <std>
 8007208:	20000610 	.word	0x20000610
 800720c:	200004d8 	.word	0x200004d8
 8007210:	08007181 	.word	0x08007181

08007214 <__sfp_lock_acquire>:
 8007214:	4801      	ldr	r0, [pc, #4]	@ (800721c <__sfp_lock_acquire+0x8>)
 8007216:	f000 bac0 	b.w	800779a <__retarget_lock_acquire_recursive>
 800721a:	bf00      	nop
 800721c:	20000619 	.word	0x20000619

08007220 <__sfp_lock_release>:
 8007220:	4801      	ldr	r0, [pc, #4]	@ (8007228 <__sfp_lock_release+0x8>)
 8007222:	f000 babb 	b.w	800779c <__retarget_lock_release_recursive>
 8007226:	bf00      	nop
 8007228:	20000619 	.word	0x20000619

0800722c <__sinit>:
 800722c:	b510      	push	{r4, lr}
 800722e:	4604      	mov	r4, r0
 8007230:	f7ff fff0 	bl	8007214 <__sfp_lock_acquire>
 8007234:	6a23      	ldr	r3, [r4, #32]
 8007236:	b11b      	cbz	r3, 8007240 <__sinit+0x14>
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f7ff bff0 	b.w	8007220 <__sfp_lock_release>
 8007240:	4b04      	ldr	r3, [pc, #16]	@ (8007254 <__sinit+0x28>)
 8007242:	6223      	str	r3, [r4, #32]
 8007244:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <__sinit+0x2c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f5      	bne.n	8007238 <__sinit+0xc>
 800724c:	f7ff ffc4 	bl	80071d8 <global_stdio_init.part.0>
 8007250:	e7f2      	b.n	8007238 <__sinit+0xc>
 8007252:	bf00      	nop
 8007254:	08007199 	.word	0x08007199
 8007258:	20000610 	.word	0x20000610

0800725c <_fwalk_sglue>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	4607      	mov	r7, r0
 8007262:	4688      	mov	r8, r1
 8007264:	4614      	mov	r4, r2
 8007266:	2600      	movs	r6, #0
 8007268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800726c:	f1b9 0901 	subs.w	r9, r9, #1
 8007270:	d505      	bpl.n	800727e <_fwalk_sglue+0x22>
 8007272:	6824      	ldr	r4, [r4, #0]
 8007274:	2c00      	cmp	r4, #0
 8007276:	d1f7      	bne.n	8007268 <_fwalk_sglue+0xc>
 8007278:	4630      	mov	r0, r6
 800727a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800727e:	89ab      	ldrh	r3, [r5, #12]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d907      	bls.n	8007294 <_fwalk_sglue+0x38>
 8007284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007288:	3301      	adds	r3, #1
 800728a:	d003      	beq.n	8007294 <_fwalk_sglue+0x38>
 800728c:	4629      	mov	r1, r5
 800728e:	4638      	mov	r0, r7
 8007290:	47c0      	blx	r8
 8007292:	4306      	orrs	r6, r0
 8007294:	3568      	adds	r5, #104	@ 0x68
 8007296:	e7e9      	b.n	800726c <_fwalk_sglue+0x10>

08007298 <iprintf>:
 8007298:	b40f      	push	{r0, r1, r2, r3}
 800729a:	b507      	push	{r0, r1, r2, lr}
 800729c:	4906      	ldr	r1, [pc, #24]	@ (80072b8 <iprintf+0x20>)
 800729e:	ab04      	add	r3, sp, #16
 80072a0:	6808      	ldr	r0, [r1, #0]
 80072a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a6:	6881      	ldr	r1, [r0, #8]
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	f001 fd71 	bl	8008d90 <_vfiprintf_r>
 80072ae:	b003      	add	sp, #12
 80072b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b4:	b004      	add	sp, #16
 80072b6:	4770      	bx	lr
 80072b8:	20000018 	.word	0x20000018

080072bc <_puts_r>:
 80072bc:	6a03      	ldr	r3, [r0, #32]
 80072be:	b570      	push	{r4, r5, r6, lr}
 80072c0:	6884      	ldr	r4, [r0, #8]
 80072c2:	4605      	mov	r5, r0
 80072c4:	460e      	mov	r6, r1
 80072c6:	b90b      	cbnz	r3, 80072cc <_puts_r+0x10>
 80072c8:	f7ff ffb0 	bl	800722c <__sinit>
 80072cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ce:	07db      	lsls	r3, r3, #31
 80072d0:	d405      	bmi.n	80072de <_puts_r+0x22>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	0598      	lsls	r0, r3, #22
 80072d6:	d402      	bmi.n	80072de <_puts_r+0x22>
 80072d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072da:	f000 fa5e 	bl	800779a <__retarget_lock_acquire_recursive>
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	0719      	lsls	r1, r3, #28
 80072e2:	d502      	bpl.n	80072ea <_puts_r+0x2e>
 80072e4:	6923      	ldr	r3, [r4, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d135      	bne.n	8007356 <_puts_r+0x9a>
 80072ea:	4621      	mov	r1, r4
 80072ec:	4628      	mov	r0, r5
 80072ee:	f000 f981 	bl	80075f4 <__swsetup_r>
 80072f2:	b380      	cbz	r0, 8007356 <_puts_r+0x9a>
 80072f4:	f04f 35ff 	mov.w	r5, #4294967295
 80072f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072fa:	07da      	lsls	r2, r3, #31
 80072fc:	d405      	bmi.n	800730a <_puts_r+0x4e>
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	059b      	lsls	r3, r3, #22
 8007302:	d402      	bmi.n	800730a <_puts_r+0x4e>
 8007304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007306:	f000 fa49 	bl	800779c <__retarget_lock_release_recursive>
 800730a:	4628      	mov	r0, r5
 800730c:	bd70      	pop	{r4, r5, r6, pc}
 800730e:	2b00      	cmp	r3, #0
 8007310:	da04      	bge.n	800731c <_puts_r+0x60>
 8007312:	69a2      	ldr	r2, [r4, #24]
 8007314:	429a      	cmp	r2, r3
 8007316:	dc17      	bgt.n	8007348 <_puts_r+0x8c>
 8007318:	290a      	cmp	r1, #10
 800731a:	d015      	beq.n	8007348 <_puts_r+0x8c>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	6022      	str	r2, [r4, #0]
 8007322:	7019      	strb	r1, [r3, #0]
 8007324:	68a3      	ldr	r3, [r4, #8]
 8007326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800732a:	3b01      	subs	r3, #1
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	2900      	cmp	r1, #0
 8007330:	d1ed      	bne.n	800730e <_puts_r+0x52>
 8007332:	2b00      	cmp	r3, #0
 8007334:	da11      	bge.n	800735a <_puts_r+0x9e>
 8007336:	4622      	mov	r2, r4
 8007338:	210a      	movs	r1, #10
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f91b 	bl	8007576 <__swbuf_r>
 8007340:	3001      	adds	r0, #1
 8007342:	d0d7      	beq.n	80072f4 <_puts_r+0x38>
 8007344:	250a      	movs	r5, #10
 8007346:	e7d7      	b.n	80072f8 <_puts_r+0x3c>
 8007348:	4622      	mov	r2, r4
 800734a:	4628      	mov	r0, r5
 800734c:	f000 f913 	bl	8007576 <__swbuf_r>
 8007350:	3001      	adds	r0, #1
 8007352:	d1e7      	bne.n	8007324 <_puts_r+0x68>
 8007354:	e7ce      	b.n	80072f4 <_puts_r+0x38>
 8007356:	3e01      	subs	r6, #1
 8007358:	e7e4      	b.n	8007324 <_puts_r+0x68>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	220a      	movs	r2, #10
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e7ee      	b.n	8007344 <_puts_r+0x88>
	...

08007368 <puts>:
 8007368:	4b02      	ldr	r3, [pc, #8]	@ (8007374 <puts+0xc>)
 800736a:	4601      	mov	r1, r0
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	f7ff bfa5 	b.w	80072bc <_puts_r>
 8007372:	bf00      	nop
 8007374:	20000018 	.word	0x20000018

08007378 <setbuf>:
 8007378:	fab1 f281 	clz	r2, r1
 800737c:	0952      	lsrs	r2, r2, #5
 800737e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007382:	0052      	lsls	r2, r2, #1
 8007384:	f000 b800 	b.w	8007388 <setvbuf>

08007388 <setvbuf>:
 8007388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800738c:	461d      	mov	r5, r3
 800738e:	4b57      	ldr	r3, [pc, #348]	@ (80074ec <setvbuf+0x164>)
 8007390:	681f      	ldr	r7, [r3, #0]
 8007392:	4604      	mov	r4, r0
 8007394:	460e      	mov	r6, r1
 8007396:	4690      	mov	r8, r2
 8007398:	b127      	cbz	r7, 80073a4 <setvbuf+0x1c>
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	b913      	cbnz	r3, 80073a4 <setvbuf+0x1c>
 800739e:	4638      	mov	r0, r7
 80073a0:	f7ff ff44 	bl	800722c <__sinit>
 80073a4:	f1b8 0f02 	cmp.w	r8, #2
 80073a8:	d006      	beq.n	80073b8 <setvbuf+0x30>
 80073aa:	f1b8 0f01 	cmp.w	r8, #1
 80073ae:	f200 809a 	bhi.w	80074e6 <setvbuf+0x15e>
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	f2c0 8097 	blt.w	80074e6 <setvbuf+0x15e>
 80073b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073ba:	07d9      	lsls	r1, r3, #31
 80073bc:	d405      	bmi.n	80073ca <setvbuf+0x42>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	059a      	lsls	r2, r3, #22
 80073c2:	d402      	bmi.n	80073ca <setvbuf+0x42>
 80073c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073c6:	f000 f9e8 	bl	800779a <__retarget_lock_acquire_recursive>
 80073ca:	4621      	mov	r1, r4
 80073cc:	4638      	mov	r0, r7
 80073ce:	f001 fe7b 	bl	80090c8 <_fflush_r>
 80073d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073d4:	b141      	cbz	r1, 80073e8 <setvbuf+0x60>
 80073d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073da:	4299      	cmp	r1, r3
 80073dc:	d002      	beq.n	80073e4 <setvbuf+0x5c>
 80073de:	4638      	mov	r0, r7
 80073e0:	f001 f82a 	bl	8008438 <_free_r>
 80073e4:	2300      	movs	r3, #0
 80073e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80073e8:	2300      	movs	r3, #0
 80073ea:	61a3      	str	r3, [r4, #24]
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	061b      	lsls	r3, r3, #24
 80073f2:	d503      	bpl.n	80073fc <setvbuf+0x74>
 80073f4:	6921      	ldr	r1, [r4, #16]
 80073f6:	4638      	mov	r0, r7
 80073f8:	f001 f81e 	bl	8008438 <_free_r>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	f1b8 0f02 	cmp.w	r8, #2
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	d061      	beq.n	80074d2 <setvbuf+0x14a>
 800740e:	ab01      	add	r3, sp, #4
 8007410:	466a      	mov	r2, sp
 8007412:	4621      	mov	r1, r4
 8007414:	4638      	mov	r0, r7
 8007416:	f001 fe7f 	bl	8009118 <__swhatbuf_r>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	4318      	orrs	r0, r3
 800741e:	81a0      	strh	r0, [r4, #12]
 8007420:	bb2d      	cbnz	r5, 800746e <setvbuf+0xe6>
 8007422:	9d00      	ldr	r5, [sp, #0]
 8007424:	4628      	mov	r0, r5
 8007426:	f001 f851 	bl	80084cc <malloc>
 800742a:	4606      	mov	r6, r0
 800742c:	2800      	cmp	r0, #0
 800742e:	d152      	bne.n	80074d6 <setvbuf+0x14e>
 8007430:	f8dd 9000 	ldr.w	r9, [sp]
 8007434:	45a9      	cmp	r9, r5
 8007436:	d140      	bne.n	80074ba <setvbuf+0x132>
 8007438:	f04f 35ff 	mov.w	r5, #4294967295
 800743c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007440:	f043 0202 	orr.w	r2, r3, #2
 8007444:	81a2      	strh	r2, [r4, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	60a2      	str	r2, [r4, #8]
 800744a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	6122      	str	r2, [r4, #16]
 8007452:	2201      	movs	r2, #1
 8007454:	6162      	str	r2, [r4, #20]
 8007456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007458:	07d6      	lsls	r6, r2, #31
 800745a:	d404      	bmi.n	8007466 <setvbuf+0xde>
 800745c:	0598      	lsls	r0, r3, #22
 800745e:	d402      	bmi.n	8007466 <setvbuf+0xde>
 8007460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007462:	f000 f99b 	bl	800779c <__retarget_lock_release_recursive>
 8007466:	4628      	mov	r0, r5
 8007468:	b003      	add	sp, #12
 800746a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800746e:	2e00      	cmp	r6, #0
 8007470:	d0d8      	beq.n	8007424 <setvbuf+0x9c>
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	b913      	cbnz	r3, 800747c <setvbuf+0xf4>
 8007476:	4638      	mov	r0, r7
 8007478:	f7ff fed8 	bl	800722c <__sinit>
 800747c:	f1b8 0f01 	cmp.w	r8, #1
 8007480:	bf08      	it	eq
 8007482:	89a3      	ldrheq	r3, [r4, #12]
 8007484:	6026      	str	r6, [r4, #0]
 8007486:	bf04      	itt	eq
 8007488:	f043 0301 	orreq.w	r3, r3, #1
 800748c:	81a3      	strheq	r3, [r4, #12]
 800748e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007492:	f013 0208 	ands.w	r2, r3, #8
 8007496:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800749a:	d01e      	beq.n	80074da <setvbuf+0x152>
 800749c:	07d9      	lsls	r1, r3, #31
 800749e:	bf41      	itttt	mi
 80074a0:	2200      	movmi	r2, #0
 80074a2:	426d      	negmi	r5, r5
 80074a4:	60a2      	strmi	r2, [r4, #8]
 80074a6:	61a5      	strmi	r5, [r4, #24]
 80074a8:	bf58      	it	pl
 80074aa:	60a5      	strpl	r5, [r4, #8]
 80074ac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074ae:	07d2      	lsls	r2, r2, #31
 80074b0:	d401      	bmi.n	80074b6 <setvbuf+0x12e>
 80074b2:	059b      	lsls	r3, r3, #22
 80074b4:	d513      	bpl.n	80074de <setvbuf+0x156>
 80074b6:	2500      	movs	r5, #0
 80074b8:	e7d5      	b.n	8007466 <setvbuf+0xde>
 80074ba:	4648      	mov	r0, r9
 80074bc:	f001 f806 	bl	80084cc <malloc>
 80074c0:	4606      	mov	r6, r0
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d0b8      	beq.n	8007438 <setvbuf+0xb0>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	464d      	mov	r5, r9
 80074d0:	e7cf      	b.n	8007472 <setvbuf+0xea>
 80074d2:	2500      	movs	r5, #0
 80074d4:	e7b2      	b.n	800743c <setvbuf+0xb4>
 80074d6:	46a9      	mov	r9, r5
 80074d8:	e7f5      	b.n	80074c6 <setvbuf+0x13e>
 80074da:	60a2      	str	r2, [r4, #8]
 80074dc:	e7e6      	b.n	80074ac <setvbuf+0x124>
 80074de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074e0:	f000 f95c 	bl	800779c <__retarget_lock_release_recursive>
 80074e4:	e7e7      	b.n	80074b6 <setvbuf+0x12e>
 80074e6:	f04f 35ff 	mov.w	r5, #4294967295
 80074ea:	e7bc      	b.n	8007466 <setvbuf+0xde>
 80074ec:	20000018 	.word	0x20000018

080074f0 <__sread>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	460c      	mov	r4, r1
 80074f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f8:	f000 f900 	bl	80076fc <_read_r>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	bfab      	itete	ge
 8007500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007502:	89a3      	ldrhlt	r3, [r4, #12]
 8007504:	181b      	addge	r3, r3, r0
 8007506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800750a:	bfac      	ite	ge
 800750c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800750e:	81a3      	strhlt	r3, [r4, #12]
 8007510:	bd10      	pop	{r4, pc}

08007512 <__swrite>:
 8007512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007516:	461f      	mov	r7, r3
 8007518:	898b      	ldrh	r3, [r1, #12]
 800751a:	05db      	lsls	r3, r3, #23
 800751c:	4605      	mov	r5, r0
 800751e:	460c      	mov	r4, r1
 8007520:	4616      	mov	r6, r2
 8007522:	d505      	bpl.n	8007530 <__swrite+0x1e>
 8007524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007528:	2302      	movs	r3, #2
 800752a:	2200      	movs	r2, #0
 800752c:	f000 f8d4 	bl	80076d8 <_lseek_r>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	4632      	mov	r2, r6
 800753e:	463b      	mov	r3, r7
 8007540:	4628      	mov	r0, r5
 8007542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007546:	f000 b8eb 	b.w	8007720 <_write_r>

0800754a <__sseek>:
 800754a:	b510      	push	{r4, lr}
 800754c:	460c      	mov	r4, r1
 800754e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007552:	f000 f8c1 	bl	80076d8 <_lseek_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	bf15      	itete	ne
 800755c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800755e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007566:	81a3      	strheq	r3, [r4, #12]
 8007568:	bf18      	it	ne
 800756a:	81a3      	strhne	r3, [r4, #12]
 800756c:	bd10      	pop	{r4, pc}

0800756e <__sclose>:
 800756e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007572:	f000 b8a1 	b.w	80076b8 <_close_r>

08007576 <__swbuf_r>:
 8007576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007578:	460e      	mov	r6, r1
 800757a:	4614      	mov	r4, r2
 800757c:	4605      	mov	r5, r0
 800757e:	b118      	cbz	r0, 8007588 <__swbuf_r+0x12>
 8007580:	6a03      	ldr	r3, [r0, #32]
 8007582:	b90b      	cbnz	r3, 8007588 <__swbuf_r+0x12>
 8007584:	f7ff fe52 	bl	800722c <__sinit>
 8007588:	69a3      	ldr	r3, [r4, #24]
 800758a:	60a3      	str	r3, [r4, #8]
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	071a      	lsls	r2, r3, #28
 8007590:	d501      	bpl.n	8007596 <__swbuf_r+0x20>
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	b943      	cbnz	r3, 80075a8 <__swbuf_r+0x32>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 f82b 	bl	80075f4 <__swsetup_r>
 800759e:	b118      	cbz	r0, 80075a8 <__swbuf_r+0x32>
 80075a0:	f04f 37ff 	mov.w	r7, #4294967295
 80075a4:	4638      	mov	r0, r7
 80075a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	6922      	ldr	r2, [r4, #16]
 80075ac:	1a98      	subs	r0, r3, r2
 80075ae:	6963      	ldr	r3, [r4, #20]
 80075b0:	b2f6      	uxtb	r6, r6
 80075b2:	4283      	cmp	r3, r0
 80075b4:	4637      	mov	r7, r6
 80075b6:	dc05      	bgt.n	80075c4 <__swbuf_r+0x4e>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4628      	mov	r0, r5
 80075bc:	f001 fd84 	bl	80090c8 <_fflush_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d1ed      	bne.n	80075a0 <__swbuf_r+0x2a>
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	60a3      	str	r3, [r4, #8]
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	6022      	str	r2, [r4, #0]
 80075d0:	701e      	strb	r6, [r3, #0]
 80075d2:	6962      	ldr	r2, [r4, #20]
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d004      	beq.n	80075e4 <__swbuf_r+0x6e>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	07db      	lsls	r3, r3, #31
 80075de:	d5e1      	bpl.n	80075a4 <__swbuf_r+0x2e>
 80075e0:	2e0a      	cmp	r6, #10
 80075e2:	d1df      	bne.n	80075a4 <__swbuf_r+0x2e>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f001 fd6e 	bl	80090c8 <_fflush_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0d9      	beq.n	80075a4 <__swbuf_r+0x2e>
 80075f0:	e7d6      	b.n	80075a0 <__swbuf_r+0x2a>
	...

080075f4 <__swsetup_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4b29      	ldr	r3, [pc, #164]	@ (800769c <__swsetup_r+0xa8>)
 80075f8:	4605      	mov	r5, r0
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	460c      	mov	r4, r1
 80075fe:	b118      	cbz	r0, 8007608 <__swsetup_r+0x14>
 8007600:	6a03      	ldr	r3, [r0, #32]
 8007602:	b90b      	cbnz	r3, 8007608 <__swsetup_r+0x14>
 8007604:	f7ff fe12 	bl	800722c <__sinit>
 8007608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760c:	0719      	lsls	r1, r3, #28
 800760e:	d422      	bmi.n	8007656 <__swsetup_r+0x62>
 8007610:	06da      	lsls	r2, r3, #27
 8007612:	d407      	bmi.n	8007624 <__swsetup_r+0x30>
 8007614:	2209      	movs	r2, #9
 8007616:	602a      	str	r2, [r5, #0]
 8007618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800761c:	81a3      	strh	r3, [r4, #12]
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	e033      	b.n	800768c <__swsetup_r+0x98>
 8007624:	0758      	lsls	r0, r3, #29
 8007626:	d512      	bpl.n	800764e <__swsetup_r+0x5a>
 8007628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800762a:	b141      	cbz	r1, 800763e <__swsetup_r+0x4a>
 800762c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007630:	4299      	cmp	r1, r3
 8007632:	d002      	beq.n	800763a <__swsetup_r+0x46>
 8007634:	4628      	mov	r0, r5
 8007636:	f000 feff 	bl	8008438 <_free_r>
 800763a:	2300      	movs	r3, #0
 800763c:	6363      	str	r3, [r4, #52]	@ 0x34
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	2300      	movs	r3, #0
 8007648:	6063      	str	r3, [r4, #4]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f043 0308 	orr.w	r3, r3, #8
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	b94b      	cbnz	r3, 800766e <__swsetup_r+0x7a>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007664:	d003      	beq.n	800766e <__swsetup_r+0x7a>
 8007666:	4621      	mov	r1, r4
 8007668:	4628      	mov	r0, r5
 800766a:	f001 fd7b 	bl	8009164 <__smakebuf_r>
 800766e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007672:	f013 0201 	ands.w	r2, r3, #1
 8007676:	d00a      	beq.n	800768e <__swsetup_r+0x9a>
 8007678:	2200      	movs	r2, #0
 800767a:	60a2      	str	r2, [r4, #8]
 800767c:	6962      	ldr	r2, [r4, #20]
 800767e:	4252      	negs	r2, r2
 8007680:	61a2      	str	r2, [r4, #24]
 8007682:	6922      	ldr	r2, [r4, #16]
 8007684:	b942      	cbnz	r2, 8007698 <__swsetup_r+0xa4>
 8007686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800768a:	d1c5      	bne.n	8007618 <__swsetup_r+0x24>
 800768c:	bd38      	pop	{r3, r4, r5, pc}
 800768e:	0799      	lsls	r1, r3, #30
 8007690:	bf58      	it	pl
 8007692:	6962      	ldrpl	r2, [r4, #20]
 8007694:	60a2      	str	r2, [r4, #8]
 8007696:	e7f4      	b.n	8007682 <__swsetup_r+0x8e>
 8007698:	2000      	movs	r0, #0
 800769a:	e7f7      	b.n	800768c <__swsetup_r+0x98>
 800769c:	20000018 	.word	0x20000018

080076a0 <memset>:
 80076a0:	4402      	add	r2, r0
 80076a2:	4603      	mov	r3, r0
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d100      	bne.n	80076aa <memset+0xa>
 80076a8:	4770      	bx	lr
 80076aa:	f803 1b01 	strb.w	r1, [r3], #1
 80076ae:	e7f9      	b.n	80076a4 <memset+0x4>

080076b0 <_localeconv_r>:
 80076b0:	4800      	ldr	r0, [pc, #0]	@ (80076b4 <_localeconv_r+0x4>)
 80076b2:	4770      	bx	lr
 80076b4:	20000158 	.word	0x20000158

080076b8 <_close_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d06      	ldr	r5, [pc, #24]	@ (80076d4 <_close_r+0x1c>)
 80076bc:	2300      	movs	r3, #0
 80076be:	4604      	mov	r4, r0
 80076c0:	4608      	mov	r0, r1
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f7fa fabc 	bl	8001c40 <_close>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_close_r+0x1a>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_close_r+0x1a>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20000614 	.word	0x20000614

080076d8 <_lseek_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	@ (80076f8 <_lseek_r+0x20>)
 80076dc:	4604      	mov	r4, r0
 80076de:	4608      	mov	r0, r1
 80076e0:	4611      	mov	r1, r2
 80076e2:	2200      	movs	r2, #0
 80076e4:	602a      	str	r2, [r5, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	f7fa fad1 	bl	8001c8e <_lseek>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_lseek_r+0x1e>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_lseek_r+0x1e>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20000614 	.word	0x20000614

080076fc <_read_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d07      	ldr	r5, [pc, #28]	@ (800771c <_read_r+0x20>)
 8007700:	4604      	mov	r4, r0
 8007702:	4608      	mov	r0, r1
 8007704:	4611      	mov	r1, r2
 8007706:	2200      	movs	r2, #0
 8007708:	602a      	str	r2, [r5, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f7fa fa7b 	bl	8001c06 <_read>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_read_r+0x1e>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_read_r+0x1e>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20000614 	.word	0x20000614

08007720 <_write_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	4d07      	ldr	r5, [pc, #28]	@ (8007740 <_write_r+0x20>)
 8007724:	4604      	mov	r4, r0
 8007726:	4608      	mov	r0, r1
 8007728:	4611      	mov	r1, r2
 800772a:	2200      	movs	r2, #0
 800772c:	602a      	str	r2, [r5, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	f7f9 ffac 	bl	800168c <_write>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d102      	bne.n	800773e <_write_r+0x1e>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	b103      	cbz	r3, 800773e <_write_r+0x1e>
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	bd38      	pop	{r3, r4, r5, pc}
 8007740:	20000614 	.word	0x20000614

08007744 <__errno>:
 8007744:	4b01      	ldr	r3, [pc, #4]	@ (800774c <__errno+0x8>)
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	20000018 	.word	0x20000018

08007750 <__libc_init_array>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	4d0d      	ldr	r5, [pc, #52]	@ (8007788 <__libc_init_array+0x38>)
 8007754:	4c0d      	ldr	r4, [pc, #52]	@ (800778c <__libc_init_array+0x3c>)
 8007756:	1b64      	subs	r4, r4, r5
 8007758:	10a4      	asrs	r4, r4, #2
 800775a:	2600      	movs	r6, #0
 800775c:	42a6      	cmp	r6, r4
 800775e:	d109      	bne.n	8007774 <__libc_init_array+0x24>
 8007760:	4d0b      	ldr	r5, [pc, #44]	@ (8007790 <__libc_init_array+0x40>)
 8007762:	4c0c      	ldr	r4, [pc, #48]	@ (8007794 <__libc_init_array+0x44>)
 8007764:	f001 fe80 	bl	8009468 <_init>
 8007768:	1b64      	subs	r4, r4, r5
 800776a:	10a4      	asrs	r4, r4, #2
 800776c:	2600      	movs	r6, #0
 800776e:	42a6      	cmp	r6, r4
 8007770:	d105      	bne.n	800777e <__libc_init_array+0x2e>
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	f855 3b04 	ldr.w	r3, [r5], #4
 8007778:	4798      	blx	r3
 800777a:	3601      	adds	r6, #1
 800777c:	e7ee      	b.n	800775c <__libc_init_array+0xc>
 800777e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007782:	4798      	blx	r3
 8007784:	3601      	adds	r6, #1
 8007786:	e7f2      	b.n	800776e <__libc_init_array+0x1e>
 8007788:	08009870 	.word	0x08009870
 800778c:	08009870 	.word	0x08009870
 8007790:	08009870 	.word	0x08009870
 8007794:	08009874 	.word	0x08009874

08007798 <__retarget_lock_init_recursive>:
 8007798:	4770      	bx	lr

0800779a <__retarget_lock_acquire_recursive>:
 800779a:	4770      	bx	lr

0800779c <__retarget_lock_release_recursive>:
 800779c:	4770      	bx	lr

0800779e <quorem>:
 800779e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a2:	6903      	ldr	r3, [r0, #16]
 80077a4:	690c      	ldr	r4, [r1, #16]
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	4607      	mov	r7, r0
 80077aa:	db7e      	blt.n	80078aa <quorem+0x10c>
 80077ac:	3c01      	subs	r4, #1
 80077ae:	f101 0814 	add.w	r8, r1, #20
 80077b2:	00a3      	lsls	r3, r4, #2
 80077b4:	f100 0514 	add.w	r5, r0, #20
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077c8:	3301      	adds	r3, #1
 80077ca:	429a      	cmp	r2, r3
 80077cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80077d4:	d32e      	bcc.n	8007834 <quorem+0x96>
 80077d6:	f04f 0a00 	mov.w	sl, #0
 80077da:	46c4      	mov	ip, r8
 80077dc:	46ae      	mov	lr, r5
 80077de:	46d3      	mov	fp, sl
 80077e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077e4:	b298      	uxth	r0, r3
 80077e6:	fb06 a000 	mla	r0, r6, r0, sl
 80077ea:	0c02      	lsrs	r2, r0, #16
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	fb06 2303 	mla	r3, r6, r3, r2
 80077f2:	f8de 2000 	ldr.w	r2, [lr]
 80077f6:	b280      	uxth	r0, r0
 80077f8:	b292      	uxth	r2, r2
 80077fa:	1a12      	subs	r2, r2, r0
 80077fc:	445a      	add	r2, fp
 80077fe:	f8de 0000 	ldr.w	r0, [lr]
 8007802:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007806:	b29b      	uxth	r3, r3
 8007808:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800780c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007810:	b292      	uxth	r2, r2
 8007812:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007816:	45e1      	cmp	r9, ip
 8007818:	f84e 2b04 	str.w	r2, [lr], #4
 800781c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007820:	d2de      	bcs.n	80077e0 <quorem+0x42>
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	58eb      	ldr	r3, [r5, r3]
 8007826:	b92b      	cbnz	r3, 8007834 <quorem+0x96>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	3b04      	subs	r3, #4
 800782c:	429d      	cmp	r5, r3
 800782e:	461a      	mov	r2, r3
 8007830:	d32f      	bcc.n	8007892 <quorem+0xf4>
 8007832:	613c      	str	r4, [r7, #16]
 8007834:	4638      	mov	r0, r7
 8007836:	f001 f979 	bl	8008b2c <__mcmp>
 800783a:	2800      	cmp	r0, #0
 800783c:	db25      	blt.n	800788a <quorem+0xec>
 800783e:	4629      	mov	r1, r5
 8007840:	2000      	movs	r0, #0
 8007842:	f858 2b04 	ldr.w	r2, [r8], #4
 8007846:	f8d1 c000 	ldr.w	ip, [r1]
 800784a:	fa1f fe82 	uxth.w	lr, r2
 800784e:	fa1f f38c 	uxth.w	r3, ip
 8007852:	eba3 030e 	sub.w	r3, r3, lr
 8007856:	4403      	add	r3, r0
 8007858:	0c12      	lsrs	r2, r2, #16
 800785a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800785e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007868:	45c1      	cmp	r9, r8
 800786a:	f841 3b04 	str.w	r3, [r1], #4
 800786e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007872:	d2e6      	bcs.n	8007842 <quorem+0xa4>
 8007874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007878:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800787c:	b922      	cbnz	r2, 8007888 <quorem+0xea>
 800787e:	3b04      	subs	r3, #4
 8007880:	429d      	cmp	r5, r3
 8007882:	461a      	mov	r2, r3
 8007884:	d30b      	bcc.n	800789e <quorem+0x100>
 8007886:	613c      	str	r4, [r7, #16]
 8007888:	3601      	adds	r6, #1
 800788a:	4630      	mov	r0, r6
 800788c:	b003      	add	sp, #12
 800788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007892:	6812      	ldr	r2, [r2, #0]
 8007894:	3b04      	subs	r3, #4
 8007896:	2a00      	cmp	r2, #0
 8007898:	d1cb      	bne.n	8007832 <quorem+0x94>
 800789a:	3c01      	subs	r4, #1
 800789c:	e7c6      	b.n	800782c <quorem+0x8e>
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	3b04      	subs	r3, #4
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	d1ef      	bne.n	8007886 <quorem+0xe8>
 80078a6:	3c01      	subs	r4, #1
 80078a8:	e7ea      	b.n	8007880 <quorem+0xe2>
 80078aa:	2000      	movs	r0, #0
 80078ac:	e7ee      	b.n	800788c <quorem+0xee>
	...

080078b0 <_dtoa_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	69c7      	ldr	r7, [r0, #28]
 80078b6:	b099      	sub	sp, #100	@ 0x64
 80078b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078bc:	ec55 4b10 	vmov	r4, r5, d0
 80078c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80078c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80078c4:	4683      	mov	fp, r0
 80078c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80078c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078ca:	b97f      	cbnz	r7, 80078ec <_dtoa_r+0x3c>
 80078cc:	2010      	movs	r0, #16
 80078ce:	f000 fdfd 	bl	80084cc <malloc>
 80078d2:	4602      	mov	r2, r0
 80078d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80078d8:	b920      	cbnz	r0, 80078e4 <_dtoa_r+0x34>
 80078da:	4ba7      	ldr	r3, [pc, #668]	@ (8007b78 <_dtoa_r+0x2c8>)
 80078dc:	21ef      	movs	r1, #239	@ 0xef
 80078de:	48a7      	ldr	r0, [pc, #668]	@ (8007b7c <_dtoa_r+0x2cc>)
 80078e0:	f001 fcbc 	bl	800925c <__assert_func>
 80078e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078e8:	6007      	str	r7, [r0, #0]
 80078ea:	60c7      	str	r7, [r0, #12]
 80078ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078f0:	6819      	ldr	r1, [r3, #0]
 80078f2:	b159      	cbz	r1, 800790c <_dtoa_r+0x5c>
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	604a      	str	r2, [r1, #4]
 80078f8:	2301      	movs	r3, #1
 80078fa:	4093      	lsls	r3, r2
 80078fc:	608b      	str	r3, [r1, #8]
 80078fe:	4658      	mov	r0, fp
 8007900:	f000 feda 	bl	80086b8 <_Bfree>
 8007904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	1e2b      	subs	r3, r5, #0
 800790e:	bfb9      	ittee	lt
 8007910:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007914:	9303      	strlt	r3, [sp, #12]
 8007916:	2300      	movge	r3, #0
 8007918:	6033      	strge	r3, [r6, #0]
 800791a:	9f03      	ldr	r7, [sp, #12]
 800791c:	4b98      	ldr	r3, [pc, #608]	@ (8007b80 <_dtoa_r+0x2d0>)
 800791e:	bfbc      	itt	lt
 8007920:	2201      	movlt	r2, #1
 8007922:	6032      	strlt	r2, [r6, #0]
 8007924:	43bb      	bics	r3, r7
 8007926:	d112      	bne.n	800794e <_dtoa_r+0x9e>
 8007928:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800792a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007934:	4323      	orrs	r3, r4
 8007936:	f000 854d 	beq.w	80083d4 <_dtoa_r+0xb24>
 800793a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800793c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b94 <_dtoa_r+0x2e4>
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 854f 	beq.w	80083e4 <_dtoa_r+0xb34>
 8007946:	f10a 0303 	add.w	r3, sl, #3
 800794a:	f000 bd49 	b.w	80083e0 <_dtoa_r+0xb30>
 800794e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	ec51 0b17 	vmov	r0, r1, d7
 8007958:	2300      	movs	r3, #0
 800795a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800795e:	f7f9 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007962:	4680      	mov	r8, r0
 8007964:	b158      	cbz	r0, 800797e <_dtoa_r+0xce>
 8007966:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007968:	2301      	movs	r3, #1
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800796e:	b113      	cbz	r3, 8007976 <_dtoa_r+0xc6>
 8007970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007972:	4b84      	ldr	r3, [pc, #528]	@ (8007b84 <_dtoa_r+0x2d4>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007b98 <_dtoa_r+0x2e8>
 800797a:	f000 bd33 	b.w	80083e4 <_dtoa_r+0xb34>
 800797e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007982:	aa16      	add	r2, sp, #88	@ 0x58
 8007984:	a917      	add	r1, sp, #92	@ 0x5c
 8007986:	4658      	mov	r0, fp
 8007988:	f001 f980 	bl	8008c8c <__d2b>
 800798c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007990:	4681      	mov	r9, r0
 8007992:	2e00      	cmp	r6, #0
 8007994:	d077      	beq.n	8007a86 <_dtoa_r+0x1d6>
 8007996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007998:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800799c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079b0:	4619      	mov	r1, r3
 80079b2:	2200      	movs	r2, #0
 80079b4:	4b74      	ldr	r3, [pc, #464]	@ (8007b88 <_dtoa_r+0x2d8>)
 80079b6:	f7f8 fc67 	bl	8000288 <__aeabi_dsub>
 80079ba:	a369      	add	r3, pc, #420	@ (adr r3, 8007b60 <_dtoa_r+0x2b0>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fe1a 	bl	80005f8 <__aeabi_dmul>
 80079c4:	a368      	add	r3, pc, #416	@ (adr r3, 8007b68 <_dtoa_r+0x2b8>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	f7f8 fc5f 	bl	800028c <__adddf3>
 80079ce:	4604      	mov	r4, r0
 80079d0:	4630      	mov	r0, r6
 80079d2:	460d      	mov	r5, r1
 80079d4:	f7f8 fda6 	bl	8000524 <__aeabi_i2d>
 80079d8:	a365      	add	r3, pc, #404	@ (adr r3, 8007b70 <_dtoa_r+0x2c0>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 fe0b 	bl	80005f8 <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f8 fc4f 	bl	800028c <__adddf3>
 80079ee:	4604      	mov	r4, r0
 80079f0:	460d      	mov	r5, r1
 80079f2:	f7f9 f8b1 	bl	8000b58 <__aeabi_d2iz>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4607      	mov	r7, r0
 80079fa:	2300      	movs	r3, #0
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f9 f86c 	bl	8000adc <__aeabi_dcmplt>
 8007a04:	b140      	cbz	r0, 8007a18 <_dtoa_r+0x168>
 8007a06:	4638      	mov	r0, r7
 8007a08:	f7f8 fd8c 	bl	8000524 <__aeabi_i2d>
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	462b      	mov	r3, r5
 8007a10:	f7f9 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a14:	b900      	cbnz	r0, 8007a18 <_dtoa_r+0x168>
 8007a16:	3f01      	subs	r7, #1
 8007a18:	2f16      	cmp	r7, #22
 8007a1a:	d851      	bhi.n	8007ac0 <_dtoa_r+0x210>
 8007a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007b8c <_dtoa_r+0x2dc>)
 8007a1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a2a:	f7f9 f857 	bl	8000adc <__aeabi_dcmplt>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d048      	beq.n	8007ac4 <_dtoa_r+0x214>
 8007a32:	3f01      	subs	r7, #1
 8007a34:	2300      	movs	r3, #0
 8007a36:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a3a:	1b9b      	subs	r3, r3, r6
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	bf44      	itt	mi
 8007a40:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a44:	2300      	movmi	r3, #0
 8007a46:	9208      	str	r2, [sp, #32]
 8007a48:	bf54      	ite	pl
 8007a4a:	f04f 0800 	movpl.w	r8, #0
 8007a4e:	9308      	strmi	r3, [sp, #32]
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	db39      	blt.n	8007ac8 <_dtoa_r+0x218>
 8007a54:	9b08      	ldr	r3, [sp, #32]
 8007a56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a58:	443b      	add	r3, r7
 8007a5a:	9308      	str	r3, [sp, #32]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d864      	bhi.n	8007b30 <_dtoa_r+0x280>
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	bfc4      	itt	gt
 8007a6a:	3b04      	subgt	r3, #4
 8007a6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a70:	f1a3 0302 	sub.w	r3, r3, #2
 8007a74:	bfcc      	ite	gt
 8007a76:	2400      	movgt	r4, #0
 8007a78:	2401      	movle	r4, #1
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d863      	bhi.n	8007b46 <_dtoa_r+0x296>
 8007a7e:	e8df f003 	tbb	[pc, r3]
 8007a82:	372a      	.short	0x372a
 8007a84:	5535      	.short	0x5535
 8007a86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a8a:	441e      	add	r6, r3
 8007a8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	bfc1      	itttt	gt
 8007a94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a98:	409f      	lslgt	r7, r3
 8007a9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007aa2:	bfd6      	itet	le
 8007aa4:	f1c3 0320 	rsble	r3, r3, #32
 8007aa8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007aac:	fa04 f003 	lslle.w	r0, r4, r3
 8007ab0:	f7f8 fd28 	bl	8000504 <__aeabi_ui2d>
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007aba:	3e01      	subs	r6, #1
 8007abc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007abe:	e777      	b.n	80079b0 <_dtoa_r+0x100>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7b8      	b.n	8007a36 <_dtoa_r+0x186>
 8007ac4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ac6:	e7b7      	b.n	8007a38 <_dtoa_r+0x188>
 8007ac8:	427b      	negs	r3, r7
 8007aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007acc:	2300      	movs	r3, #0
 8007ace:	eba8 0807 	sub.w	r8, r8, r7
 8007ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ad4:	e7c4      	b.n	8007a60 <_dtoa_r+0x1b0>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dc35      	bgt.n	8007b4c <_dtoa_r+0x29c>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	9307      	str	r3, [sp, #28]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aea:	e00b      	b.n	8007b04 <_dtoa_r+0x254>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7f3      	b.n	8007ad8 <_dtoa_r+0x228>
 8007af0:	2300      	movs	r3, #0
 8007af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007af4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007af6:	18fb      	adds	r3, r7, r3
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	bfb8      	it	lt
 8007b02:	2301      	movlt	r3, #1
 8007b04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b08:	2100      	movs	r1, #0
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	f102 0514 	add.w	r5, r2, #20
 8007b10:	429d      	cmp	r5, r3
 8007b12:	d91f      	bls.n	8007b54 <_dtoa_r+0x2a4>
 8007b14:	6041      	str	r1, [r0, #4]
 8007b16:	4658      	mov	r0, fp
 8007b18:	f000 fd8e 	bl	8008638 <_Balloc>
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d13c      	bne.n	8007b9c <_dtoa_r+0x2ec>
 8007b22:	4b1b      	ldr	r3, [pc, #108]	@ (8007b90 <_dtoa_r+0x2e0>)
 8007b24:	4602      	mov	r2, r0
 8007b26:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b2a:	e6d8      	b.n	80078de <_dtoa_r+0x2e>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e7e0      	b.n	8007af2 <_dtoa_r+0x242>
 8007b30:	2401      	movs	r4, #1
 8007b32:	2300      	movs	r3, #0
 8007b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	2200      	movs	r2, #0
 8007b42:	2312      	movs	r3, #18
 8007b44:	e7d0      	b.n	8007ae8 <_dtoa_r+0x238>
 8007b46:	2301      	movs	r3, #1
 8007b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b4a:	e7f5      	b.n	8007b38 <_dtoa_r+0x288>
 8007b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	9307      	str	r3, [sp, #28]
 8007b52:	e7d7      	b.n	8007b04 <_dtoa_r+0x254>
 8007b54:	3101      	adds	r1, #1
 8007b56:	0052      	lsls	r2, r2, #1
 8007b58:	e7d8      	b.n	8007b0c <_dtoa_r+0x25c>
 8007b5a:	bf00      	nop
 8007b5c:	f3af 8000 	nop.w
 8007b60:	636f4361 	.word	0x636f4361
 8007b64:	3fd287a7 	.word	0x3fd287a7
 8007b68:	8b60c8b3 	.word	0x8b60c8b3
 8007b6c:	3fc68a28 	.word	0x3fc68a28
 8007b70:	509f79fb 	.word	0x509f79fb
 8007b74:	3fd34413 	.word	0x3fd34413
 8007b78:	08009539 	.word	0x08009539
 8007b7c:	08009550 	.word	0x08009550
 8007b80:	7ff00000 	.word	0x7ff00000
 8007b84:	08009509 	.word	0x08009509
 8007b88:	3ff80000 	.word	0x3ff80000
 8007b8c:	08009648 	.word	0x08009648
 8007b90:	080095a8 	.word	0x080095a8
 8007b94:	08009535 	.word	0x08009535
 8007b98:	08009508 	.word	0x08009508
 8007b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ba0:	6018      	str	r0, [r3, #0]
 8007ba2:	9b07      	ldr	r3, [sp, #28]
 8007ba4:	2b0e      	cmp	r3, #14
 8007ba6:	f200 80a4 	bhi.w	8007cf2 <_dtoa_r+0x442>
 8007baa:	2c00      	cmp	r4, #0
 8007bac:	f000 80a1 	beq.w	8007cf2 <_dtoa_r+0x442>
 8007bb0:	2f00      	cmp	r7, #0
 8007bb2:	dd33      	ble.n	8007c1c <_dtoa_r+0x36c>
 8007bb4:	4bad      	ldr	r3, [pc, #692]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007bb6:	f007 020f 	and.w	r2, r7, #15
 8007bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bbe:	ed93 7b00 	vldr	d7, [r3]
 8007bc2:	05f8      	lsls	r0, r7, #23
 8007bc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007bc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007bcc:	d516      	bpl.n	8007bfc <_dtoa_r+0x34c>
 8007bce:	4ba8      	ldr	r3, [pc, #672]	@ (8007e70 <_dtoa_r+0x5c0>)
 8007bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bd8:	f7f8 fe38 	bl	800084c <__aeabi_ddiv>
 8007bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be0:	f004 040f 	and.w	r4, r4, #15
 8007be4:	2603      	movs	r6, #3
 8007be6:	4da2      	ldr	r5, [pc, #648]	@ (8007e70 <_dtoa_r+0x5c0>)
 8007be8:	b954      	cbnz	r4, 8007c00 <_dtoa_r+0x350>
 8007bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf2:	f7f8 fe2b 	bl	800084c <__aeabi_ddiv>
 8007bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfa:	e028      	b.n	8007c4e <_dtoa_r+0x39e>
 8007bfc:	2602      	movs	r6, #2
 8007bfe:	e7f2      	b.n	8007be6 <_dtoa_r+0x336>
 8007c00:	07e1      	lsls	r1, r4, #31
 8007c02:	d508      	bpl.n	8007c16 <_dtoa_r+0x366>
 8007c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c0c:	f7f8 fcf4 	bl	80005f8 <__aeabi_dmul>
 8007c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c14:	3601      	adds	r6, #1
 8007c16:	1064      	asrs	r4, r4, #1
 8007c18:	3508      	adds	r5, #8
 8007c1a:	e7e5      	b.n	8007be8 <_dtoa_r+0x338>
 8007c1c:	f000 80d2 	beq.w	8007dc4 <_dtoa_r+0x514>
 8007c20:	427c      	negs	r4, r7
 8007c22:	4b92      	ldr	r3, [pc, #584]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007c24:	4d92      	ldr	r5, [pc, #584]	@ (8007e70 <_dtoa_r+0x5c0>)
 8007c26:	f004 020f 	and.w	r2, r4, #15
 8007c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c36:	f7f8 fcdf 	bl	80005f8 <__aeabi_dmul>
 8007c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c3e:	1124      	asrs	r4, r4, #4
 8007c40:	2300      	movs	r3, #0
 8007c42:	2602      	movs	r6, #2
 8007c44:	2c00      	cmp	r4, #0
 8007c46:	f040 80b2 	bne.w	8007dae <_dtoa_r+0x4fe>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d3      	bne.n	8007bf6 <_dtoa_r+0x346>
 8007c4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80b7 	beq.w	8007dc8 <_dtoa_r+0x518>
 8007c5a:	4b86      	ldr	r3, [pc, #536]	@ (8007e74 <_dtoa_r+0x5c4>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 ff3b 	bl	8000adc <__aeabi_dcmplt>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f000 80ae 	beq.w	8007dc8 <_dtoa_r+0x518>
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 80aa 	beq.w	8007dc8 <_dtoa_r+0x518>
 8007c74:	9b00      	ldr	r3, [sp, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	dd37      	ble.n	8007cea <_dtoa_r+0x43a>
 8007c7a:	1e7b      	subs	r3, r7, #1
 8007c7c:	9304      	str	r3, [sp, #16]
 8007c7e:	4620      	mov	r0, r4
 8007c80:	4b7d      	ldr	r3, [pc, #500]	@ (8007e78 <_dtoa_r+0x5c8>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 fcb7 	bl	80005f8 <__aeabi_dmul>
 8007c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c8e:	9c00      	ldr	r4, [sp, #0]
 8007c90:	3601      	adds	r6, #1
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7f8 fc46 	bl	8000524 <__aeabi_i2d>
 8007c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c9c:	f7f8 fcac 	bl	80005f8 <__aeabi_dmul>
 8007ca0:	4b76      	ldr	r3, [pc, #472]	@ (8007e7c <_dtoa_r+0x5cc>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f7f8 faf2 	bl	800028c <__adddf3>
 8007ca8:	4605      	mov	r5, r0
 8007caa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	f040 808d 	bne.w	8007dce <_dtoa_r+0x51e>
 8007cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb8:	4b71      	ldr	r3, [pc, #452]	@ (8007e80 <_dtoa_r+0x5d0>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f7f8 fae4 	bl	8000288 <__aeabi_dsub>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cc8:	462a      	mov	r2, r5
 8007cca:	4633      	mov	r3, r6
 8007ccc:	f7f8 ff24 	bl	8000b18 <__aeabi_dcmpgt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	f040 828b 	bne.w	80081ec <_dtoa_r+0x93c>
 8007cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cda:	462a      	mov	r2, r5
 8007cdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ce0:	f7f8 fefc 	bl	8000adc <__aeabi_dcmplt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 8128 	bne.w	8007f3a <_dtoa_r+0x68a>
 8007cea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f2c0 815a 	blt.w	8007fae <_dtoa_r+0x6fe>
 8007cfa:	2f0e      	cmp	r7, #14
 8007cfc:	f300 8157 	bgt.w	8007fae <_dtoa_r+0x6fe>
 8007d00:	4b5a      	ldr	r3, [pc, #360]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007d02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d06:	ed93 7b00 	vldr	d7, [r3]
 8007d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	ed8d 7b00 	vstr	d7, [sp]
 8007d12:	da03      	bge.n	8007d1c <_dtoa_r+0x46c>
 8007d14:	9b07      	ldr	r3, [sp, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f340 8101 	ble.w	8007f1e <_dtoa_r+0x66e>
 8007d1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d20:	4656      	mov	r6, sl
 8007d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fd8f 	bl	800084c <__aeabi_ddiv>
 8007d2e:	f7f8 ff13 	bl	8000b58 <__aeabi_d2iz>
 8007d32:	4680      	mov	r8, r0
 8007d34:	f7f8 fbf6 	bl	8000524 <__aeabi_i2d>
 8007d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d3c:	f7f8 fc5c 	bl	80005f8 <__aeabi_dmul>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d4c:	f7f8 fa9c 	bl	8000288 <__aeabi_dsub>
 8007d50:	f806 4b01 	strb.w	r4, [r6], #1
 8007d54:	9d07      	ldr	r5, [sp, #28]
 8007d56:	eba6 040a 	sub.w	r4, r6, sl
 8007d5a:	42a5      	cmp	r5, r4
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	f040 8117 	bne.w	8007f92 <_dtoa_r+0x6e2>
 8007d64:	f7f8 fa92 	bl	800028c <__adddf3>
 8007d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	460d      	mov	r5, r1
 8007d70:	f7f8 fed2 	bl	8000b18 <__aeabi_dcmpgt>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f040 80f9 	bne.w	8007f6c <_dtoa_r+0x6bc>
 8007d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	4629      	mov	r1, r5
 8007d82:	f7f8 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d86:	b118      	cbz	r0, 8007d90 <_dtoa_r+0x4e0>
 8007d88:	f018 0f01 	tst.w	r8, #1
 8007d8c:	f040 80ee 	bne.w	8007f6c <_dtoa_r+0x6bc>
 8007d90:	4649      	mov	r1, r9
 8007d92:	4658      	mov	r0, fp
 8007d94:	f000 fc90 	bl	80086b8 <_Bfree>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	7033      	strb	r3, [r6, #0]
 8007d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d9e:	3701      	adds	r7, #1
 8007da0:	601f      	str	r7, [r3, #0]
 8007da2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 831d 	beq.w	80083e4 <_dtoa_r+0xb34>
 8007daa:	601e      	str	r6, [r3, #0]
 8007dac:	e31a      	b.n	80083e4 <_dtoa_r+0xb34>
 8007dae:	07e2      	lsls	r2, r4, #31
 8007db0:	d505      	bpl.n	8007dbe <_dtoa_r+0x50e>
 8007db2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007db6:	f7f8 fc1f 	bl	80005f8 <__aeabi_dmul>
 8007dba:	3601      	adds	r6, #1
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	1064      	asrs	r4, r4, #1
 8007dc0:	3508      	adds	r5, #8
 8007dc2:	e73f      	b.n	8007c44 <_dtoa_r+0x394>
 8007dc4:	2602      	movs	r6, #2
 8007dc6:	e742      	b.n	8007c4e <_dtoa_r+0x39e>
 8007dc8:	9c07      	ldr	r4, [sp, #28]
 8007dca:	9704      	str	r7, [sp, #16]
 8007dcc:	e761      	b.n	8007c92 <_dtoa_r+0x3e2>
 8007dce:	4b27      	ldr	r3, [pc, #156]	@ (8007e6c <_dtoa_r+0x5bc>)
 8007dd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dda:	4454      	add	r4, sl
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	d053      	beq.n	8007e88 <_dtoa_r+0x5d8>
 8007de0:	4928      	ldr	r1, [pc, #160]	@ (8007e84 <_dtoa_r+0x5d4>)
 8007de2:	2000      	movs	r0, #0
 8007de4:	f7f8 fd32 	bl	800084c <__aeabi_ddiv>
 8007de8:	4633      	mov	r3, r6
 8007dea:	462a      	mov	r2, r5
 8007dec:	f7f8 fa4c 	bl	8000288 <__aeabi_dsub>
 8007df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007df4:	4656      	mov	r6, sl
 8007df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfa:	f7f8 fead 	bl	8000b58 <__aeabi_d2iz>
 8007dfe:	4605      	mov	r5, r0
 8007e00:	f7f8 fb90 	bl	8000524 <__aeabi_i2d>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e0c:	f7f8 fa3c 	bl	8000288 <__aeabi_dsub>
 8007e10:	3530      	adds	r5, #48	@ 0x30
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e1a:	f806 5b01 	strb.w	r5, [r6], #1
 8007e1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e22:	f7f8 fe5b 	bl	8000adc <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d171      	bne.n	8007f0e <_dtoa_r+0x65e>
 8007e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e2e:	4911      	ldr	r1, [pc, #68]	@ (8007e74 <_dtoa_r+0x5c4>)
 8007e30:	2000      	movs	r0, #0
 8007e32:	f7f8 fa29 	bl	8000288 <__aeabi_dsub>
 8007e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e3a:	f7f8 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f040 8095 	bne.w	8007f6e <_dtoa_r+0x6be>
 8007e44:	42a6      	cmp	r6, r4
 8007e46:	f43f af50 	beq.w	8007cea <_dtoa_r+0x43a>
 8007e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e78 <_dtoa_r+0x5c8>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	f7f8 fbd1 	bl	80005f8 <__aeabi_dmul>
 8007e56:	4b08      	ldr	r3, [pc, #32]	@ (8007e78 <_dtoa_r+0x5c8>)
 8007e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e62:	f7f8 fbc9 	bl	80005f8 <__aeabi_dmul>
 8007e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e6a:	e7c4      	b.n	8007df6 <_dtoa_r+0x546>
 8007e6c:	08009648 	.word	0x08009648
 8007e70:	08009620 	.word	0x08009620
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	40240000 	.word	0x40240000
 8007e7c:	401c0000 	.word	0x401c0000
 8007e80:	40140000 	.word	0x40140000
 8007e84:	3fe00000 	.word	0x3fe00000
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7f8 fbb4 	bl	80005f8 <__aeabi_dmul>
 8007e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e94:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e96:	4656      	mov	r6, sl
 8007e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e9c:	f7f8 fe5c 	bl	8000b58 <__aeabi_d2iz>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	f7f8 fb3f 	bl	8000524 <__aeabi_i2d>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eae:	f7f8 f9eb 	bl	8000288 <__aeabi_dsub>
 8007eb2:	3530      	adds	r5, #48	@ 0x30
 8007eb4:	f806 5b01 	strb.w	r5, [r6], #1
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	42a6      	cmp	r6, r4
 8007ebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	d124      	bne.n	8007f12 <_dtoa_r+0x662>
 8007ec8:	4bac      	ldr	r3, [pc, #688]	@ (800817c <_dtoa_r+0x8cc>)
 8007eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ece:	f7f8 f9dd 	bl	800028c <__adddf3>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eda:	f7f8 fe1d 	bl	8000b18 <__aeabi_dcmpgt>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d145      	bne.n	8007f6e <_dtoa_r+0x6be>
 8007ee2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ee6:	49a5      	ldr	r1, [pc, #660]	@ (800817c <_dtoa_r+0x8cc>)
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f7f8 f9cd 	bl	8000288 <__aeabi_dsub>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef6:	f7f8 fdf1 	bl	8000adc <__aeabi_dcmplt>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f43f aef5 	beq.w	8007cea <_dtoa_r+0x43a>
 8007f00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f02:	1e73      	subs	r3, r6, #1
 8007f04:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f0a:	2b30      	cmp	r3, #48	@ 0x30
 8007f0c:	d0f8      	beq.n	8007f00 <_dtoa_r+0x650>
 8007f0e:	9f04      	ldr	r7, [sp, #16]
 8007f10:	e73e      	b.n	8007d90 <_dtoa_r+0x4e0>
 8007f12:	4b9b      	ldr	r3, [pc, #620]	@ (8008180 <_dtoa_r+0x8d0>)
 8007f14:	f7f8 fb70 	bl	80005f8 <__aeabi_dmul>
 8007f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f1c:	e7bc      	b.n	8007e98 <_dtoa_r+0x5e8>
 8007f1e:	d10c      	bne.n	8007f3a <_dtoa_r+0x68a>
 8007f20:	4b98      	ldr	r3, [pc, #608]	@ (8008184 <_dtoa_r+0x8d4>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f28:	f7f8 fb66 	bl	80005f8 <__aeabi_dmul>
 8007f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f30:	f7f8 fde8 	bl	8000b04 <__aeabi_dcmpge>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f000 8157 	beq.w	80081e8 <_dtoa_r+0x938>
 8007f3a:	2400      	movs	r4, #0
 8007f3c:	4625      	mov	r5, r4
 8007f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f40:	43db      	mvns	r3, r3
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	4656      	mov	r6, sl
 8007f46:	2700      	movs	r7, #0
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4658      	mov	r0, fp
 8007f4c:	f000 fbb4 	bl	80086b8 <_Bfree>
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	d0dc      	beq.n	8007f0e <_dtoa_r+0x65e>
 8007f54:	b12f      	cbz	r7, 8007f62 <_dtoa_r+0x6b2>
 8007f56:	42af      	cmp	r7, r5
 8007f58:	d003      	beq.n	8007f62 <_dtoa_r+0x6b2>
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	f000 fbab 	bl	80086b8 <_Bfree>
 8007f62:	4629      	mov	r1, r5
 8007f64:	4658      	mov	r0, fp
 8007f66:	f000 fba7 	bl	80086b8 <_Bfree>
 8007f6a:	e7d0      	b.n	8007f0e <_dtoa_r+0x65e>
 8007f6c:	9704      	str	r7, [sp, #16]
 8007f6e:	4633      	mov	r3, r6
 8007f70:	461e      	mov	r6, r3
 8007f72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f76:	2a39      	cmp	r2, #57	@ 0x39
 8007f78:	d107      	bne.n	8007f8a <_dtoa_r+0x6da>
 8007f7a:	459a      	cmp	sl, r3
 8007f7c:	d1f8      	bne.n	8007f70 <_dtoa_r+0x6c0>
 8007f7e:	9a04      	ldr	r2, [sp, #16]
 8007f80:	3201      	adds	r2, #1
 8007f82:	9204      	str	r2, [sp, #16]
 8007f84:	2230      	movs	r2, #48	@ 0x30
 8007f86:	f88a 2000 	strb.w	r2, [sl]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	3201      	adds	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e7bd      	b.n	8007f0e <_dtoa_r+0x65e>
 8007f92:	4b7b      	ldr	r3, [pc, #492]	@ (8008180 <_dtoa_r+0x8d0>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	f7f8 fb2f 	bl	80005f8 <__aeabi_dmul>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	f7f8 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f43f aebb 	beq.w	8007d22 <_dtoa_r+0x472>
 8007fac:	e6f0      	b.n	8007d90 <_dtoa_r+0x4e0>
 8007fae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007fb0:	2a00      	cmp	r2, #0
 8007fb2:	f000 80db 	beq.w	800816c <_dtoa_r+0x8bc>
 8007fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fb8:	2a01      	cmp	r2, #1
 8007fba:	f300 80bf 	bgt.w	800813c <_dtoa_r+0x88c>
 8007fbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007fc0:	2a00      	cmp	r2, #0
 8007fc2:	f000 80b7 	beq.w	8008134 <_dtoa_r+0x884>
 8007fc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007fca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fcc:	4646      	mov	r6, r8
 8007fce:	9a08      	ldr	r2, [sp, #32]
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	441a      	add	r2, r3
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	4498      	add	r8, r3
 8007fd8:	9208      	str	r2, [sp, #32]
 8007fda:	f000 fc21 	bl	8008820 <__i2b>
 8007fde:	4605      	mov	r5, r0
 8007fe0:	b15e      	cbz	r6, 8007ffa <_dtoa_r+0x74a>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dd08      	ble.n	8007ffa <_dtoa_r+0x74a>
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	9a08      	ldr	r2, [sp, #32]
 8007fec:	bfa8      	it	ge
 8007fee:	4633      	movge	r3, r6
 8007ff0:	eba8 0803 	sub.w	r8, r8, r3
 8007ff4:	1af6      	subs	r6, r6, r3
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	9308      	str	r3, [sp, #32]
 8007ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ffc:	b1f3      	cbz	r3, 800803c <_dtoa_r+0x78c>
 8007ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 80b7 	beq.w	8008174 <_dtoa_r+0x8c4>
 8008006:	b18c      	cbz	r4, 800802c <_dtoa_r+0x77c>
 8008008:	4629      	mov	r1, r5
 800800a:	4622      	mov	r2, r4
 800800c:	4658      	mov	r0, fp
 800800e:	f000 fcc7 	bl	80089a0 <__pow5mult>
 8008012:	464a      	mov	r2, r9
 8008014:	4601      	mov	r1, r0
 8008016:	4605      	mov	r5, r0
 8008018:	4658      	mov	r0, fp
 800801a:	f000 fc17 	bl	800884c <__multiply>
 800801e:	4649      	mov	r1, r9
 8008020:	9004      	str	r0, [sp, #16]
 8008022:	4658      	mov	r0, fp
 8008024:	f000 fb48 	bl	80086b8 <_Bfree>
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	4699      	mov	r9, r3
 800802c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800802e:	1b1a      	subs	r2, r3, r4
 8008030:	d004      	beq.n	800803c <_dtoa_r+0x78c>
 8008032:	4649      	mov	r1, r9
 8008034:	4658      	mov	r0, fp
 8008036:	f000 fcb3 	bl	80089a0 <__pow5mult>
 800803a:	4681      	mov	r9, r0
 800803c:	2101      	movs	r1, #1
 800803e:	4658      	mov	r0, fp
 8008040:	f000 fbee 	bl	8008820 <__i2b>
 8008044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008046:	4604      	mov	r4, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 81cf 	beq.w	80083ec <_dtoa_r+0xb3c>
 800804e:	461a      	mov	r2, r3
 8008050:	4601      	mov	r1, r0
 8008052:	4658      	mov	r0, fp
 8008054:	f000 fca4 	bl	80089a0 <__pow5mult>
 8008058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805a:	2b01      	cmp	r3, #1
 800805c:	4604      	mov	r4, r0
 800805e:	f300 8095 	bgt.w	800818c <_dtoa_r+0x8dc>
 8008062:	9b02      	ldr	r3, [sp, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f040 8087 	bne.w	8008178 <_dtoa_r+0x8c8>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 8089 	bne.w	8008188 <_dtoa_r+0x8d8>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800807c:	0d1b      	lsrs	r3, r3, #20
 800807e:	051b      	lsls	r3, r3, #20
 8008080:	b12b      	cbz	r3, 800808e <_dtoa_r+0x7de>
 8008082:	9b08      	ldr	r3, [sp, #32]
 8008084:	3301      	adds	r3, #1
 8008086:	9308      	str	r3, [sp, #32]
 8008088:	f108 0801 	add.w	r8, r8, #1
 800808c:	2301      	movs	r3, #1
 800808e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 81b0 	beq.w	80083f8 <_dtoa_r+0xb48>
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800809e:	6918      	ldr	r0, [r3, #16]
 80080a0:	f000 fb72 	bl	8008788 <__hi0bits>
 80080a4:	f1c0 0020 	rsb	r0, r0, #32
 80080a8:	9b08      	ldr	r3, [sp, #32]
 80080aa:	4418      	add	r0, r3
 80080ac:	f010 001f 	ands.w	r0, r0, #31
 80080b0:	d077      	beq.n	80081a2 <_dtoa_r+0x8f2>
 80080b2:	f1c0 0320 	rsb	r3, r0, #32
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	dd6b      	ble.n	8008192 <_dtoa_r+0x8e2>
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	f1c0 001c 	rsb	r0, r0, #28
 80080c0:	4403      	add	r3, r0
 80080c2:	4480      	add	r8, r0
 80080c4:	4406      	add	r6, r0
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	f1b8 0f00 	cmp.w	r8, #0
 80080cc:	dd05      	ble.n	80080da <_dtoa_r+0x82a>
 80080ce:	4649      	mov	r1, r9
 80080d0:	4642      	mov	r2, r8
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fcbe 	bl	8008a54 <__lshift>
 80080d8:	4681      	mov	r9, r0
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd05      	ble.n	80080ec <_dtoa_r+0x83c>
 80080e0:	4621      	mov	r1, r4
 80080e2:	461a      	mov	r2, r3
 80080e4:	4658      	mov	r0, fp
 80080e6:	f000 fcb5 	bl	8008a54 <__lshift>
 80080ea:	4604      	mov	r4, r0
 80080ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d059      	beq.n	80081a6 <_dtoa_r+0x8f6>
 80080f2:	4621      	mov	r1, r4
 80080f4:	4648      	mov	r0, r9
 80080f6:	f000 fd19 	bl	8008b2c <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	da53      	bge.n	80081a6 <_dtoa_r+0x8f6>
 80080fe:	1e7b      	subs	r3, r7, #1
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	4649      	mov	r1, r9
 8008104:	2300      	movs	r3, #0
 8008106:	220a      	movs	r2, #10
 8008108:	4658      	mov	r0, fp
 800810a:	f000 faf7 	bl	80086fc <__multadd>
 800810e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008110:	4681      	mov	r9, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8172 	beq.w	80083fc <_dtoa_r+0xb4c>
 8008118:	2300      	movs	r3, #0
 800811a:	4629      	mov	r1, r5
 800811c:	220a      	movs	r2, #10
 800811e:	4658      	mov	r0, fp
 8008120:	f000 faec 	bl	80086fc <__multadd>
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	4605      	mov	r5, r0
 800812a:	dc67      	bgt.n	80081fc <_dtoa_r+0x94c>
 800812c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812e:	2b02      	cmp	r3, #2
 8008130:	dc41      	bgt.n	80081b6 <_dtoa_r+0x906>
 8008132:	e063      	b.n	80081fc <_dtoa_r+0x94c>
 8008134:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008136:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800813a:	e746      	b.n	8007fca <_dtoa_r+0x71a>
 800813c:	9b07      	ldr	r3, [sp, #28]
 800813e:	1e5c      	subs	r4, r3, #1
 8008140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008142:	42a3      	cmp	r3, r4
 8008144:	bfbf      	itttt	lt
 8008146:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008148:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800814a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800814c:	1ae3      	sublt	r3, r4, r3
 800814e:	bfb4      	ite	lt
 8008150:	18d2      	addlt	r2, r2, r3
 8008152:	1b1c      	subge	r4, r3, r4
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	bfbc      	itt	lt
 8008158:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800815a:	2400      	movlt	r4, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	bfb5      	itete	lt
 8008160:	eba8 0603 	sublt.w	r6, r8, r3
 8008164:	9b07      	ldrge	r3, [sp, #28]
 8008166:	2300      	movlt	r3, #0
 8008168:	4646      	movge	r6, r8
 800816a:	e730      	b.n	8007fce <_dtoa_r+0x71e>
 800816c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800816e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008170:	4646      	mov	r6, r8
 8008172:	e735      	b.n	8007fe0 <_dtoa_r+0x730>
 8008174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008176:	e75c      	b.n	8008032 <_dtoa_r+0x782>
 8008178:	2300      	movs	r3, #0
 800817a:	e788      	b.n	800808e <_dtoa_r+0x7de>
 800817c:	3fe00000 	.word	0x3fe00000
 8008180:	40240000 	.word	0x40240000
 8008184:	40140000 	.word	0x40140000
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	e780      	b.n	800808e <_dtoa_r+0x7de>
 800818c:	2300      	movs	r3, #0
 800818e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008190:	e782      	b.n	8008098 <_dtoa_r+0x7e8>
 8008192:	d099      	beq.n	80080c8 <_dtoa_r+0x818>
 8008194:	9a08      	ldr	r2, [sp, #32]
 8008196:	331c      	adds	r3, #28
 8008198:	441a      	add	r2, r3
 800819a:	4498      	add	r8, r3
 800819c:	441e      	add	r6, r3
 800819e:	9208      	str	r2, [sp, #32]
 80081a0:	e792      	b.n	80080c8 <_dtoa_r+0x818>
 80081a2:	4603      	mov	r3, r0
 80081a4:	e7f6      	b.n	8008194 <_dtoa_r+0x8e4>
 80081a6:	9b07      	ldr	r3, [sp, #28]
 80081a8:	9704      	str	r7, [sp, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dc20      	bgt.n	80081f0 <_dtoa_r+0x940>
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	dd1e      	ble.n	80081f4 <_dtoa_r+0x944>
 80081b6:	9b00      	ldr	r3, [sp, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f47f aec0 	bne.w	8007f3e <_dtoa_r+0x68e>
 80081be:	4621      	mov	r1, r4
 80081c0:	2205      	movs	r2, #5
 80081c2:	4658      	mov	r0, fp
 80081c4:	f000 fa9a 	bl	80086fc <__multadd>
 80081c8:	4601      	mov	r1, r0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4648      	mov	r0, r9
 80081ce:	f000 fcad 	bl	8008b2c <__mcmp>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f77f aeb3 	ble.w	8007f3e <_dtoa_r+0x68e>
 80081d8:	4656      	mov	r6, sl
 80081da:	2331      	movs	r3, #49	@ 0x31
 80081dc:	f806 3b01 	strb.w	r3, [r6], #1
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	3301      	adds	r3, #1
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	e6ae      	b.n	8007f46 <_dtoa_r+0x696>
 80081e8:	9c07      	ldr	r4, [sp, #28]
 80081ea:	9704      	str	r7, [sp, #16]
 80081ec:	4625      	mov	r5, r4
 80081ee:	e7f3      	b.n	80081d8 <_dtoa_r+0x928>
 80081f0:	9b07      	ldr	r3, [sp, #28]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 8104 	beq.w	8008404 <_dtoa_r+0xb54>
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	dd05      	ble.n	800820c <_dtoa_r+0x95c>
 8008200:	4629      	mov	r1, r5
 8008202:	4632      	mov	r2, r6
 8008204:	4658      	mov	r0, fp
 8008206:	f000 fc25 	bl	8008a54 <__lshift>
 800820a:	4605      	mov	r5, r0
 800820c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d05a      	beq.n	80082c8 <_dtoa_r+0xa18>
 8008212:	6869      	ldr	r1, [r5, #4]
 8008214:	4658      	mov	r0, fp
 8008216:	f000 fa0f 	bl	8008638 <_Balloc>
 800821a:	4606      	mov	r6, r0
 800821c:	b928      	cbnz	r0, 800822a <_dtoa_r+0x97a>
 800821e:	4b84      	ldr	r3, [pc, #528]	@ (8008430 <_dtoa_r+0xb80>)
 8008220:	4602      	mov	r2, r0
 8008222:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008226:	f7ff bb5a 	b.w	80078de <_dtoa_r+0x2e>
 800822a:	692a      	ldr	r2, [r5, #16]
 800822c:	3202      	adds	r2, #2
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	f105 010c 	add.w	r1, r5, #12
 8008234:	300c      	adds	r0, #12
 8008236:	f001 f803 	bl	8009240 <memcpy>
 800823a:	2201      	movs	r2, #1
 800823c:	4631      	mov	r1, r6
 800823e:	4658      	mov	r0, fp
 8008240:	f000 fc08 	bl	8008a54 <__lshift>
 8008244:	f10a 0301 	add.w	r3, sl, #1
 8008248:	9307      	str	r3, [sp, #28]
 800824a:	9b00      	ldr	r3, [sp, #0]
 800824c:	4453      	add	r3, sl
 800824e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	462f      	mov	r7, r5
 8008258:	930a      	str	r3, [sp, #40]	@ 0x28
 800825a:	4605      	mov	r5, r0
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	4621      	mov	r1, r4
 8008260:	3b01      	subs	r3, #1
 8008262:	4648      	mov	r0, r9
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	f7ff fa9a 	bl	800779e <quorem>
 800826a:	4639      	mov	r1, r7
 800826c:	9002      	str	r0, [sp, #8]
 800826e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008272:	4648      	mov	r0, r9
 8008274:	f000 fc5a 	bl	8008b2c <__mcmp>
 8008278:	462a      	mov	r2, r5
 800827a:	9008      	str	r0, [sp, #32]
 800827c:	4621      	mov	r1, r4
 800827e:	4658      	mov	r0, fp
 8008280:	f000 fc70 	bl	8008b64 <__mdiff>
 8008284:	68c2      	ldr	r2, [r0, #12]
 8008286:	4606      	mov	r6, r0
 8008288:	bb02      	cbnz	r2, 80082cc <_dtoa_r+0xa1c>
 800828a:	4601      	mov	r1, r0
 800828c:	4648      	mov	r0, r9
 800828e:	f000 fc4d 	bl	8008b2c <__mcmp>
 8008292:	4602      	mov	r2, r0
 8008294:	4631      	mov	r1, r6
 8008296:	4658      	mov	r0, fp
 8008298:	920e      	str	r2, [sp, #56]	@ 0x38
 800829a:	f000 fa0d 	bl	80086b8 <_Bfree>
 800829e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082a2:	9e07      	ldr	r6, [sp, #28]
 80082a4:	ea43 0102 	orr.w	r1, r3, r2
 80082a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082aa:	4319      	orrs	r1, r3
 80082ac:	d110      	bne.n	80082d0 <_dtoa_r+0xa20>
 80082ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082b2:	d029      	beq.n	8008308 <_dtoa_r+0xa58>
 80082b4:	9b08      	ldr	r3, [sp, #32]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dd02      	ble.n	80082c0 <_dtoa_r+0xa10>
 80082ba:	9b02      	ldr	r3, [sp, #8]
 80082bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80082c0:	9b00      	ldr	r3, [sp, #0]
 80082c2:	f883 8000 	strb.w	r8, [r3]
 80082c6:	e63f      	b.n	8007f48 <_dtoa_r+0x698>
 80082c8:	4628      	mov	r0, r5
 80082ca:	e7bb      	b.n	8008244 <_dtoa_r+0x994>
 80082cc:	2201      	movs	r2, #1
 80082ce:	e7e1      	b.n	8008294 <_dtoa_r+0x9e4>
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	db04      	blt.n	80082e0 <_dtoa_r+0xa30>
 80082d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082d8:	430b      	orrs	r3, r1
 80082da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082dc:	430b      	orrs	r3, r1
 80082de:	d120      	bne.n	8008322 <_dtoa_r+0xa72>
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	dded      	ble.n	80082c0 <_dtoa_r+0xa10>
 80082e4:	4649      	mov	r1, r9
 80082e6:	2201      	movs	r2, #1
 80082e8:	4658      	mov	r0, fp
 80082ea:	f000 fbb3 	bl	8008a54 <__lshift>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4681      	mov	r9, r0
 80082f2:	f000 fc1b 	bl	8008b2c <__mcmp>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	dc03      	bgt.n	8008302 <_dtoa_r+0xa52>
 80082fa:	d1e1      	bne.n	80082c0 <_dtoa_r+0xa10>
 80082fc:	f018 0f01 	tst.w	r8, #1
 8008300:	d0de      	beq.n	80082c0 <_dtoa_r+0xa10>
 8008302:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008306:	d1d8      	bne.n	80082ba <_dtoa_r+0xa0a>
 8008308:	9a00      	ldr	r2, [sp, #0]
 800830a:	2339      	movs	r3, #57	@ 0x39
 800830c:	7013      	strb	r3, [r2, #0]
 800830e:	4633      	mov	r3, r6
 8008310:	461e      	mov	r6, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008318:	2a39      	cmp	r2, #57	@ 0x39
 800831a:	d052      	beq.n	80083c2 <_dtoa_r+0xb12>
 800831c:	3201      	adds	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	e612      	b.n	8007f48 <_dtoa_r+0x698>
 8008322:	2a00      	cmp	r2, #0
 8008324:	dd07      	ble.n	8008336 <_dtoa_r+0xa86>
 8008326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800832a:	d0ed      	beq.n	8008308 <_dtoa_r+0xa58>
 800832c:	9a00      	ldr	r2, [sp, #0]
 800832e:	f108 0301 	add.w	r3, r8, #1
 8008332:	7013      	strb	r3, [r2, #0]
 8008334:	e608      	b.n	8007f48 <_dtoa_r+0x698>
 8008336:	9b07      	ldr	r3, [sp, #28]
 8008338:	9a07      	ldr	r2, [sp, #28]
 800833a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800833e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008340:	4293      	cmp	r3, r2
 8008342:	d028      	beq.n	8008396 <_dtoa_r+0xae6>
 8008344:	4649      	mov	r1, r9
 8008346:	2300      	movs	r3, #0
 8008348:	220a      	movs	r2, #10
 800834a:	4658      	mov	r0, fp
 800834c:	f000 f9d6 	bl	80086fc <__multadd>
 8008350:	42af      	cmp	r7, r5
 8008352:	4681      	mov	r9, r0
 8008354:	f04f 0300 	mov.w	r3, #0
 8008358:	f04f 020a 	mov.w	r2, #10
 800835c:	4639      	mov	r1, r7
 800835e:	4658      	mov	r0, fp
 8008360:	d107      	bne.n	8008372 <_dtoa_r+0xac2>
 8008362:	f000 f9cb 	bl	80086fc <__multadd>
 8008366:	4607      	mov	r7, r0
 8008368:	4605      	mov	r5, r0
 800836a:	9b07      	ldr	r3, [sp, #28]
 800836c:	3301      	adds	r3, #1
 800836e:	9307      	str	r3, [sp, #28]
 8008370:	e774      	b.n	800825c <_dtoa_r+0x9ac>
 8008372:	f000 f9c3 	bl	80086fc <__multadd>
 8008376:	4629      	mov	r1, r5
 8008378:	4607      	mov	r7, r0
 800837a:	2300      	movs	r3, #0
 800837c:	220a      	movs	r2, #10
 800837e:	4658      	mov	r0, fp
 8008380:	f000 f9bc 	bl	80086fc <__multadd>
 8008384:	4605      	mov	r5, r0
 8008386:	e7f0      	b.n	800836a <_dtoa_r+0xaba>
 8008388:	9b00      	ldr	r3, [sp, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bfcc      	ite	gt
 800838e:	461e      	movgt	r6, r3
 8008390:	2601      	movle	r6, #1
 8008392:	4456      	add	r6, sl
 8008394:	2700      	movs	r7, #0
 8008396:	4649      	mov	r1, r9
 8008398:	2201      	movs	r2, #1
 800839a:	4658      	mov	r0, fp
 800839c:	f000 fb5a 	bl	8008a54 <__lshift>
 80083a0:	4621      	mov	r1, r4
 80083a2:	4681      	mov	r9, r0
 80083a4:	f000 fbc2 	bl	8008b2c <__mcmp>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	dcb0      	bgt.n	800830e <_dtoa_r+0xa5e>
 80083ac:	d102      	bne.n	80083b4 <_dtoa_r+0xb04>
 80083ae:	f018 0f01 	tst.w	r8, #1
 80083b2:	d1ac      	bne.n	800830e <_dtoa_r+0xa5e>
 80083b4:	4633      	mov	r3, r6
 80083b6:	461e      	mov	r6, r3
 80083b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083bc:	2a30      	cmp	r2, #48	@ 0x30
 80083be:	d0fa      	beq.n	80083b6 <_dtoa_r+0xb06>
 80083c0:	e5c2      	b.n	8007f48 <_dtoa_r+0x698>
 80083c2:	459a      	cmp	sl, r3
 80083c4:	d1a4      	bne.n	8008310 <_dtoa_r+0xa60>
 80083c6:	9b04      	ldr	r3, [sp, #16]
 80083c8:	3301      	adds	r3, #1
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	2331      	movs	r3, #49	@ 0x31
 80083ce:	f88a 3000 	strb.w	r3, [sl]
 80083d2:	e5b9      	b.n	8007f48 <_dtoa_r+0x698>
 80083d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008434 <_dtoa_r+0xb84>
 80083da:	b11b      	cbz	r3, 80083e4 <_dtoa_r+0xb34>
 80083dc:	f10a 0308 	add.w	r3, sl, #8
 80083e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	4650      	mov	r0, sl
 80083e6:	b019      	add	sp, #100	@ 0x64
 80083e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	f77f ae37 	ble.w	8008062 <_dtoa_r+0x7b2>
 80083f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f8:	2001      	movs	r0, #1
 80083fa:	e655      	b.n	80080a8 <_dtoa_r+0x7f8>
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f77f aed6 	ble.w	80081b0 <_dtoa_r+0x900>
 8008404:	4656      	mov	r6, sl
 8008406:	4621      	mov	r1, r4
 8008408:	4648      	mov	r0, r9
 800840a:	f7ff f9c8 	bl	800779e <quorem>
 800840e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008412:	f806 8b01 	strb.w	r8, [r6], #1
 8008416:	9b00      	ldr	r3, [sp, #0]
 8008418:	eba6 020a 	sub.w	r2, r6, sl
 800841c:	4293      	cmp	r3, r2
 800841e:	ddb3      	ble.n	8008388 <_dtoa_r+0xad8>
 8008420:	4649      	mov	r1, r9
 8008422:	2300      	movs	r3, #0
 8008424:	220a      	movs	r2, #10
 8008426:	4658      	mov	r0, fp
 8008428:	f000 f968 	bl	80086fc <__multadd>
 800842c:	4681      	mov	r9, r0
 800842e:	e7ea      	b.n	8008406 <_dtoa_r+0xb56>
 8008430:	080095a8 	.word	0x080095a8
 8008434:	0800952c 	.word	0x0800952c

08008438 <_free_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4605      	mov	r5, r0
 800843c:	2900      	cmp	r1, #0
 800843e:	d041      	beq.n	80084c4 <_free_r+0x8c>
 8008440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008444:	1f0c      	subs	r4, r1, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	18e4      	addlt	r4, r4, r3
 800844c:	f000 f8e8 	bl	8008620 <__malloc_lock>
 8008450:	4a1d      	ldr	r2, [pc, #116]	@ (80084c8 <_free_r+0x90>)
 8008452:	6813      	ldr	r3, [r2, #0]
 8008454:	b933      	cbnz	r3, 8008464 <_free_r+0x2c>
 8008456:	6063      	str	r3, [r4, #4]
 8008458:	6014      	str	r4, [r2, #0]
 800845a:	4628      	mov	r0, r5
 800845c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008460:	f000 b8e4 	b.w	800862c <__malloc_unlock>
 8008464:	42a3      	cmp	r3, r4
 8008466:	d908      	bls.n	800847a <_free_r+0x42>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	1821      	adds	r1, r4, r0
 800846c:	428b      	cmp	r3, r1
 800846e:	bf01      	itttt	eq
 8008470:	6819      	ldreq	r1, [r3, #0]
 8008472:	685b      	ldreq	r3, [r3, #4]
 8008474:	1809      	addeq	r1, r1, r0
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	e7ed      	b.n	8008456 <_free_r+0x1e>
 800847a:	461a      	mov	r2, r3
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	b10b      	cbz	r3, 8008484 <_free_r+0x4c>
 8008480:	42a3      	cmp	r3, r4
 8008482:	d9fa      	bls.n	800847a <_free_r+0x42>
 8008484:	6811      	ldr	r1, [r2, #0]
 8008486:	1850      	adds	r0, r2, r1
 8008488:	42a0      	cmp	r0, r4
 800848a:	d10b      	bne.n	80084a4 <_free_r+0x6c>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	4401      	add	r1, r0
 8008490:	1850      	adds	r0, r2, r1
 8008492:	4283      	cmp	r3, r0
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	d1e0      	bne.n	800845a <_free_r+0x22>
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	6053      	str	r3, [r2, #4]
 800849e:	4408      	add	r0, r1
 80084a0:	6010      	str	r0, [r2, #0]
 80084a2:	e7da      	b.n	800845a <_free_r+0x22>
 80084a4:	d902      	bls.n	80084ac <_free_r+0x74>
 80084a6:	230c      	movs	r3, #12
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	e7d6      	b.n	800845a <_free_r+0x22>
 80084ac:	6820      	ldr	r0, [r4, #0]
 80084ae:	1821      	adds	r1, r4, r0
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf04      	itt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	6063      	str	r3, [r4, #4]
 80084ba:	bf04      	itt	eq
 80084bc:	1809      	addeq	r1, r1, r0
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	6054      	str	r4, [r2, #4]
 80084c2:	e7ca      	b.n	800845a <_free_r+0x22>
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	bf00      	nop
 80084c8:	20000620 	.word	0x20000620

080084cc <malloc>:
 80084cc:	4b02      	ldr	r3, [pc, #8]	@ (80084d8 <malloc+0xc>)
 80084ce:	4601      	mov	r1, r0
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	f000 b825 	b.w	8008520 <_malloc_r>
 80084d6:	bf00      	nop
 80084d8:	20000018 	.word	0x20000018

080084dc <sbrk_aligned>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4e0f      	ldr	r6, [pc, #60]	@ (800851c <sbrk_aligned+0x40>)
 80084e0:	460c      	mov	r4, r1
 80084e2:	6831      	ldr	r1, [r6, #0]
 80084e4:	4605      	mov	r5, r0
 80084e6:	b911      	cbnz	r1, 80084ee <sbrk_aligned+0x12>
 80084e8:	f000 fe9a 	bl	8009220 <_sbrk_r>
 80084ec:	6030      	str	r0, [r6, #0]
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 fe95 	bl	8009220 <_sbrk_r>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d103      	bne.n	8008502 <sbrk_aligned+0x26>
 80084fa:	f04f 34ff 	mov.w	r4, #4294967295
 80084fe:	4620      	mov	r0, r4
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	1cc4      	adds	r4, r0, #3
 8008504:	f024 0403 	bic.w	r4, r4, #3
 8008508:	42a0      	cmp	r0, r4
 800850a:	d0f8      	beq.n	80084fe <sbrk_aligned+0x22>
 800850c:	1a21      	subs	r1, r4, r0
 800850e:	4628      	mov	r0, r5
 8008510:	f000 fe86 	bl	8009220 <_sbrk_r>
 8008514:	3001      	adds	r0, #1
 8008516:	d1f2      	bne.n	80084fe <sbrk_aligned+0x22>
 8008518:	e7ef      	b.n	80084fa <sbrk_aligned+0x1e>
 800851a:	bf00      	nop
 800851c:	2000061c 	.word	0x2000061c

08008520 <_malloc_r>:
 8008520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008524:	1ccd      	adds	r5, r1, #3
 8008526:	f025 0503 	bic.w	r5, r5, #3
 800852a:	3508      	adds	r5, #8
 800852c:	2d0c      	cmp	r5, #12
 800852e:	bf38      	it	cc
 8008530:	250c      	movcc	r5, #12
 8008532:	2d00      	cmp	r5, #0
 8008534:	4606      	mov	r6, r0
 8008536:	db01      	blt.n	800853c <_malloc_r+0x1c>
 8008538:	42a9      	cmp	r1, r5
 800853a:	d904      	bls.n	8008546 <_malloc_r+0x26>
 800853c:	230c      	movs	r3, #12
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	2000      	movs	r0, #0
 8008542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800861c <_malloc_r+0xfc>
 800854a:	f000 f869 	bl	8008620 <__malloc_lock>
 800854e:	f8d8 3000 	ldr.w	r3, [r8]
 8008552:	461c      	mov	r4, r3
 8008554:	bb44      	cbnz	r4, 80085a8 <_malloc_r+0x88>
 8008556:	4629      	mov	r1, r5
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff ffbf 	bl	80084dc <sbrk_aligned>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	4604      	mov	r4, r0
 8008562:	d158      	bne.n	8008616 <_malloc_r+0xf6>
 8008564:	f8d8 4000 	ldr.w	r4, [r8]
 8008568:	4627      	mov	r7, r4
 800856a:	2f00      	cmp	r7, #0
 800856c:	d143      	bne.n	80085f6 <_malloc_r+0xd6>
 800856e:	2c00      	cmp	r4, #0
 8008570:	d04b      	beq.n	800860a <_malloc_r+0xea>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	4639      	mov	r1, r7
 8008576:	4630      	mov	r0, r6
 8008578:	eb04 0903 	add.w	r9, r4, r3
 800857c:	f000 fe50 	bl	8009220 <_sbrk_r>
 8008580:	4581      	cmp	r9, r0
 8008582:	d142      	bne.n	800860a <_malloc_r+0xea>
 8008584:	6821      	ldr	r1, [r4, #0]
 8008586:	1a6d      	subs	r5, r5, r1
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ffa6 	bl	80084dc <sbrk_aligned>
 8008590:	3001      	adds	r0, #1
 8008592:	d03a      	beq.n	800860a <_malloc_r+0xea>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	442b      	add	r3, r5
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	f8d8 3000 	ldr.w	r3, [r8]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	bb62      	cbnz	r2, 80085fc <_malloc_r+0xdc>
 80085a2:	f8c8 7000 	str.w	r7, [r8]
 80085a6:	e00f      	b.n	80085c8 <_malloc_r+0xa8>
 80085a8:	6822      	ldr	r2, [r4, #0]
 80085aa:	1b52      	subs	r2, r2, r5
 80085ac:	d420      	bmi.n	80085f0 <_malloc_r+0xd0>
 80085ae:	2a0b      	cmp	r2, #11
 80085b0:	d917      	bls.n	80085e2 <_malloc_r+0xc2>
 80085b2:	1961      	adds	r1, r4, r5
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	6025      	str	r5, [r4, #0]
 80085b8:	bf18      	it	ne
 80085ba:	6059      	strne	r1, [r3, #4]
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	bf08      	it	eq
 80085c0:	f8c8 1000 	streq.w	r1, [r8]
 80085c4:	5162      	str	r2, [r4, r5]
 80085c6:	604b      	str	r3, [r1, #4]
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 f82f 	bl	800862c <__malloc_unlock>
 80085ce:	f104 000b 	add.w	r0, r4, #11
 80085d2:	1d23      	adds	r3, r4, #4
 80085d4:	f020 0007 	bic.w	r0, r0, #7
 80085d8:	1ac2      	subs	r2, r0, r3
 80085da:	bf1c      	itt	ne
 80085dc:	1a1b      	subne	r3, r3, r0
 80085de:	50a3      	strne	r3, [r4, r2]
 80085e0:	e7af      	b.n	8008542 <_malloc_r+0x22>
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	bf0c      	ite	eq
 80085e8:	f8c8 2000 	streq.w	r2, [r8]
 80085ec:	605a      	strne	r2, [r3, #4]
 80085ee:	e7eb      	b.n	80085c8 <_malloc_r+0xa8>
 80085f0:	4623      	mov	r3, r4
 80085f2:	6864      	ldr	r4, [r4, #4]
 80085f4:	e7ae      	b.n	8008554 <_malloc_r+0x34>
 80085f6:	463c      	mov	r4, r7
 80085f8:	687f      	ldr	r7, [r7, #4]
 80085fa:	e7b6      	b.n	800856a <_malloc_r+0x4a>
 80085fc:	461a      	mov	r2, r3
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	42a3      	cmp	r3, r4
 8008602:	d1fb      	bne.n	80085fc <_malloc_r+0xdc>
 8008604:	2300      	movs	r3, #0
 8008606:	6053      	str	r3, [r2, #4]
 8008608:	e7de      	b.n	80085c8 <_malloc_r+0xa8>
 800860a:	230c      	movs	r3, #12
 800860c:	6033      	str	r3, [r6, #0]
 800860e:	4630      	mov	r0, r6
 8008610:	f000 f80c 	bl	800862c <__malloc_unlock>
 8008614:	e794      	b.n	8008540 <_malloc_r+0x20>
 8008616:	6005      	str	r5, [r0, #0]
 8008618:	e7d6      	b.n	80085c8 <_malloc_r+0xa8>
 800861a:	bf00      	nop
 800861c:	20000620 	.word	0x20000620

08008620 <__malloc_lock>:
 8008620:	4801      	ldr	r0, [pc, #4]	@ (8008628 <__malloc_lock+0x8>)
 8008622:	f7ff b8ba 	b.w	800779a <__retarget_lock_acquire_recursive>
 8008626:	bf00      	nop
 8008628:	20000618 	.word	0x20000618

0800862c <__malloc_unlock>:
 800862c:	4801      	ldr	r0, [pc, #4]	@ (8008634 <__malloc_unlock+0x8>)
 800862e:	f7ff b8b5 	b.w	800779c <__retarget_lock_release_recursive>
 8008632:	bf00      	nop
 8008634:	20000618 	.word	0x20000618

08008638 <_Balloc>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	69c6      	ldr	r6, [r0, #28]
 800863c:	4604      	mov	r4, r0
 800863e:	460d      	mov	r5, r1
 8008640:	b976      	cbnz	r6, 8008660 <_Balloc+0x28>
 8008642:	2010      	movs	r0, #16
 8008644:	f7ff ff42 	bl	80084cc <malloc>
 8008648:	4602      	mov	r2, r0
 800864a:	61e0      	str	r0, [r4, #28]
 800864c:	b920      	cbnz	r0, 8008658 <_Balloc+0x20>
 800864e:	4b18      	ldr	r3, [pc, #96]	@ (80086b0 <_Balloc+0x78>)
 8008650:	4818      	ldr	r0, [pc, #96]	@ (80086b4 <_Balloc+0x7c>)
 8008652:	216b      	movs	r1, #107	@ 0x6b
 8008654:	f000 fe02 	bl	800925c <__assert_func>
 8008658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800865c:	6006      	str	r6, [r0, #0]
 800865e:	60c6      	str	r6, [r0, #12]
 8008660:	69e6      	ldr	r6, [r4, #28]
 8008662:	68f3      	ldr	r3, [r6, #12]
 8008664:	b183      	cbz	r3, 8008688 <_Balloc+0x50>
 8008666:	69e3      	ldr	r3, [r4, #28]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800866e:	b9b8      	cbnz	r0, 80086a0 <_Balloc+0x68>
 8008670:	2101      	movs	r1, #1
 8008672:	fa01 f605 	lsl.w	r6, r1, r5
 8008676:	1d72      	adds	r2, r6, #5
 8008678:	0092      	lsls	r2, r2, #2
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fe0c 	bl	8009298 <_calloc_r>
 8008680:	b160      	cbz	r0, 800869c <_Balloc+0x64>
 8008682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008686:	e00e      	b.n	80086a6 <_Balloc+0x6e>
 8008688:	2221      	movs	r2, #33	@ 0x21
 800868a:	2104      	movs	r1, #4
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fe03 	bl	8009298 <_calloc_r>
 8008692:	69e3      	ldr	r3, [r4, #28]
 8008694:	60f0      	str	r0, [r6, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e4      	bne.n	8008666 <_Balloc+0x2e>
 800869c:	2000      	movs	r0, #0
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	6802      	ldr	r2, [r0, #0]
 80086a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086a6:	2300      	movs	r3, #0
 80086a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086ac:	e7f7      	b.n	800869e <_Balloc+0x66>
 80086ae:	bf00      	nop
 80086b0:	08009539 	.word	0x08009539
 80086b4:	080095b9 	.word	0x080095b9

080086b8 <_Bfree>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	69c6      	ldr	r6, [r0, #28]
 80086bc:	4605      	mov	r5, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	b976      	cbnz	r6, 80086e0 <_Bfree+0x28>
 80086c2:	2010      	movs	r0, #16
 80086c4:	f7ff ff02 	bl	80084cc <malloc>
 80086c8:	4602      	mov	r2, r0
 80086ca:	61e8      	str	r0, [r5, #28]
 80086cc:	b920      	cbnz	r0, 80086d8 <_Bfree+0x20>
 80086ce:	4b09      	ldr	r3, [pc, #36]	@ (80086f4 <_Bfree+0x3c>)
 80086d0:	4809      	ldr	r0, [pc, #36]	@ (80086f8 <_Bfree+0x40>)
 80086d2:	218f      	movs	r1, #143	@ 0x8f
 80086d4:	f000 fdc2 	bl	800925c <__assert_func>
 80086d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086dc:	6006      	str	r6, [r0, #0]
 80086de:	60c6      	str	r6, [r0, #12]
 80086e0:	b13c      	cbz	r4, 80086f2 <_Bfree+0x3a>
 80086e2:	69eb      	ldr	r3, [r5, #28]
 80086e4:	6862      	ldr	r2, [r4, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086ec:	6021      	str	r1, [r4, #0]
 80086ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	08009539 	.word	0x08009539
 80086f8:	080095b9 	.word	0x080095b9

080086fc <__multadd>:
 80086fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008700:	690d      	ldr	r5, [r1, #16]
 8008702:	4607      	mov	r7, r0
 8008704:	460c      	mov	r4, r1
 8008706:	461e      	mov	r6, r3
 8008708:	f101 0c14 	add.w	ip, r1, #20
 800870c:	2000      	movs	r0, #0
 800870e:	f8dc 3000 	ldr.w	r3, [ip]
 8008712:	b299      	uxth	r1, r3
 8008714:	fb02 6101 	mla	r1, r2, r1, r6
 8008718:	0c1e      	lsrs	r6, r3, #16
 800871a:	0c0b      	lsrs	r3, r1, #16
 800871c:	fb02 3306 	mla	r3, r2, r6, r3
 8008720:	b289      	uxth	r1, r1
 8008722:	3001      	adds	r0, #1
 8008724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008728:	4285      	cmp	r5, r0
 800872a:	f84c 1b04 	str.w	r1, [ip], #4
 800872e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008732:	dcec      	bgt.n	800870e <__multadd+0x12>
 8008734:	b30e      	cbz	r6, 800877a <__multadd+0x7e>
 8008736:	68a3      	ldr	r3, [r4, #8]
 8008738:	42ab      	cmp	r3, r5
 800873a:	dc19      	bgt.n	8008770 <__multadd+0x74>
 800873c:	6861      	ldr	r1, [r4, #4]
 800873e:	4638      	mov	r0, r7
 8008740:	3101      	adds	r1, #1
 8008742:	f7ff ff79 	bl	8008638 <_Balloc>
 8008746:	4680      	mov	r8, r0
 8008748:	b928      	cbnz	r0, 8008756 <__multadd+0x5a>
 800874a:	4602      	mov	r2, r0
 800874c:	4b0c      	ldr	r3, [pc, #48]	@ (8008780 <__multadd+0x84>)
 800874e:	480d      	ldr	r0, [pc, #52]	@ (8008784 <__multadd+0x88>)
 8008750:	21ba      	movs	r1, #186	@ 0xba
 8008752:	f000 fd83 	bl	800925c <__assert_func>
 8008756:	6922      	ldr	r2, [r4, #16]
 8008758:	3202      	adds	r2, #2
 800875a:	f104 010c 	add.w	r1, r4, #12
 800875e:	0092      	lsls	r2, r2, #2
 8008760:	300c      	adds	r0, #12
 8008762:	f000 fd6d 	bl	8009240 <memcpy>
 8008766:	4621      	mov	r1, r4
 8008768:	4638      	mov	r0, r7
 800876a:	f7ff ffa5 	bl	80086b8 <_Bfree>
 800876e:	4644      	mov	r4, r8
 8008770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008774:	3501      	adds	r5, #1
 8008776:	615e      	str	r6, [r3, #20]
 8008778:	6125      	str	r5, [r4, #16]
 800877a:	4620      	mov	r0, r4
 800877c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008780:	080095a8 	.word	0x080095a8
 8008784:	080095b9 	.word	0x080095b9

08008788 <__hi0bits>:
 8008788:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800878c:	4603      	mov	r3, r0
 800878e:	bf36      	itet	cc
 8008790:	0403      	lslcc	r3, r0, #16
 8008792:	2000      	movcs	r0, #0
 8008794:	2010      	movcc	r0, #16
 8008796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800879a:	bf3c      	itt	cc
 800879c:	021b      	lslcc	r3, r3, #8
 800879e:	3008      	addcc	r0, #8
 80087a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087a4:	bf3c      	itt	cc
 80087a6:	011b      	lslcc	r3, r3, #4
 80087a8:	3004      	addcc	r0, #4
 80087aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ae:	bf3c      	itt	cc
 80087b0:	009b      	lslcc	r3, r3, #2
 80087b2:	3002      	addcc	r0, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	db05      	blt.n	80087c4 <__hi0bits+0x3c>
 80087b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80087bc:	f100 0001 	add.w	r0, r0, #1
 80087c0:	bf08      	it	eq
 80087c2:	2020      	moveq	r0, #32
 80087c4:	4770      	bx	lr

080087c6 <__lo0bits>:
 80087c6:	6803      	ldr	r3, [r0, #0]
 80087c8:	4602      	mov	r2, r0
 80087ca:	f013 0007 	ands.w	r0, r3, #7
 80087ce:	d00b      	beq.n	80087e8 <__lo0bits+0x22>
 80087d0:	07d9      	lsls	r1, r3, #31
 80087d2:	d421      	bmi.n	8008818 <__lo0bits+0x52>
 80087d4:	0798      	lsls	r0, r3, #30
 80087d6:	bf49      	itett	mi
 80087d8:	085b      	lsrmi	r3, r3, #1
 80087da:	089b      	lsrpl	r3, r3, #2
 80087dc:	2001      	movmi	r0, #1
 80087de:	6013      	strmi	r3, [r2, #0]
 80087e0:	bf5c      	itt	pl
 80087e2:	6013      	strpl	r3, [r2, #0]
 80087e4:	2002      	movpl	r0, #2
 80087e6:	4770      	bx	lr
 80087e8:	b299      	uxth	r1, r3
 80087ea:	b909      	cbnz	r1, 80087f0 <__lo0bits+0x2a>
 80087ec:	0c1b      	lsrs	r3, r3, #16
 80087ee:	2010      	movs	r0, #16
 80087f0:	b2d9      	uxtb	r1, r3
 80087f2:	b909      	cbnz	r1, 80087f8 <__lo0bits+0x32>
 80087f4:	3008      	adds	r0, #8
 80087f6:	0a1b      	lsrs	r3, r3, #8
 80087f8:	0719      	lsls	r1, r3, #28
 80087fa:	bf04      	itt	eq
 80087fc:	091b      	lsreq	r3, r3, #4
 80087fe:	3004      	addeq	r0, #4
 8008800:	0799      	lsls	r1, r3, #30
 8008802:	bf04      	itt	eq
 8008804:	089b      	lsreq	r3, r3, #2
 8008806:	3002      	addeq	r0, #2
 8008808:	07d9      	lsls	r1, r3, #31
 800880a:	d403      	bmi.n	8008814 <__lo0bits+0x4e>
 800880c:	085b      	lsrs	r3, r3, #1
 800880e:	f100 0001 	add.w	r0, r0, #1
 8008812:	d003      	beq.n	800881c <__lo0bits+0x56>
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	4770      	bx	lr
 8008818:	2000      	movs	r0, #0
 800881a:	4770      	bx	lr
 800881c:	2020      	movs	r0, #32
 800881e:	4770      	bx	lr

08008820 <__i2b>:
 8008820:	b510      	push	{r4, lr}
 8008822:	460c      	mov	r4, r1
 8008824:	2101      	movs	r1, #1
 8008826:	f7ff ff07 	bl	8008638 <_Balloc>
 800882a:	4602      	mov	r2, r0
 800882c:	b928      	cbnz	r0, 800883a <__i2b+0x1a>
 800882e:	4b05      	ldr	r3, [pc, #20]	@ (8008844 <__i2b+0x24>)
 8008830:	4805      	ldr	r0, [pc, #20]	@ (8008848 <__i2b+0x28>)
 8008832:	f240 1145 	movw	r1, #325	@ 0x145
 8008836:	f000 fd11 	bl	800925c <__assert_func>
 800883a:	2301      	movs	r3, #1
 800883c:	6144      	str	r4, [r0, #20]
 800883e:	6103      	str	r3, [r0, #16]
 8008840:	bd10      	pop	{r4, pc}
 8008842:	bf00      	nop
 8008844:	080095a8 	.word	0x080095a8
 8008848:	080095b9 	.word	0x080095b9

0800884c <__multiply>:
 800884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	4614      	mov	r4, r2
 8008852:	690a      	ldr	r2, [r1, #16]
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	429a      	cmp	r2, r3
 8008858:	bfa8      	it	ge
 800885a:	4623      	movge	r3, r4
 800885c:	460f      	mov	r7, r1
 800885e:	bfa4      	itt	ge
 8008860:	460c      	movge	r4, r1
 8008862:	461f      	movge	r7, r3
 8008864:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008868:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800886c:	68a3      	ldr	r3, [r4, #8]
 800886e:	6861      	ldr	r1, [r4, #4]
 8008870:	eb0a 0609 	add.w	r6, sl, r9
 8008874:	42b3      	cmp	r3, r6
 8008876:	b085      	sub	sp, #20
 8008878:	bfb8      	it	lt
 800887a:	3101      	addlt	r1, #1
 800887c:	f7ff fedc 	bl	8008638 <_Balloc>
 8008880:	b930      	cbnz	r0, 8008890 <__multiply+0x44>
 8008882:	4602      	mov	r2, r0
 8008884:	4b44      	ldr	r3, [pc, #272]	@ (8008998 <__multiply+0x14c>)
 8008886:	4845      	ldr	r0, [pc, #276]	@ (800899c <__multiply+0x150>)
 8008888:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800888c:	f000 fce6 	bl	800925c <__assert_func>
 8008890:	f100 0514 	add.w	r5, r0, #20
 8008894:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008898:	462b      	mov	r3, r5
 800889a:	2200      	movs	r2, #0
 800889c:	4543      	cmp	r3, r8
 800889e:	d321      	bcc.n	80088e4 <__multiply+0x98>
 80088a0:	f107 0114 	add.w	r1, r7, #20
 80088a4:	f104 0214 	add.w	r2, r4, #20
 80088a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80088ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80088b0:	9302      	str	r3, [sp, #8]
 80088b2:	1b13      	subs	r3, r2, r4
 80088b4:	3b15      	subs	r3, #21
 80088b6:	f023 0303 	bic.w	r3, r3, #3
 80088ba:	3304      	adds	r3, #4
 80088bc:	f104 0715 	add.w	r7, r4, #21
 80088c0:	42ba      	cmp	r2, r7
 80088c2:	bf38      	it	cc
 80088c4:	2304      	movcc	r3, #4
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	9103      	str	r1, [sp, #12]
 80088cc:	428b      	cmp	r3, r1
 80088ce:	d80c      	bhi.n	80088ea <__multiply+0x9e>
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	dd03      	ble.n	80088dc <__multiply+0x90>
 80088d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d05b      	beq.n	8008994 <__multiply+0x148>
 80088dc:	6106      	str	r6, [r0, #16]
 80088de:	b005      	add	sp, #20
 80088e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e4:	f843 2b04 	str.w	r2, [r3], #4
 80088e8:	e7d8      	b.n	800889c <__multiply+0x50>
 80088ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80088ee:	f1ba 0f00 	cmp.w	sl, #0
 80088f2:	d024      	beq.n	800893e <__multiply+0xf2>
 80088f4:	f104 0e14 	add.w	lr, r4, #20
 80088f8:	46a9      	mov	r9, r5
 80088fa:	f04f 0c00 	mov.w	ip, #0
 80088fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008902:	f8d9 3000 	ldr.w	r3, [r9]
 8008906:	fa1f fb87 	uxth.w	fp, r7
 800890a:	b29b      	uxth	r3, r3
 800890c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008910:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008914:	f8d9 7000 	ldr.w	r7, [r9]
 8008918:	4463      	add	r3, ip
 800891a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800891e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008922:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008926:	b29b      	uxth	r3, r3
 8008928:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800892c:	4572      	cmp	r2, lr
 800892e:	f849 3b04 	str.w	r3, [r9], #4
 8008932:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008936:	d8e2      	bhi.n	80088fe <__multiply+0xb2>
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	f845 c003 	str.w	ip, [r5, r3]
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008944:	3104      	adds	r1, #4
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	d021      	beq.n	8008990 <__multiply+0x144>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	f104 0c14 	add.w	ip, r4, #20
 8008952:	46ae      	mov	lr, r5
 8008954:	f04f 0a00 	mov.w	sl, #0
 8008958:	f8bc b000 	ldrh.w	fp, [ip]
 800895c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008960:	fb09 770b 	mla	r7, r9, fp, r7
 8008964:	4457      	add	r7, sl
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800896c:	f84e 3b04 	str.w	r3, [lr], #4
 8008970:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008978:	f8be 3000 	ldrh.w	r3, [lr]
 800897c:	fb09 330a 	mla	r3, r9, sl, r3
 8008980:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008984:	4562      	cmp	r2, ip
 8008986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800898a:	d8e5      	bhi.n	8008958 <__multiply+0x10c>
 800898c:	9f01      	ldr	r7, [sp, #4]
 800898e:	51eb      	str	r3, [r5, r7]
 8008990:	3504      	adds	r5, #4
 8008992:	e799      	b.n	80088c8 <__multiply+0x7c>
 8008994:	3e01      	subs	r6, #1
 8008996:	e79b      	b.n	80088d0 <__multiply+0x84>
 8008998:	080095a8 	.word	0x080095a8
 800899c:	080095b9 	.word	0x080095b9

080089a0 <__pow5mult>:
 80089a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a4:	4615      	mov	r5, r2
 80089a6:	f012 0203 	ands.w	r2, r2, #3
 80089aa:	4607      	mov	r7, r0
 80089ac:	460e      	mov	r6, r1
 80089ae:	d007      	beq.n	80089c0 <__pow5mult+0x20>
 80089b0:	4c25      	ldr	r4, [pc, #148]	@ (8008a48 <__pow5mult+0xa8>)
 80089b2:	3a01      	subs	r2, #1
 80089b4:	2300      	movs	r3, #0
 80089b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089ba:	f7ff fe9f 	bl	80086fc <__multadd>
 80089be:	4606      	mov	r6, r0
 80089c0:	10ad      	asrs	r5, r5, #2
 80089c2:	d03d      	beq.n	8008a40 <__pow5mult+0xa0>
 80089c4:	69fc      	ldr	r4, [r7, #28]
 80089c6:	b97c      	cbnz	r4, 80089e8 <__pow5mult+0x48>
 80089c8:	2010      	movs	r0, #16
 80089ca:	f7ff fd7f 	bl	80084cc <malloc>
 80089ce:	4602      	mov	r2, r0
 80089d0:	61f8      	str	r0, [r7, #28]
 80089d2:	b928      	cbnz	r0, 80089e0 <__pow5mult+0x40>
 80089d4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a4c <__pow5mult+0xac>)
 80089d6:	481e      	ldr	r0, [pc, #120]	@ (8008a50 <__pow5mult+0xb0>)
 80089d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80089dc:	f000 fc3e 	bl	800925c <__assert_func>
 80089e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089e4:	6004      	str	r4, [r0, #0]
 80089e6:	60c4      	str	r4, [r0, #12]
 80089e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089f0:	b94c      	cbnz	r4, 8008a06 <__pow5mult+0x66>
 80089f2:	f240 2171 	movw	r1, #625	@ 0x271
 80089f6:	4638      	mov	r0, r7
 80089f8:	f7ff ff12 	bl	8008820 <__i2b>
 80089fc:	2300      	movs	r3, #0
 80089fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a02:	4604      	mov	r4, r0
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	f04f 0900 	mov.w	r9, #0
 8008a0a:	07eb      	lsls	r3, r5, #31
 8008a0c:	d50a      	bpl.n	8008a24 <__pow5mult+0x84>
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4622      	mov	r2, r4
 8008a12:	4638      	mov	r0, r7
 8008a14:	f7ff ff1a 	bl	800884c <__multiply>
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	f7ff fe4b 	bl	80086b8 <_Bfree>
 8008a22:	4646      	mov	r6, r8
 8008a24:	106d      	asrs	r5, r5, #1
 8008a26:	d00b      	beq.n	8008a40 <__pow5mult+0xa0>
 8008a28:	6820      	ldr	r0, [r4, #0]
 8008a2a:	b938      	cbnz	r0, 8008a3c <__pow5mult+0x9c>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff ff0b 	bl	800884c <__multiply>
 8008a36:	6020      	str	r0, [r4, #0]
 8008a38:	f8c0 9000 	str.w	r9, [r0]
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	e7e4      	b.n	8008a0a <__pow5mult+0x6a>
 8008a40:	4630      	mov	r0, r6
 8008a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a46:	bf00      	nop
 8008a48:	08009614 	.word	0x08009614
 8008a4c:	08009539 	.word	0x08009539
 8008a50:	080095b9 	.word	0x080095b9

08008a54 <__lshift>:
 8008a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a58:	460c      	mov	r4, r1
 8008a5a:	6849      	ldr	r1, [r1, #4]
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a62:	68a3      	ldr	r3, [r4, #8]
 8008a64:	4607      	mov	r7, r0
 8008a66:	4691      	mov	r9, r2
 8008a68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a6c:	f108 0601 	add.w	r6, r8, #1
 8008a70:	42b3      	cmp	r3, r6
 8008a72:	db0b      	blt.n	8008a8c <__lshift+0x38>
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff fddf 	bl	8008638 <_Balloc>
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	b948      	cbnz	r0, 8008a92 <__lshift+0x3e>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	4b28      	ldr	r3, [pc, #160]	@ (8008b24 <__lshift+0xd0>)
 8008a82:	4829      	ldr	r0, [pc, #164]	@ (8008b28 <__lshift+0xd4>)
 8008a84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a88:	f000 fbe8 	bl	800925c <__assert_func>
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	e7ee      	b.n	8008a70 <__lshift+0x1c>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f100 0114 	add.w	r1, r0, #20
 8008a98:	f100 0210 	add.w	r2, r0, #16
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	4553      	cmp	r3, sl
 8008aa0:	db33      	blt.n	8008b0a <__lshift+0xb6>
 8008aa2:	6920      	ldr	r0, [r4, #16]
 8008aa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008aa8:	f104 0314 	add.w	r3, r4, #20
 8008aac:	f019 091f 	ands.w	r9, r9, #31
 8008ab0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ab4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ab8:	d02b      	beq.n	8008b12 <__lshift+0xbe>
 8008aba:	f1c9 0e20 	rsb	lr, r9, #32
 8008abe:	468a      	mov	sl, r1
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	fa00 f009 	lsl.w	r0, r0, r9
 8008ac8:	4310      	orrs	r0, r2
 8008aca:	f84a 0b04 	str.w	r0, [sl], #4
 8008ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad2:	459c      	cmp	ip, r3
 8008ad4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ad8:	d8f3      	bhi.n	8008ac2 <__lshift+0x6e>
 8008ada:	ebac 0304 	sub.w	r3, ip, r4
 8008ade:	3b15      	subs	r3, #21
 8008ae0:	f023 0303 	bic.w	r3, r3, #3
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	f104 0015 	add.w	r0, r4, #21
 8008aea:	4584      	cmp	ip, r0
 8008aec:	bf38      	it	cc
 8008aee:	2304      	movcc	r3, #4
 8008af0:	50ca      	str	r2, [r1, r3]
 8008af2:	b10a      	cbz	r2, 8008af8 <__lshift+0xa4>
 8008af4:	f108 0602 	add.w	r6, r8, #2
 8008af8:	3e01      	subs	r6, #1
 8008afa:	4638      	mov	r0, r7
 8008afc:	612e      	str	r6, [r5, #16]
 8008afe:	4621      	mov	r1, r4
 8008b00:	f7ff fdda 	bl	80086b8 <_Bfree>
 8008b04:	4628      	mov	r0, r5
 8008b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b0e:	3301      	adds	r3, #1
 8008b10:	e7c5      	b.n	8008a9e <__lshift+0x4a>
 8008b12:	3904      	subs	r1, #4
 8008b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b1c:	459c      	cmp	ip, r3
 8008b1e:	d8f9      	bhi.n	8008b14 <__lshift+0xc0>
 8008b20:	e7ea      	b.n	8008af8 <__lshift+0xa4>
 8008b22:	bf00      	nop
 8008b24:	080095a8 	.word	0x080095a8
 8008b28:	080095b9 	.word	0x080095b9

08008b2c <__mcmp>:
 8008b2c:	690a      	ldr	r2, [r1, #16]
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6900      	ldr	r0, [r0, #16]
 8008b32:	1a80      	subs	r0, r0, r2
 8008b34:	b530      	push	{r4, r5, lr}
 8008b36:	d10e      	bne.n	8008b56 <__mcmp+0x2a>
 8008b38:	3314      	adds	r3, #20
 8008b3a:	3114      	adds	r1, #20
 8008b3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b4c:	4295      	cmp	r5, r2
 8008b4e:	d003      	beq.n	8008b58 <__mcmp+0x2c>
 8008b50:	d205      	bcs.n	8008b5e <__mcmp+0x32>
 8008b52:	f04f 30ff 	mov.w	r0, #4294967295
 8008b56:	bd30      	pop	{r4, r5, pc}
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	d3f3      	bcc.n	8008b44 <__mcmp+0x18>
 8008b5c:	e7fb      	b.n	8008b56 <__mcmp+0x2a>
 8008b5e:	2001      	movs	r0, #1
 8008b60:	e7f9      	b.n	8008b56 <__mcmp+0x2a>
	...

08008b64 <__mdiff>:
 8008b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	4689      	mov	r9, r1
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4648      	mov	r0, r9
 8008b70:	4614      	mov	r4, r2
 8008b72:	f7ff ffdb 	bl	8008b2c <__mcmp>
 8008b76:	1e05      	subs	r5, r0, #0
 8008b78:	d112      	bne.n	8008ba0 <__mdiff+0x3c>
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f7ff fd5b 	bl	8008638 <_Balloc>
 8008b82:	4602      	mov	r2, r0
 8008b84:	b928      	cbnz	r0, 8008b92 <__mdiff+0x2e>
 8008b86:	4b3f      	ldr	r3, [pc, #252]	@ (8008c84 <__mdiff+0x120>)
 8008b88:	f240 2137 	movw	r1, #567	@ 0x237
 8008b8c:	483e      	ldr	r0, [pc, #248]	@ (8008c88 <__mdiff+0x124>)
 8008b8e:	f000 fb65 	bl	800925c <__assert_func>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b98:	4610      	mov	r0, r2
 8008b9a:	b003      	add	sp, #12
 8008b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba0:	bfbc      	itt	lt
 8008ba2:	464b      	movlt	r3, r9
 8008ba4:	46a1      	movlt	r9, r4
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008bac:	bfba      	itte	lt
 8008bae:	461c      	movlt	r4, r3
 8008bb0:	2501      	movlt	r5, #1
 8008bb2:	2500      	movge	r5, #0
 8008bb4:	f7ff fd40 	bl	8008638 <_Balloc>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	b918      	cbnz	r0, 8008bc4 <__mdiff+0x60>
 8008bbc:	4b31      	ldr	r3, [pc, #196]	@ (8008c84 <__mdiff+0x120>)
 8008bbe:	f240 2145 	movw	r1, #581	@ 0x245
 8008bc2:	e7e3      	b.n	8008b8c <__mdiff+0x28>
 8008bc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008bc8:	6926      	ldr	r6, [r4, #16]
 8008bca:	60c5      	str	r5, [r0, #12]
 8008bcc:	f109 0310 	add.w	r3, r9, #16
 8008bd0:	f109 0514 	add.w	r5, r9, #20
 8008bd4:	f104 0e14 	add.w	lr, r4, #20
 8008bd8:	f100 0b14 	add.w	fp, r0, #20
 8008bdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008be0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	46d9      	mov	r9, fp
 8008be8:	f04f 0c00 	mov.w	ip, #0
 8008bec:	9b01      	ldr	r3, [sp, #4]
 8008bee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	fa1f f38a 	uxth.w	r3, sl
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	b283      	uxth	r3, r0
 8008c00:	1acb      	subs	r3, r1, r3
 8008c02:	0c00      	lsrs	r0, r0, #16
 8008c04:	4463      	add	r3, ip
 8008c06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c14:	4576      	cmp	r6, lr
 8008c16:	f849 3b04 	str.w	r3, [r9], #4
 8008c1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c1e:	d8e5      	bhi.n	8008bec <__mdiff+0x88>
 8008c20:	1b33      	subs	r3, r6, r4
 8008c22:	3b15      	subs	r3, #21
 8008c24:	f023 0303 	bic.w	r3, r3, #3
 8008c28:	3415      	adds	r4, #21
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	42a6      	cmp	r6, r4
 8008c2e:	bf38      	it	cc
 8008c30:	2304      	movcc	r3, #4
 8008c32:	441d      	add	r5, r3
 8008c34:	445b      	add	r3, fp
 8008c36:	461e      	mov	r6, r3
 8008c38:	462c      	mov	r4, r5
 8008c3a:	4544      	cmp	r4, r8
 8008c3c:	d30e      	bcc.n	8008c5c <__mdiff+0xf8>
 8008c3e:	f108 0103 	add.w	r1, r8, #3
 8008c42:	1b49      	subs	r1, r1, r5
 8008c44:	f021 0103 	bic.w	r1, r1, #3
 8008c48:	3d03      	subs	r5, #3
 8008c4a:	45a8      	cmp	r8, r5
 8008c4c:	bf38      	it	cc
 8008c4e:	2100      	movcc	r1, #0
 8008c50:	440b      	add	r3, r1
 8008c52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c56:	b191      	cbz	r1, 8008c7e <__mdiff+0x11a>
 8008c58:	6117      	str	r7, [r2, #16]
 8008c5a:	e79d      	b.n	8008b98 <__mdiff+0x34>
 8008c5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c60:	46e6      	mov	lr, ip
 8008c62:	0c08      	lsrs	r0, r1, #16
 8008c64:	fa1c fc81 	uxtah	ip, ip, r1
 8008c68:	4471      	add	r1, lr
 8008c6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c6e:	b289      	uxth	r1, r1
 8008c70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c74:	f846 1b04 	str.w	r1, [r6], #4
 8008c78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c7c:	e7dd      	b.n	8008c3a <__mdiff+0xd6>
 8008c7e:	3f01      	subs	r7, #1
 8008c80:	e7e7      	b.n	8008c52 <__mdiff+0xee>
 8008c82:	bf00      	nop
 8008c84:	080095a8 	.word	0x080095a8
 8008c88:	080095b9 	.word	0x080095b9

08008c8c <__d2b>:
 8008c8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c90:	460f      	mov	r7, r1
 8008c92:	2101      	movs	r1, #1
 8008c94:	ec59 8b10 	vmov	r8, r9, d0
 8008c98:	4616      	mov	r6, r2
 8008c9a:	f7ff fccd 	bl	8008638 <_Balloc>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	b930      	cbnz	r0, 8008cb0 <__d2b+0x24>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b23      	ldr	r3, [pc, #140]	@ (8008d34 <__d2b+0xa8>)
 8008ca6:	4824      	ldr	r0, [pc, #144]	@ (8008d38 <__d2b+0xac>)
 8008ca8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cac:	f000 fad6 	bl	800925c <__assert_func>
 8008cb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cb8:	b10d      	cbz	r5, 8008cbe <__d2b+0x32>
 8008cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	f1b8 0300 	subs.w	r3, r8, #0
 8008cc4:	d023      	beq.n	8008d0e <__d2b+0x82>
 8008cc6:	4668      	mov	r0, sp
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	f7ff fd7c 	bl	80087c6 <__lo0bits>
 8008cce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cd2:	b1d0      	cbz	r0, 8008d0a <__d2b+0x7e>
 8008cd4:	f1c0 0320 	rsb	r3, r0, #32
 8008cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	40c2      	lsrs	r2, r0
 8008ce0:	6163      	str	r3, [r4, #20]
 8008ce2:	9201      	str	r2, [sp, #4]
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	61a3      	str	r3, [r4, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bf0c      	ite	eq
 8008cec:	2201      	moveq	r2, #1
 8008cee:	2202      	movne	r2, #2
 8008cf0:	6122      	str	r2, [r4, #16]
 8008cf2:	b1a5      	cbz	r5, 8008d1e <__d2b+0x92>
 8008cf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cf8:	4405      	add	r5, r0
 8008cfa:	603d      	str	r5, [r7, #0]
 8008cfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d00:	6030      	str	r0, [r6, #0]
 8008d02:	4620      	mov	r0, r4
 8008d04:	b003      	add	sp, #12
 8008d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d0a:	6161      	str	r1, [r4, #20]
 8008d0c:	e7ea      	b.n	8008ce4 <__d2b+0x58>
 8008d0e:	a801      	add	r0, sp, #4
 8008d10:	f7ff fd59 	bl	80087c6 <__lo0bits>
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	6163      	str	r3, [r4, #20]
 8008d18:	3020      	adds	r0, #32
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	e7e8      	b.n	8008cf0 <__d2b+0x64>
 8008d1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d26:	6038      	str	r0, [r7, #0]
 8008d28:	6918      	ldr	r0, [r3, #16]
 8008d2a:	f7ff fd2d 	bl	8008788 <__hi0bits>
 8008d2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d32:	e7e5      	b.n	8008d00 <__d2b+0x74>
 8008d34:	080095a8 	.word	0x080095a8
 8008d38:	080095b9 	.word	0x080095b9

08008d3c <__sfputc_r>:
 8008d3c:	6893      	ldr	r3, [r2, #8]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	b410      	push	{r4}
 8008d44:	6093      	str	r3, [r2, #8]
 8008d46:	da08      	bge.n	8008d5a <__sfputc_r+0x1e>
 8008d48:	6994      	ldr	r4, [r2, #24]
 8008d4a:	42a3      	cmp	r3, r4
 8008d4c:	db01      	blt.n	8008d52 <__sfputc_r+0x16>
 8008d4e:	290a      	cmp	r1, #10
 8008d50:	d103      	bne.n	8008d5a <__sfputc_r+0x1e>
 8008d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d56:	f7fe bc0e 	b.w	8007576 <__swbuf_r>
 8008d5a:	6813      	ldr	r3, [r2, #0]
 8008d5c:	1c58      	adds	r0, r3, #1
 8008d5e:	6010      	str	r0, [r2, #0]
 8008d60:	7019      	strb	r1, [r3, #0]
 8008d62:	4608      	mov	r0, r1
 8008d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <__sfputs_r>:
 8008d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	4614      	mov	r4, r2
 8008d72:	18d5      	adds	r5, r2, r3
 8008d74:	42ac      	cmp	r4, r5
 8008d76:	d101      	bne.n	8008d7c <__sfputs_r+0x12>
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e007      	b.n	8008d8c <__sfputs_r+0x22>
 8008d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d80:	463a      	mov	r2, r7
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff ffda 	bl	8008d3c <__sfputc_r>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d1f3      	bne.n	8008d74 <__sfputs_r+0xa>
 8008d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d90 <_vfiprintf_r>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	460d      	mov	r5, r1
 8008d96:	b09d      	sub	sp, #116	@ 0x74
 8008d98:	4614      	mov	r4, r2
 8008d9a:	4698      	mov	r8, r3
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	b118      	cbz	r0, 8008da8 <_vfiprintf_r+0x18>
 8008da0:	6a03      	ldr	r3, [r0, #32]
 8008da2:	b90b      	cbnz	r3, 8008da8 <_vfiprintf_r+0x18>
 8008da4:	f7fe fa42 	bl	800722c <__sinit>
 8008da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008daa:	07d9      	lsls	r1, r3, #31
 8008dac:	d405      	bmi.n	8008dba <_vfiprintf_r+0x2a>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	059a      	lsls	r2, r3, #22
 8008db2:	d402      	bmi.n	8008dba <_vfiprintf_r+0x2a>
 8008db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008db6:	f7fe fcf0 	bl	800779a <__retarget_lock_acquire_recursive>
 8008dba:	89ab      	ldrh	r3, [r5, #12]
 8008dbc:	071b      	lsls	r3, r3, #28
 8008dbe:	d501      	bpl.n	8008dc4 <_vfiprintf_r+0x34>
 8008dc0:	692b      	ldr	r3, [r5, #16]
 8008dc2:	b99b      	cbnz	r3, 8008dec <_vfiprintf_r+0x5c>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f7fe fc14 	bl	80075f4 <__swsetup_r>
 8008dcc:	b170      	cbz	r0, 8008dec <_vfiprintf_r+0x5c>
 8008dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dd0:	07dc      	lsls	r4, r3, #31
 8008dd2:	d504      	bpl.n	8008dde <_vfiprintf_r+0x4e>
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	b01d      	add	sp, #116	@ 0x74
 8008dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	0598      	lsls	r0, r3, #22
 8008de2:	d4f7      	bmi.n	8008dd4 <_vfiprintf_r+0x44>
 8008de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008de6:	f7fe fcd9 	bl	800779c <__retarget_lock_release_recursive>
 8008dea:	e7f3      	b.n	8008dd4 <_vfiprintf_r+0x44>
 8008dec:	2300      	movs	r3, #0
 8008dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df0:	2320      	movs	r3, #32
 8008df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dfa:	2330      	movs	r3, #48	@ 0x30
 8008dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fac <_vfiprintf_r+0x21c>
 8008e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e04:	f04f 0901 	mov.w	r9, #1
 8008e08:	4623      	mov	r3, r4
 8008e0a:	469a      	mov	sl, r3
 8008e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e10:	b10a      	cbz	r2, 8008e16 <_vfiprintf_r+0x86>
 8008e12:	2a25      	cmp	r2, #37	@ 0x25
 8008e14:	d1f9      	bne.n	8008e0a <_vfiprintf_r+0x7a>
 8008e16:	ebba 0b04 	subs.w	fp, sl, r4
 8008e1a:	d00b      	beq.n	8008e34 <_vfiprintf_r+0xa4>
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	4622      	mov	r2, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7ff ffa1 	bl	8008d6a <__sfputs_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f000 80a7 	beq.w	8008f7c <_vfiprintf_r+0x1ec>
 8008e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e30:	445a      	add	r2, fp
 8008e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e34:	f89a 3000 	ldrb.w	r3, [sl]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 809f 	beq.w	8008f7c <_vfiprintf_r+0x1ec>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f04f 32ff 	mov.w	r2, #4294967295
 8008e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e48:	f10a 0a01 	add.w	sl, sl, #1
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	9307      	str	r3, [sp, #28]
 8008e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e56:	4654      	mov	r4, sl
 8008e58:	2205      	movs	r2, #5
 8008e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5e:	4853      	ldr	r0, [pc, #332]	@ (8008fac <_vfiprintf_r+0x21c>)
 8008e60:	f7f7 f9b6 	bl	80001d0 <memchr>
 8008e64:	9a04      	ldr	r2, [sp, #16]
 8008e66:	b9d8      	cbnz	r0, 8008ea0 <_vfiprintf_r+0x110>
 8008e68:	06d1      	lsls	r1, r2, #27
 8008e6a:	bf44      	itt	mi
 8008e6c:	2320      	movmi	r3, #32
 8008e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e72:	0713      	lsls	r3, r2, #28
 8008e74:	bf44      	itt	mi
 8008e76:	232b      	movmi	r3, #43	@ 0x2b
 8008e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e82:	d015      	beq.n	8008eb0 <_vfiprintf_r+0x120>
 8008e84:	9a07      	ldr	r2, [sp, #28]
 8008e86:	4654      	mov	r4, sl
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f04f 0c0a 	mov.w	ip, #10
 8008e8e:	4621      	mov	r1, r4
 8008e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e94:	3b30      	subs	r3, #48	@ 0x30
 8008e96:	2b09      	cmp	r3, #9
 8008e98:	d94b      	bls.n	8008f32 <_vfiprintf_r+0x1a2>
 8008e9a:	b1b0      	cbz	r0, 8008eca <_vfiprintf_r+0x13a>
 8008e9c:	9207      	str	r2, [sp, #28]
 8008e9e:	e014      	b.n	8008eca <_vfiprintf_r+0x13a>
 8008ea0:	eba0 0308 	sub.w	r3, r0, r8
 8008ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	46a2      	mov	sl, r4
 8008eae:	e7d2      	b.n	8008e56 <_vfiprintf_r+0xc6>
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	1d19      	adds	r1, r3, #4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	9103      	str	r1, [sp, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bfbb      	ittet	lt
 8008ebc:	425b      	neglt	r3, r3
 8008ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8008ec2:	9307      	strge	r3, [sp, #28]
 8008ec4:	9307      	strlt	r3, [sp, #28]
 8008ec6:	bfb8      	it	lt
 8008ec8:	9204      	strlt	r2, [sp, #16]
 8008eca:	7823      	ldrb	r3, [r4, #0]
 8008ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ece:	d10a      	bne.n	8008ee6 <_vfiprintf_r+0x156>
 8008ed0:	7863      	ldrb	r3, [r4, #1]
 8008ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ed4:	d132      	bne.n	8008f3c <_vfiprintf_r+0x1ac>
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	1d1a      	adds	r2, r3, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9203      	str	r2, [sp, #12]
 8008ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ee2:	3402      	adds	r4, #2
 8008ee4:	9305      	str	r3, [sp, #20]
 8008ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fbc <_vfiprintf_r+0x22c>
 8008eea:	7821      	ldrb	r1, [r4, #0]
 8008eec:	2203      	movs	r2, #3
 8008eee:	4650      	mov	r0, sl
 8008ef0:	f7f7 f96e 	bl	80001d0 <memchr>
 8008ef4:	b138      	cbz	r0, 8008f06 <_vfiprintf_r+0x176>
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	eba0 000a 	sub.w	r0, r0, sl
 8008efc:	2240      	movs	r2, #64	@ 0x40
 8008efe:	4082      	lsls	r2, r0
 8008f00:	4313      	orrs	r3, r2
 8008f02:	3401      	adds	r4, #1
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0a:	4829      	ldr	r0, [pc, #164]	@ (8008fb0 <_vfiprintf_r+0x220>)
 8008f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f10:	2206      	movs	r2, #6
 8008f12:	f7f7 f95d 	bl	80001d0 <memchr>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d03f      	beq.n	8008f9a <_vfiprintf_r+0x20a>
 8008f1a:	4b26      	ldr	r3, [pc, #152]	@ (8008fb4 <_vfiprintf_r+0x224>)
 8008f1c:	bb1b      	cbnz	r3, 8008f66 <_vfiprintf_r+0x1d6>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	3307      	adds	r3, #7
 8008f22:	f023 0307 	bic.w	r3, r3, #7
 8008f26:	3308      	adds	r3, #8
 8008f28:	9303      	str	r3, [sp, #12]
 8008f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2c:	443b      	add	r3, r7
 8008f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f30:	e76a      	b.n	8008e08 <_vfiprintf_r+0x78>
 8008f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f36:	460c      	mov	r4, r1
 8008f38:	2001      	movs	r0, #1
 8008f3a:	e7a8      	b.n	8008e8e <_vfiprintf_r+0xfe>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	3401      	adds	r4, #1
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	4619      	mov	r1, r3
 8008f44:	f04f 0c0a 	mov.w	ip, #10
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f4e:	3a30      	subs	r2, #48	@ 0x30
 8008f50:	2a09      	cmp	r2, #9
 8008f52:	d903      	bls.n	8008f5c <_vfiprintf_r+0x1cc>
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0c6      	beq.n	8008ee6 <_vfiprintf_r+0x156>
 8008f58:	9105      	str	r1, [sp, #20]
 8008f5a:	e7c4      	b.n	8008ee6 <_vfiprintf_r+0x156>
 8008f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f60:	4604      	mov	r4, r0
 8008f62:	2301      	movs	r3, #1
 8008f64:	e7f0      	b.n	8008f48 <_vfiprintf_r+0x1b8>
 8008f66:	ab03      	add	r3, sp, #12
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4b12      	ldr	r3, [pc, #72]	@ (8008fb8 <_vfiprintf_r+0x228>)
 8008f6e:	a904      	add	r1, sp, #16
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7fd fd17 	bl	80069a4 <_printf_float>
 8008f76:	4607      	mov	r7, r0
 8008f78:	1c78      	adds	r0, r7, #1
 8008f7a:	d1d6      	bne.n	8008f2a <_vfiprintf_r+0x19a>
 8008f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f7e:	07d9      	lsls	r1, r3, #31
 8008f80:	d405      	bmi.n	8008f8e <_vfiprintf_r+0x1fe>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	059a      	lsls	r2, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_vfiprintf_r+0x1fe>
 8008f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f8a:	f7fe fc07 	bl	800779c <__retarget_lock_release_recursive>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	065b      	lsls	r3, r3, #25
 8008f92:	f53f af1f 	bmi.w	8008dd4 <_vfiprintf_r+0x44>
 8008f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f98:	e71e      	b.n	8008dd8 <_vfiprintf_r+0x48>
 8008f9a:	ab03      	add	r3, sp, #12
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <_vfiprintf_r+0x228>)
 8008fa2:	a904      	add	r1, sp, #16
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f7fd ff95 	bl	8006ed4 <_printf_i>
 8008faa:	e7e4      	b.n	8008f76 <_vfiprintf_r+0x1e6>
 8008fac:	08009710 	.word	0x08009710
 8008fb0:	0800971a 	.word	0x0800971a
 8008fb4:	080069a5 	.word	0x080069a5
 8008fb8:	08008d6b 	.word	0x08008d6b
 8008fbc:	08009716 	.word	0x08009716

08008fc0 <__sflush_r>:
 8008fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc8:	0716      	lsls	r6, r2, #28
 8008fca:	4605      	mov	r5, r0
 8008fcc:	460c      	mov	r4, r1
 8008fce:	d454      	bmi.n	800907a <__sflush_r+0xba>
 8008fd0:	684b      	ldr	r3, [r1, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dc02      	bgt.n	8008fdc <__sflush_r+0x1c>
 8008fd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dd48      	ble.n	800906e <__sflush_r+0xae>
 8008fdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	d045      	beq.n	800906e <__sflush_r+0xae>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fe8:	682f      	ldr	r7, [r5, #0]
 8008fea:	6a21      	ldr	r1, [r4, #32]
 8008fec:	602b      	str	r3, [r5, #0]
 8008fee:	d030      	beq.n	8009052 <__sflush_r+0x92>
 8008ff0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	0759      	lsls	r1, r3, #29
 8008ff6:	d505      	bpl.n	8009004 <__sflush_r+0x44>
 8008ff8:	6863      	ldr	r3, [r4, #4]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ffe:	b10b      	cbz	r3, 8009004 <__sflush_r+0x44>
 8009000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009002:	1ad2      	subs	r2, r2, r3
 8009004:	2300      	movs	r3, #0
 8009006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009008:	6a21      	ldr	r1, [r4, #32]
 800900a:	4628      	mov	r0, r5
 800900c:	47b0      	blx	r6
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	d106      	bne.n	8009022 <__sflush_r+0x62>
 8009014:	6829      	ldr	r1, [r5, #0]
 8009016:	291d      	cmp	r1, #29
 8009018:	d82b      	bhi.n	8009072 <__sflush_r+0xb2>
 800901a:	4a2a      	ldr	r2, [pc, #168]	@ (80090c4 <__sflush_r+0x104>)
 800901c:	410a      	asrs	r2, r1
 800901e:	07d6      	lsls	r6, r2, #31
 8009020:	d427      	bmi.n	8009072 <__sflush_r+0xb2>
 8009022:	2200      	movs	r2, #0
 8009024:	6062      	str	r2, [r4, #4]
 8009026:	04d9      	lsls	r1, r3, #19
 8009028:	6922      	ldr	r2, [r4, #16]
 800902a:	6022      	str	r2, [r4, #0]
 800902c:	d504      	bpl.n	8009038 <__sflush_r+0x78>
 800902e:	1c42      	adds	r2, r0, #1
 8009030:	d101      	bne.n	8009036 <__sflush_r+0x76>
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	b903      	cbnz	r3, 8009038 <__sflush_r+0x78>
 8009036:	6560      	str	r0, [r4, #84]	@ 0x54
 8009038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800903a:	602f      	str	r7, [r5, #0]
 800903c:	b1b9      	cbz	r1, 800906e <__sflush_r+0xae>
 800903e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009042:	4299      	cmp	r1, r3
 8009044:	d002      	beq.n	800904c <__sflush_r+0x8c>
 8009046:	4628      	mov	r0, r5
 8009048:	f7ff f9f6 	bl	8008438 <_free_r>
 800904c:	2300      	movs	r3, #0
 800904e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009050:	e00d      	b.n	800906e <__sflush_r+0xae>
 8009052:	2301      	movs	r3, #1
 8009054:	4628      	mov	r0, r5
 8009056:	47b0      	blx	r6
 8009058:	4602      	mov	r2, r0
 800905a:	1c50      	adds	r0, r2, #1
 800905c:	d1c9      	bne.n	8008ff2 <__sflush_r+0x32>
 800905e:	682b      	ldr	r3, [r5, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0c6      	beq.n	8008ff2 <__sflush_r+0x32>
 8009064:	2b1d      	cmp	r3, #29
 8009066:	d001      	beq.n	800906c <__sflush_r+0xac>
 8009068:	2b16      	cmp	r3, #22
 800906a:	d11e      	bne.n	80090aa <__sflush_r+0xea>
 800906c:	602f      	str	r7, [r5, #0]
 800906e:	2000      	movs	r0, #0
 8009070:	e022      	b.n	80090b8 <__sflush_r+0xf8>
 8009072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009076:	b21b      	sxth	r3, r3
 8009078:	e01b      	b.n	80090b2 <__sflush_r+0xf2>
 800907a:	690f      	ldr	r7, [r1, #16]
 800907c:	2f00      	cmp	r7, #0
 800907e:	d0f6      	beq.n	800906e <__sflush_r+0xae>
 8009080:	0793      	lsls	r3, r2, #30
 8009082:	680e      	ldr	r6, [r1, #0]
 8009084:	bf08      	it	eq
 8009086:	694b      	ldreq	r3, [r1, #20]
 8009088:	600f      	str	r7, [r1, #0]
 800908a:	bf18      	it	ne
 800908c:	2300      	movne	r3, #0
 800908e:	eba6 0807 	sub.w	r8, r6, r7
 8009092:	608b      	str	r3, [r1, #8]
 8009094:	f1b8 0f00 	cmp.w	r8, #0
 8009098:	dde9      	ble.n	800906e <__sflush_r+0xae>
 800909a:	6a21      	ldr	r1, [r4, #32]
 800909c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800909e:	4643      	mov	r3, r8
 80090a0:	463a      	mov	r2, r7
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b0      	blx	r6
 80090a6:	2800      	cmp	r0, #0
 80090a8:	dc08      	bgt.n	80090bc <__sflush_r+0xfc>
 80090aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b2:	81a3      	strh	r3, [r4, #12]
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090bc:	4407      	add	r7, r0
 80090be:	eba8 0800 	sub.w	r8, r8, r0
 80090c2:	e7e7      	b.n	8009094 <__sflush_r+0xd4>
 80090c4:	dfbffffe 	.word	0xdfbffffe

080090c8 <_fflush_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	690b      	ldr	r3, [r1, #16]
 80090cc:	4605      	mov	r5, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	b913      	cbnz	r3, 80090d8 <_fflush_r+0x10>
 80090d2:	2500      	movs	r5, #0
 80090d4:	4628      	mov	r0, r5
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	b118      	cbz	r0, 80090e2 <_fflush_r+0x1a>
 80090da:	6a03      	ldr	r3, [r0, #32]
 80090dc:	b90b      	cbnz	r3, 80090e2 <_fflush_r+0x1a>
 80090de:	f7fe f8a5 	bl	800722c <__sinit>
 80090e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0f3      	beq.n	80090d2 <_fflush_r+0xa>
 80090ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090ec:	07d0      	lsls	r0, r2, #31
 80090ee:	d404      	bmi.n	80090fa <_fflush_r+0x32>
 80090f0:	0599      	lsls	r1, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_fflush_r+0x32>
 80090f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f6:	f7fe fb50 	bl	800779a <__retarget_lock_acquire_recursive>
 80090fa:	4628      	mov	r0, r5
 80090fc:	4621      	mov	r1, r4
 80090fe:	f7ff ff5f 	bl	8008fc0 <__sflush_r>
 8009102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009104:	07da      	lsls	r2, r3, #31
 8009106:	4605      	mov	r5, r0
 8009108:	d4e4      	bmi.n	80090d4 <_fflush_r+0xc>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	059b      	lsls	r3, r3, #22
 800910e:	d4e1      	bmi.n	80090d4 <_fflush_r+0xc>
 8009110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009112:	f7fe fb43 	bl	800779c <__retarget_lock_release_recursive>
 8009116:	e7dd      	b.n	80090d4 <_fflush_r+0xc>

08009118 <__swhatbuf_r>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	460c      	mov	r4, r1
 800911c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009120:	2900      	cmp	r1, #0
 8009122:	b096      	sub	sp, #88	@ 0x58
 8009124:	4615      	mov	r5, r2
 8009126:	461e      	mov	r6, r3
 8009128:	da0d      	bge.n	8009146 <__swhatbuf_r+0x2e>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009130:	f04f 0100 	mov.w	r1, #0
 8009134:	bf14      	ite	ne
 8009136:	2340      	movne	r3, #64	@ 0x40
 8009138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800913c:	2000      	movs	r0, #0
 800913e:	6031      	str	r1, [r6, #0]
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	b016      	add	sp, #88	@ 0x58
 8009144:	bd70      	pop	{r4, r5, r6, pc}
 8009146:	466a      	mov	r2, sp
 8009148:	f000 f848 	bl	80091dc <_fstat_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	dbec      	blt.n	800912a <__swhatbuf_r+0x12>
 8009150:	9901      	ldr	r1, [sp, #4]
 8009152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800915a:	4259      	negs	r1, r3
 800915c:	4159      	adcs	r1, r3
 800915e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009162:	e7eb      	b.n	800913c <__swhatbuf_r+0x24>

08009164 <__smakebuf_r>:
 8009164:	898b      	ldrh	r3, [r1, #12]
 8009166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009168:	079d      	lsls	r5, r3, #30
 800916a:	4606      	mov	r6, r0
 800916c:	460c      	mov	r4, r1
 800916e:	d507      	bpl.n	8009180 <__smakebuf_r+0x1c>
 8009170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	2301      	movs	r3, #1
 800917a:	6163      	str	r3, [r4, #20]
 800917c:	b003      	add	sp, #12
 800917e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009180:	ab01      	add	r3, sp, #4
 8009182:	466a      	mov	r2, sp
 8009184:	f7ff ffc8 	bl	8009118 <__swhatbuf_r>
 8009188:	9f00      	ldr	r7, [sp, #0]
 800918a:	4605      	mov	r5, r0
 800918c:	4639      	mov	r1, r7
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff f9c6 	bl	8008520 <_malloc_r>
 8009194:	b948      	cbnz	r0, 80091aa <__smakebuf_r+0x46>
 8009196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919a:	059a      	lsls	r2, r3, #22
 800919c:	d4ee      	bmi.n	800917c <__smakebuf_r+0x18>
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	f043 0302 	orr.w	r3, r3, #2
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	e7e2      	b.n	8009170 <__smakebuf_r+0xc>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	6020      	str	r0, [r4, #0]
 80091ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091ba:	b15b      	cbz	r3, 80091d4 <__smakebuf_r+0x70>
 80091bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f81d 	bl	8009200 <_isatty_r>
 80091c6:	b128      	cbz	r0, 80091d4 <__smakebuf_r+0x70>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	431d      	orrs	r5, r3
 80091d8:	81a5      	strh	r5, [r4, #12]
 80091da:	e7cf      	b.n	800917c <__smakebuf_r+0x18>

080091dc <_fstat_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	@ (80091fc <_fstat_r+0x20>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	4611      	mov	r1, r2
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	f7f8 fd35 	bl	8001c58 <_fstat>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	d102      	bne.n	80091f8 <_fstat_r+0x1c>
 80091f2:	682b      	ldr	r3, [r5, #0]
 80091f4:	b103      	cbz	r3, 80091f8 <_fstat_r+0x1c>
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	bd38      	pop	{r3, r4, r5, pc}
 80091fa:	bf00      	nop
 80091fc:	20000614 	.word	0x20000614

08009200 <_isatty_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d06      	ldr	r5, [pc, #24]	@ (800921c <_isatty_r+0x1c>)
 8009204:	2300      	movs	r3, #0
 8009206:	4604      	mov	r4, r0
 8009208:	4608      	mov	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7f8 fd34 	bl	8001c78 <_isatty>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_isatty_r+0x1a>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_isatty_r+0x1a>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20000614 	.word	0x20000614

08009220 <_sbrk_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d06      	ldr	r5, [pc, #24]	@ (800923c <_sbrk_r+0x1c>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	f7f8 fd3c 	bl	8001ca8 <_sbrk>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_sbrk_r+0x1a>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_sbrk_r+0x1a>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20000614 	.word	0x20000614

08009240 <memcpy>:
 8009240:	440a      	add	r2, r1
 8009242:	4291      	cmp	r1, r2
 8009244:	f100 33ff 	add.w	r3, r0, #4294967295
 8009248:	d100      	bne.n	800924c <memcpy+0xc>
 800924a:	4770      	bx	lr
 800924c:	b510      	push	{r4, lr}
 800924e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009256:	4291      	cmp	r1, r2
 8009258:	d1f9      	bne.n	800924e <memcpy+0xe>
 800925a:	bd10      	pop	{r4, pc}

0800925c <__assert_func>:
 800925c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800925e:	4614      	mov	r4, r2
 8009260:	461a      	mov	r2, r3
 8009262:	4b09      	ldr	r3, [pc, #36]	@ (8009288 <__assert_func+0x2c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4605      	mov	r5, r0
 8009268:	68d8      	ldr	r0, [r3, #12]
 800926a:	b954      	cbnz	r4, 8009282 <__assert_func+0x26>
 800926c:	4b07      	ldr	r3, [pc, #28]	@ (800928c <__assert_func+0x30>)
 800926e:	461c      	mov	r4, r3
 8009270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009274:	9100      	str	r1, [sp, #0]
 8009276:	462b      	mov	r3, r5
 8009278:	4905      	ldr	r1, [pc, #20]	@ (8009290 <__assert_func+0x34>)
 800927a:	f000 f841 	bl	8009300 <fiprintf>
 800927e:	f000 f851 	bl	8009324 <abort>
 8009282:	4b04      	ldr	r3, [pc, #16]	@ (8009294 <__assert_func+0x38>)
 8009284:	e7f4      	b.n	8009270 <__assert_func+0x14>
 8009286:	bf00      	nop
 8009288:	20000018 	.word	0x20000018
 800928c:	08009766 	.word	0x08009766
 8009290:	08009738 	.word	0x08009738
 8009294:	0800972b 	.word	0x0800972b

08009298 <_calloc_r>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	fba1 5402 	umull	r5, r4, r1, r2
 800929e:	b93c      	cbnz	r4, 80092b0 <_calloc_r+0x18>
 80092a0:	4629      	mov	r1, r5
 80092a2:	f7ff f93d 	bl	8008520 <_malloc_r>
 80092a6:	4606      	mov	r6, r0
 80092a8:	b928      	cbnz	r0, 80092b6 <_calloc_r+0x1e>
 80092aa:	2600      	movs	r6, #0
 80092ac:	4630      	mov	r0, r6
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	220c      	movs	r2, #12
 80092b2:	6002      	str	r2, [r0, #0]
 80092b4:	e7f9      	b.n	80092aa <_calloc_r+0x12>
 80092b6:	462a      	mov	r2, r5
 80092b8:	4621      	mov	r1, r4
 80092ba:	f7fe f9f1 	bl	80076a0 <memset>
 80092be:	e7f5      	b.n	80092ac <_calloc_r+0x14>

080092c0 <__ascii_mbtowc>:
 80092c0:	b082      	sub	sp, #8
 80092c2:	b901      	cbnz	r1, 80092c6 <__ascii_mbtowc+0x6>
 80092c4:	a901      	add	r1, sp, #4
 80092c6:	b142      	cbz	r2, 80092da <__ascii_mbtowc+0x1a>
 80092c8:	b14b      	cbz	r3, 80092de <__ascii_mbtowc+0x1e>
 80092ca:	7813      	ldrb	r3, [r2, #0]
 80092cc:	600b      	str	r3, [r1, #0]
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	1e10      	subs	r0, r2, #0
 80092d2:	bf18      	it	ne
 80092d4:	2001      	movne	r0, #1
 80092d6:	b002      	add	sp, #8
 80092d8:	4770      	bx	lr
 80092da:	4610      	mov	r0, r2
 80092dc:	e7fb      	b.n	80092d6 <__ascii_mbtowc+0x16>
 80092de:	f06f 0001 	mvn.w	r0, #1
 80092e2:	e7f8      	b.n	80092d6 <__ascii_mbtowc+0x16>

080092e4 <__ascii_wctomb>:
 80092e4:	4603      	mov	r3, r0
 80092e6:	4608      	mov	r0, r1
 80092e8:	b141      	cbz	r1, 80092fc <__ascii_wctomb+0x18>
 80092ea:	2aff      	cmp	r2, #255	@ 0xff
 80092ec:	d904      	bls.n	80092f8 <__ascii_wctomb+0x14>
 80092ee:	228a      	movs	r2, #138	@ 0x8a
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	f04f 30ff 	mov.w	r0, #4294967295
 80092f6:	4770      	bx	lr
 80092f8:	700a      	strb	r2, [r1, #0]
 80092fa:	2001      	movs	r0, #1
 80092fc:	4770      	bx	lr
	...

08009300 <fiprintf>:
 8009300:	b40e      	push	{r1, r2, r3}
 8009302:	b503      	push	{r0, r1, lr}
 8009304:	4601      	mov	r1, r0
 8009306:	ab03      	add	r3, sp, #12
 8009308:	4805      	ldr	r0, [pc, #20]	@ (8009320 <fiprintf+0x20>)
 800930a:	f853 2b04 	ldr.w	r2, [r3], #4
 800930e:	6800      	ldr	r0, [r0, #0]
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	f7ff fd3d 	bl	8008d90 <_vfiprintf_r>
 8009316:	b002      	add	sp, #8
 8009318:	f85d eb04 	ldr.w	lr, [sp], #4
 800931c:	b003      	add	sp, #12
 800931e:	4770      	bx	lr
 8009320:	20000018 	.word	0x20000018

08009324 <abort>:
 8009324:	b508      	push	{r3, lr}
 8009326:	2006      	movs	r0, #6
 8009328:	f000 f82c 	bl	8009384 <raise>
 800932c:	2001      	movs	r0, #1
 800932e:	f7f8 fc5f 	bl	8001bf0 <_exit>

08009332 <_raise_r>:
 8009332:	291f      	cmp	r1, #31
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4605      	mov	r5, r0
 8009338:	460c      	mov	r4, r1
 800933a:	d904      	bls.n	8009346 <_raise_r+0x14>
 800933c:	2316      	movs	r3, #22
 800933e:	6003      	str	r3, [r0, #0]
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	bd38      	pop	{r3, r4, r5, pc}
 8009346:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009348:	b112      	cbz	r2, 8009350 <_raise_r+0x1e>
 800934a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800934e:	b94b      	cbnz	r3, 8009364 <_raise_r+0x32>
 8009350:	4628      	mov	r0, r5
 8009352:	f000 f831 	bl	80093b8 <_getpid_r>
 8009356:	4622      	mov	r2, r4
 8009358:	4601      	mov	r1, r0
 800935a:	4628      	mov	r0, r5
 800935c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009360:	f000 b818 	b.w	8009394 <_kill_r>
 8009364:	2b01      	cmp	r3, #1
 8009366:	d00a      	beq.n	800937e <_raise_r+0x4c>
 8009368:	1c59      	adds	r1, r3, #1
 800936a:	d103      	bne.n	8009374 <_raise_r+0x42>
 800936c:	2316      	movs	r3, #22
 800936e:	6003      	str	r3, [r0, #0]
 8009370:	2001      	movs	r0, #1
 8009372:	e7e7      	b.n	8009344 <_raise_r+0x12>
 8009374:	2100      	movs	r1, #0
 8009376:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800937a:	4620      	mov	r0, r4
 800937c:	4798      	blx	r3
 800937e:	2000      	movs	r0, #0
 8009380:	e7e0      	b.n	8009344 <_raise_r+0x12>
	...

08009384 <raise>:
 8009384:	4b02      	ldr	r3, [pc, #8]	@ (8009390 <raise+0xc>)
 8009386:	4601      	mov	r1, r0
 8009388:	6818      	ldr	r0, [r3, #0]
 800938a:	f7ff bfd2 	b.w	8009332 <_raise_r>
 800938e:	bf00      	nop
 8009390:	20000018 	.word	0x20000018

08009394 <_kill_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_kill_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f7f8 fc15 	bl	8001bd0 <_kill>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_kill_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_kill_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20000614 	.word	0x20000614

080093b8 <_getpid_r>:
 80093b8:	f7f8 bc02 	b.w	8001bc0 <_getpid>

080093bc <fmaxf>:
 80093bc:	b508      	push	{r3, lr}
 80093be:	ed2d 8b02 	vpush	{d8}
 80093c2:	eeb0 8a40 	vmov.f32	s16, s0
 80093c6:	eef0 8a60 	vmov.f32	s17, s1
 80093ca:	f000 f831 	bl	8009430 <__fpclassifyf>
 80093ce:	b930      	cbnz	r0, 80093de <fmaxf+0x22>
 80093d0:	eeb0 8a68 	vmov.f32	s16, s17
 80093d4:	eeb0 0a48 	vmov.f32	s0, s16
 80093d8:	ecbd 8b02 	vpop	{d8}
 80093dc:	bd08      	pop	{r3, pc}
 80093de:	eeb0 0a68 	vmov.f32	s0, s17
 80093e2:	f000 f825 	bl	8009430 <__fpclassifyf>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0f4      	beq.n	80093d4 <fmaxf+0x18>
 80093ea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80093ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f2:	dded      	ble.n	80093d0 <fmaxf+0x14>
 80093f4:	e7ee      	b.n	80093d4 <fmaxf+0x18>

080093f6 <fminf>:
 80093f6:	b508      	push	{r3, lr}
 80093f8:	ed2d 8b02 	vpush	{d8}
 80093fc:	eeb0 8a40 	vmov.f32	s16, s0
 8009400:	eef0 8a60 	vmov.f32	s17, s1
 8009404:	f000 f814 	bl	8009430 <__fpclassifyf>
 8009408:	b930      	cbnz	r0, 8009418 <fminf+0x22>
 800940a:	eeb0 8a68 	vmov.f32	s16, s17
 800940e:	eeb0 0a48 	vmov.f32	s0, s16
 8009412:	ecbd 8b02 	vpop	{d8}
 8009416:	bd08      	pop	{r3, pc}
 8009418:	eeb0 0a68 	vmov.f32	s0, s17
 800941c:	f000 f808 	bl	8009430 <__fpclassifyf>
 8009420:	2800      	cmp	r0, #0
 8009422:	d0f4      	beq.n	800940e <fminf+0x18>
 8009424:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942c:	d5ed      	bpl.n	800940a <fminf+0x14>
 800942e:	e7ee      	b.n	800940e <fminf+0x18>

08009430 <__fpclassifyf>:
 8009430:	ee10 3a10 	vmov	r3, s0
 8009434:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8009438:	d00d      	beq.n	8009456 <__fpclassifyf+0x26>
 800943a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800943e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8009442:	d30a      	bcc.n	800945a <__fpclassifyf+0x2a>
 8009444:	4b07      	ldr	r3, [pc, #28]	@ (8009464 <__fpclassifyf+0x34>)
 8009446:	1e42      	subs	r2, r0, #1
 8009448:	429a      	cmp	r2, r3
 800944a:	d908      	bls.n	800945e <__fpclassifyf+0x2e>
 800944c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8009450:	4258      	negs	r0, r3
 8009452:	4158      	adcs	r0, r3
 8009454:	4770      	bx	lr
 8009456:	2002      	movs	r0, #2
 8009458:	4770      	bx	lr
 800945a:	2004      	movs	r0, #4
 800945c:	4770      	bx	lr
 800945e:	2003      	movs	r0, #3
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	007ffffe 	.word	0x007ffffe

08009468 <_init>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr

08009474 <_fini>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr
